//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var connectors_ttypes = require('./connectors_types');


var ttypes = module.exports = {};
var SqlQueryTaskPayload = module.exports.SqlQueryTaskPayload = function(args) {
  this.sqlFileID = null;
  this.workingDirID = null;
  this.dsnID = null;
  this.password = null;
  if (args) {
    if (args.sqlFileID !== undefined && args.sqlFileID !== null) {
      this.sqlFileID = args.sqlFileID;
    }
    if (args.workingDirID !== undefined && args.workingDirID !== null) {
      this.workingDirID = args.workingDirID;
    }
    if (args.dsnID !== undefined && args.dsnID !== null) {
      this.dsnID = args.dsnID;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
SqlQueryTaskPayload.prototype = {};
SqlQueryTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sqlFileID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.workingDirID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dsnID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SqlQueryTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('SqlQueryTaskPayload');
  if (this.sqlFileID !== null && this.sqlFileID !== undefined) {
    output.writeFieldBegin('sqlFileID', Thrift.Type.STRING, 1);
    output.writeString(this.sqlFileID);
    output.writeFieldEnd();
  }
  if (this.workingDirID !== null && this.workingDirID !== undefined) {
    output.writeFieldBegin('workingDirID', Thrift.Type.STRING, 2);
    output.writeString(this.workingDirID);
    output.writeFieldEnd();
  }
  if (this.dsnID !== null && this.dsnID !== undefined) {
    output.writeFieldBegin('dsnID', Thrift.Type.STRING, 3);
    output.writeString(this.dsnID);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'dmp-connector-mssql';
ttypes.VERSION = '0.2.0';
ttypes.TASK_IMPORT_CSV = 'task-mssql-import';
ttypes.TASK_EXPORT_CSV = 'task-mssql-export';
ttypes.TASK_MSSQL_EXECUTE = 'task-mssql-execute';
ttypes.ERR_CODE = 58;
