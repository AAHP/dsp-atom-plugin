//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./user_service_manager_types');
//HELPER FUNCTIONS AND STRUCTURES

var PublicUserServiceManager_create_args = function(args) {
  this.ctx = null;
  this.name = null;
  this.serviceType = null;
  this.apiTokenID = null;
  this.appDirID = null;
  this.envVars = null;
  this.password = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.serviceType !== undefined && args.serviceType !== null) {
      this.serviceType = args.serviceType;
    }
    if (args.apiTokenID !== undefined && args.apiTokenID !== null) {
      this.apiTokenID = args.apiTokenID;
    }
    if (args.appDirID !== undefined && args.appDirID !== null) {
      this.appDirID = args.appDirID;
    }
    if (args.envVars !== undefined && args.envVars !== null) {
      this.envVars = Thrift.copyMap(args.envVars, [null]);
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
PublicUserServiceManager_create_args.prototype = {};
PublicUserServiceManager_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.apiTokenID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.appDirID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size26 = 0;
        var _rtmp330;
        this.envVars = {};
        var _ktype27 = 0;
        var _vtype28 = 0;
        _rtmp330 = input.readMapBegin();
        _ktype27 = _rtmp330.ktype;
        _vtype28 = _rtmp330.vtype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var key32 = null;
          var val33 = null;
          key32 = input.readString();
          val33 = input.readString();
          this.envVars[key32] = val33;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_create_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_create_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.STRING, 3);
    output.writeString(this.serviceType);
    output.writeFieldEnd();
  }
  if (this.apiTokenID !== null && this.apiTokenID !== undefined) {
    output.writeFieldBegin('apiTokenID', Thrift.Type.STRING, 4);
    output.writeString(this.apiTokenID);
    output.writeFieldEnd();
  }
  if (this.appDirID !== null && this.appDirID !== undefined) {
    output.writeFieldBegin('appDirID', Thrift.Type.STRING, 5);
    output.writeString(this.appDirID);
    output.writeFieldEnd();
  }
  if (this.envVars !== null && this.envVars !== undefined) {
    output.writeFieldBegin('envVars', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envVars));
    for (var kiter34 in this.envVars)
    {
      if (this.envVars.hasOwnProperty(kiter34))
      {
        var viter35 = this.envVars[kiter34];
        output.writeString(kiter34);
        output.writeString(viter35);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 7);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_create_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserServiceEntry(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_create_result.prototype = {};
PublicUserServiceManager_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserServiceEntry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_create_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_create_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_remove_args = function(args) {
  this.ctx = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PublicUserServiceManager_remove_args.prototype = {};
PublicUserServiceManager_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_remove_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_remove_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_remove_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_remove_result.prototype = {};
PublicUserServiceManager_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_remove_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_remove_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_start_args = function(args) {
  this.ctx = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PublicUserServiceManager_start_args.prototype = {};
PublicUserServiceManager_start_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_start_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_start_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_start_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_start_result.prototype = {};
PublicUserServiceManager_start_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_start_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_start_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_stop_args = function(args) {
  this.ctx = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PublicUserServiceManager_stop_args.prototype = {};
PublicUserServiceManager_stop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_stop_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_stop_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_stop_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_stop_result.prototype = {};
PublicUserServiceManager_stop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_stop_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_stop_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_update_args = function(args) {
  this.ctx = null;
  this.name = null;
  this.envVars = null;
  this.password = null;
  this.reCreate = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.envVars !== undefined && args.envVars !== null) {
      this.envVars = Thrift.copyMap(args.envVars, [null]);
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.reCreate !== undefined && args.reCreate !== null) {
      this.reCreate = args.reCreate;
    }
  }
};
PublicUserServiceManager_update_args.prototype = {};
PublicUserServiceManager_update_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size36 = 0;
        var _rtmp340;
        this.envVars = {};
        var _ktype37 = 0;
        var _vtype38 = 0;
        _rtmp340 = input.readMapBegin();
        _ktype37 = _rtmp340.ktype;
        _vtype38 = _rtmp340.vtype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var key42 = null;
          var val43 = null;
          key42 = input.readString();
          val43 = input.readString();
          this.envVars[key42] = val43;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.reCreate = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_update_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_update_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.envVars !== null && this.envVars !== undefined) {
    output.writeFieldBegin('envVars', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envVars));
    for (var kiter44 in this.envVars)
    {
      if (this.envVars.hasOwnProperty(kiter44))
      {
        var viter45 = this.envVars[kiter44];
        output.writeString(kiter44);
        output.writeString(viter45);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 4);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.reCreate !== null && this.reCreate !== undefined) {
    output.writeFieldBegin('reCreate', Thrift.Type.BOOL, 5);
    output.writeBool(this.reCreate);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_update_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserServiceEntry(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_update_result.prototype = {};
PublicUserServiceManager_update_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserServiceEntry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_update_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_update_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_getServiceInfo_args = function(args) {
  this.ctx = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PublicUserServiceManager_getServiceInfo_args.prototype = {};
PublicUserServiceManager_getServiceInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_getServiceInfo_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_getServiceInfo_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_getServiceInfo_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserServiceEntry(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_getServiceInfo_result.prototype = {};
PublicUserServiceManager_getServiceInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserServiceEntry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_getServiceInfo_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_getServiceInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_getServices_args = function(args) {
  this.ctx = null;
  this.paginator = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
  }
};
PublicUserServiceManager_getServices_args.prototype = {};
PublicUserServiceManager_getServices_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_getServices_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_getServices_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 2);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_getServices_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserServiceCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_getServices_result.prototype = {};
PublicUserServiceManager_getServices_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserServiceCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_getServices_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_getServices_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_getLogs_args = function(args) {
  this.ctx = null;
  this.name = null;
  this.tail = null;
  this.sinceTs = null;
  this.untilTs = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.tail !== undefined && args.tail !== null) {
      this.tail = args.tail;
    }
    if (args.sinceTs !== undefined && args.sinceTs !== null) {
      this.sinceTs = args.sinceTs;
    }
    if (args.untilTs !== undefined && args.untilTs !== null) {
      this.untilTs = args.untilTs;
    }
  }
};
PublicUserServiceManager_getLogs_args.prototype = {};
PublicUserServiceManager_getLogs_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I16) {
        this.tail = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.sinceTs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.untilTs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_getLogs_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_getLogs_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.tail !== null && this.tail !== undefined) {
    output.writeFieldBegin('tail', Thrift.Type.I16, 3);
    output.writeI16(this.tail);
    output.writeFieldEnd();
  }
  if (this.sinceTs !== null && this.sinceTs !== undefined) {
    output.writeFieldBegin('sinceTs', Thrift.Type.STRING, 4);
    output.writeString(this.sinceTs);
    output.writeFieldEnd();
  }
  if (this.untilTs !== null && this.untilTs !== undefined) {
    output.writeFieldBegin('untilTs', Thrift.Type.STRING, 5);
    output.writeString(this.untilTs);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_getLogs_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserServiceLogEntry(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_getLogs_result.prototype = {};
PublicUserServiceManager_getLogs_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserServiceLogEntry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_getLogs_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_getLogs_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_getActivities_args = function(args) {
  this.ctx = null;
  this.name = null;
  this.paginator = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
  }
};
PublicUserServiceManager_getActivities_args.prototype = {};
PublicUserServiceManager_getActivities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_getActivities_args.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_getActivities_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 3);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManager_getActivities_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.UserServiceActivityCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicUserServiceManager_getActivities_result.prototype = {};
PublicUserServiceManager_getActivities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.UserServiceActivityCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicUserServiceManager_getActivities_result.prototype.write = function(output) {
  output.writeStructBegin('PublicUserServiceManager_getActivities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicUserServiceManagerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(PublicUserServiceManagerClient, BaseServiceClient);
PublicUserServiceManagerClient.prototype.seqid = function() { return this._seqid; };
PublicUserServiceManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };
PublicUserServiceManagerClient.prototype.create = function(ctx, name, serviceType, apiTokenID, appDirID, envVars, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create(ctx, name, serviceType, apiTokenID, appDirID, envVars, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create(ctx, name, serviceType, apiTokenID, appDirID, envVars, password);
  }
};

PublicUserServiceManagerClient.prototype.send_create = function(ctx, name, serviceType, apiTokenID, appDirID, envVars, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_create_args();
  args.ctx = ctx;
  args.name = name;
  args.serviceType = serviceType;
  args.apiTokenID = apiTokenID;
  args.appDirID = appDirID;
  args.envVars = envVars;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create failed: unknown result');
};
PublicUserServiceManagerClient.prototype.remove = function(ctx, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove(ctx, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove(ctx, name);
  }
};

PublicUserServiceManagerClient.prototype.send_remove = function(ctx, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_remove_args();
  args.ctx = ctx;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_remove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_remove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicUserServiceManagerClient.prototype.start = function(ctx, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_start(ctx, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_start(ctx, name);
  }
};

PublicUserServiceManagerClient.prototype.send_start = function(ctx, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('start', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_start_args();
  args.ctx = ctx;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_start = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_start_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicUserServiceManagerClient.prototype.stop = function(ctx, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stop(ctx, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stop(ctx, name);
  }
};

PublicUserServiceManagerClient.prototype.send_stop = function(ctx, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stop', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_stop_args();
  args.ctx = ctx;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_stop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_stop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicUserServiceManagerClient.prototype.update = function(ctx, name, envVars, password, reCreate, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update(ctx, name, envVars, password, reCreate);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update(ctx, name, envVars, password, reCreate);
  }
};

PublicUserServiceManagerClient.prototype.send_update = function(ctx, name, envVars, password, reCreate) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_update_args();
  args.ctx = ctx;
  args.name = name;
  args.envVars = envVars;
  args.password = password;
  args.reCreate = reCreate;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_update = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_update_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update failed: unknown result');
};
PublicUserServiceManagerClient.prototype.getServiceInfo = function(ctx, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getServiceInfo(ctx, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getServiceInfo(ctx, name);
  }
};

PublicUserServiceManagerClient.prototype.send_getServiceInfo = function(ctx, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getServiceInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_getServiceInfo_args();
  args.ctx = ctx;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_getServiceInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_getServiceInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServiceInfo failed: unknown result');
};
PublicUserServiceManagerClient.prototype.getServices = function(ctx, paginator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getServices(ctx, paginator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getServices(ctx, paginator);
  }
};

PublicUserServiceManagerClient.prototype.send_getServices = function(ctx, paginator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getServices', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_getServices_args();
  args.ctx = ctx;
  args.paginator = paginator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_getServices = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_getServices_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getServices failed: unknown result');
};
PublicUserServiceManagerClient.prototype.getLogs = function(ctx, name, tail, sinceTs, untilTs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getLogs(ctx, name, tail, sinceTs, untilTs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getLogs(ctx, name, tail, sinceTs, untilTs);
  }
};

PublicUserServiceManagerClient.prototype.send_getLogs = function(ctx, name, tail, sinceTs, untilTs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getLogs', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_getLogs_args();
  args.ctx = ctx;
  args.name = name;
  args.tail = tail;
  args.sinceTs = sinceTs;
  args.untilTs = untilTs;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_getLogs = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_getLogs_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getLogs failed: unknown result');
};
PublicUserServiceManagerClient.prototype.getActivities = function(ctx, name, paginator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getActivities(ctx, name, paginator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getActivities(ctx, name, paginator);
  }
};

PublicUserServiceManagerClient.prototype.send_getActivities = function(ctx, name, paginator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActivities', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicUserServiceManager_getActivities_args();
  args.ctx = ctx;
  args.name = name;
  args.paginator = paginator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicUserServiceManagerClient.prototype.recv_getActivities = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicUserServiceManager_getActivities_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActivities failed: unknown result');
};
var PublicUserServiceManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(PublicUserServiceManagerProcessor, BaseServiceProcessor);
PublicUserServiceManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PublicUserServiceManagerProcessor.prototype.process_create = function(seqid, input, output) {
  var args = new PublicUserServiceManager_create_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create.length === 7) {
    Q.fcall(this._handler.create, args.ctx, args.name, args.serviceType, args.apiTokenID, args.appDirID, args.envVars, args.password)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_create_result({success: result});
        output.writeMessageBegin("create", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_create_result(err);
          output.writeMessageBegin("create", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create(args.ctx, args.name, args.serviceType, args.apiTokenID, args.appDirID, args.envVars, args.password, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_create_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicUserServiceManagerProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new PublicUserServiceManager_remove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove.length === 2) {
    Q.fcall(this._handler.remove, args.ctx, args.name)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_remove_result({success: result});
        output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_remove_result(err);
          output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("remove", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.remove(args.ctx, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_remove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicUserServiceManagerProcessor.prototype.process_start = function(seqid, input, output) {
  var args = new PublicUserServiceManager_start_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.start.length === 2) {
    Q.fcall(this._handler.start, args.ctx, args.name)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_start_result({success: result});
        output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_start_result(err);
          output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("start", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.start(args.ctx, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_start_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("start", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("start", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicUserServiceManagerProcessor.prototype.process_stop = function(seqid, input, output) {
  var args = new PublicUserServiceManager_stop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stop.length === 2) {
    Q.fcall(this._handler.stop, args.ctx, args.name)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_stop_result({success: result});
        output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_stop_result(err);
          output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.stop(args.ctx, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_stop_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stop", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicUserServiceManagerProcessor.prototype.process_update = function(seqid, input, output) {
  var args = new PublicUserServiceManager_update_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update.length === 5) {
    Q.fcall(this._handler.update, args.ctx, args.name, args.envVars, args.password, args.reCreate)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_update_result({success: result});
        output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_update_result(err);
          output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("update", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update(args.ctx, args.name, args.envVars, args.password, args.reCreate, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_update_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicUserServiceManagerProcessor.prototype.process_getServiceInfo = function(seqid, input, output) {
  var args = new PublicUserServiceManager_getServiceInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getServiceInfo.length === 2) {
    Q.fcall(this._handler.getServiceInfo, args.ctx, args.name)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_getServiceInfo_result({success: result});
        output.writeMessageBegin("getServiceInfo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_getServiceInfo_result(err);
          output.writeMessageBegin("getServiceInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServiceInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getServiceInfo(args.ctx, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_getServiceInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getServiceInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getServiceInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicUserServiceManagerProcessor.prototype.process_getServices = function(seqid, input, output) {
  var args = new PublicUserServiceManager_getServices_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getServices.length === 2) {
    Q.fcall(this._handler.getServices, args.ctx, args.paginator)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_getServices_result({success: result});
        output.writeMessageBegin("getServices", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_getServices_result(err);
          output.writeMessageBegin("getServices", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getServices", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getServices(args.ctx, args.paginator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_getServices_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getServices", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getServices", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicUserServiceManagerProcessor.prototype.process_getLogs = function(seqid, input, output) {
  var args = new PublicUserServiceManager_getLogs_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getLogs.length === 5) {
    Q.fcall(this._handler.getLogs, args.ctx, args.name, args.tail, args.sinceTs, args.untilTs)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_getLogs_result({success: result});
        output.writeMessageBegin("getLogs", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_getLogs_result(err);
          output.writeMessageBegin("getLogs", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getLogs", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getLogs(args.ctx, args.name, args.tail, args.sinceTs, args.untilTs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_getLogs_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getLogs", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getLogs", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicUserServiceManagerProcessor.prototype.process_getActivities = function(seqid, input, output) {
  var args = new PublicUserServiceManager_getActivities_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getActivities.length === 3) {
    Q.fcall(this._handler.getActivities, args.ctx, args.name, args.paginator)
      .then(function(result) {
        var result_obj = new PublicUserServiceManager_getActivities_result({success: result});
        output.writeMessageBegin("getActivities", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicUserServiceManager_getActivities_result(err);
          output.writeMessageBegin("getActivities", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActivities", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getActivities(args.ctx, args.name, args.paginator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicUserServiceManager_getActivities_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getActivities", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getActivities", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
