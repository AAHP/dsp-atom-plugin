//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var Entry = module.exports.Entry = function(args) {
  this.dsnType = null;
  this.Name = null;
  this.isShared = null;
  this.dsnString = null;
  this.createdBy = null;
  this.createdOn = null;
  this.updatedOn = null;
  this.extra = null;
  if (args) {
    if (args.dsnType !== undefined && args.dsnType !== null) {
      this.dsnType = args.dsnType;
    }
    if (args.Name !== undefined && args.Name !== null) {
      this.Name = args.Name;
    }
    if (args.isShared !== undefined && args.isShared !== null) {
      this.isShared = args.isShared;
    }
    if (args.dsnString !== undefined && args.dsnString !== null) {
      this.dsnString = args.dsnString;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.createdOn !== undefined && args.createdOn !== null) {
      this.createdOn = args.createdOn;
    }
    if (args.updatedOn !== undefined && args.updatedOn !== null) {
      this.updatedOn = args.updatedOn;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
Entry.prototype = {};
Entry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dsnType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.isShared = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dsnString = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createdOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.updatedOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.extra = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.extra[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Entry.prototype.write = function(output) {
  output.writeStructBegin('Entry');
  if (this.dsnType !== null && this.dsnType !== undefined) {
    output.writeFieldBegin('dsnType', Thrift.Type.STRING, 1);
    output.writeString(this.dsnType);
    output.writeFieldEnd();
  }
  if (this.Name !== null && this.Name !== undefined) {
    output.writeFieldBegin('Name', Thrift.Type.STRING, 2);
    output.writeString(this.Name);
    output.writeFieldEnd();
  }
  if (this.isShared !== null && this.isShared !== undefined) {
    output.writeFieldBegin('isShared', Thrift.Type.BOOL, 3);
    output.writeBool(this.isShared);
    output.writeFieldEnd();
  }
  if (this.dsnString !== null && this.dsnString !== undefined) {
    output.writeFieldBegin('dsnString', Thrift.Type.STRING, 4);
    output.writeString(this.dsnString);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 5);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.createdOn !== null && this.createdOn !== undefined) {
    output.writeFieldBegin('createdOn', Thrift.Type.STRING, 6);
    output.writeString(this.createdOn);
    output.writeFieldEnd();
  }
  if (this.updatedOn !== null && this.updatedOn !== undefined) {
    output.writeFieldBegin('updatedOn', Thrift.Type.STRING, 7);
    output.writeString(this.updatedOn);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 8);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter8 in this.extra)
    {
      if (this.extra.hasOwnProperty(kiter8))
      {
        var viter9 = this.extra[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListEntry = module.exports.ListEntry = function(args) {
  this.ID = null;
  this.dsnType = null;
  this.Name = null;
  this.isShared = null;
  this.dsnString = null;
  this.hasPassword = null;
  this.createdBy = null;
  this.createdOn = null;
  this.updatedOn = null;
  this.extra = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.dsnType !== undefined && args.dsnType !== null) {
      this.dsnType = args.dsnType;
    }
    if (args.Name !== undefined && args.Name !== null) {
      this.Name = args.Name;
    }
    if (args.isShared !== undefined && args.isShared !== null) {
      this.isShared = args.isShared;
    }
    if (args.dsnString !== undefined && args.dsnString !== null) {
      this.dsnString = args.dsnString;
    }
    if (args.hasPassword !== undefined && args.hasPassword !== null) {
      this.hasPassword = args.hasPassword;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.createdOn !== undefined && args.createdOn !== null) {
      this.createdOn = args.createdOn;
    }
    if (args.updatedOn !== undefined && args.updatedOn !== null) {
      this.updatedOn = args.updatedOn;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
ListEntry.prototype = {};
ListEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dsnType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isShared = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.dsnString = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.hasPassword = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createdOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.updatedOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.extra = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readString();
          this.extra[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListEntry.prototype.write = function(output) {
  output.writeStructBegin('ListEntry');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.dsnType !== null && this.dsnType !== undefined) {
    output.writeFieldBegin('dsnType', Thrift.Type.STRING, 2);
    output.writeString(this.dsnType);
    output.writeFieldEnd();
  }
  if (this.Name !== null && this.Name !== undefined) {
    output.writeFieldBegin('Name', Thrift.Type.STRING, 3);
    output.writeString(this.Name);
    output.writeFieldEnd();
  }
  if (this.isShared !== null && this.isShared !== undefined) {
    output.writeFieldBegin('isShared', Thrift.Type.BOOL, 4);
    output.writeBool(this.isShared);
    output.writeFieldEnd();
  }
  if (this.dsnString !== null && this.dsnString !== undefined) {
    output.writeFieldBegin('dsnString', Thrift.Type.STRING, 5);
    output.writeString(this.dsnString);
    output.writeFieldEnd();
  }
  if (this.hasPassword !== null && this.hasPassword !== undefined) {
    output.writeFieldBegin('hasPassword', Thrift.Type.BOOL, 6);
    output.writeBool(this.hasPassword);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 7);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.createdOn !== null && this.createdOn !== undefined) {
    output.writeFieldBegin('createdOn', Thrift.Type.STRING, 8);
    output.writeString(this.createdOn);
    output.writeFieldEnd();
  }
  if (this.updatedOn !== null && this.updatedOn !== undefined) {
    output.writeFieldBegin('updatedOn', Thrift.Type.STRING, 9);
    output.writeString(this.updatedOn);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 10);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter18 in this.extra)
    {
      if (this.extra.hasOwnProperty(kiter18))
      {
        var viter19 = this.extra[kiter18];
        output.writeString(kiter18);
        output.writeString(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '0.2.1';
ttypes.SERVICE_NAME = 'dmp-dsn';
ttypes.ERR_CODE = 52;
ttypes.SHARED_DSN_PATH = 'dmp/dsn/shared';
ttypes.PRIVATE_DSN_PATH = 'dmp/dsn/private';
