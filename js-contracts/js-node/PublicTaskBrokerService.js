//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./task_broker_types');
//HELPER FUNCTIONS AND STRUCTURES

var PublicTaskBrokerService_getTask_args = function(args) {
  this.ctx = null;
  this.taskID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.taskID !== undefined && args.taskID !== null) {
      this.taskID = args.taskID;
    }
  }
};
PublicTaskBrokerService_getTask_args.prototype = {};
PublicTaskBrokerService_getTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.taskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicTaskBrokerService_getTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicTaskBrokerService_getTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.taskID !== null && this.taskID !== undefined) {
    output.writeFieldBegin('taskID', Thrift.Type.STRING, 2);
    output.writeString(this.taskID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicTaskBrokerService_getTask_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TaskInfo(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicTaskBrokerService_getTask_result.prototype = {};
PublicTaskBrokerService_getTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TaskInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicTaskBrokerService_getTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicTaskBrokerService_getTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicTaskBrokerService_cancelTask_args = function(args) {
  this.ctx = null;
  this.taskID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.taskID !== undefined && args.taskID !== null) {
      this.taskID = args.taskID;
    }
  }
};
PublicTaskBrokerService_cancelTask_args.prototype = {};
PublicTaskBrokerService_cancelTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.taskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicTaskBrokerService_cancelTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicTaskBrokerService_cancelTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.taskID !== null && this.taskID !== undefined) {
    output.writeFieldBegin('taskID', Thrift.Type.STRING, 2);
    output.writeString(this.taskID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicTaskBrokerService_cancelTask_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TaskInfo(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicTaskBrokerService_cancelTask_result.prototype = {};
PublicTaskBrokerService_cancelTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TaskInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicTaskBrokerService_cancelTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicTaskBrokerService_cancelTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicTaskBrokerService_getAll_args = function(args) {
  this.ctx = null;
  this.filter = null;
  this.paginator = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.TaskInfoFiter(args.filter);
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
  }
};
PublicTaskBrokerService_getAll_args.prototype = {};
PublicTaskBrokerService_getAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.TaskInfoFiter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicTaskBrokerService_getAll_args.prototype.write = function(output) {
  output.writeStructBegin('PublicTaskBrokerService_getAll_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 3);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicTaskBrokerService_getAll_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TaskInfoCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicTaskBrokerService_getAll_result.prototype = {};
PublicTaskBrokerService_getAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TaskInfoCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicTaskBrokerService_getAll_result.prototype.write = function(output) {
  output.writeStructBegin('PublicTaskBrokerService_getAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicTaskBrokerService_sendTask_args = function(args) {
  this.ctx = null;
  this.taskName = null;
  this.taskPayload = null;
  this.taskComment = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.taskName !== undefined && args.taskName !== null) {
      this.taskName = args.taskName;
    }
    if (args.taskPayload !== undefined && args.taskPayload !== null) {
      this.taskPayload = args.taskPayload;
    }
    if (args.taskComment !== undefined && args.taskComment !== null) {
      this.taskComment = args.taskComment;
    }
  }
};
PublicTaskBrokerService_sendTask_args.prototype = {};
PublicTaskBrokerService_sendTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.taskName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.taskPayload = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.taskComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicTaskBrokerService_sendTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicTaskBrokerService_sendTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.taskName !== null && this.taskName !== undefined) {
    output.writeFieldBegin('taskName', Thrift.Type.STRING, 2);
    output.writeString(this.taskName);
    output.writeFieldEnd();
  }
  if (this.taskPayload !== null && this.taskPayload !== undefined) {
    output.writeFieldBegin('taskPayload', Thrift.Type.STRING, 3);
    output.writeString(this.taskPayload);
    output.writeFieldEnd();
  }
  if (this.taskComment !== null && this.taskComment !== undefined) {
    output.writeFieldBegin('taskComment', Thrift.Type.STRING, 4);
    output.writeString(this.taskComment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicTaskBrokerService_sendTask_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicTaskBrokerService_sendTask_result.prototype = {};
PublicTaskBrokerService_sendTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicTaskBrokerService_sendTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicTaskBrokerService_sendTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicTaskBrokerServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(PublicTaskBrokerServiceClient, BaseServiceClient);
PublicTaskBrokerServiceClient.prototype.seqid = function() { return this._seqid; };
PublicTaskBrokerServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
PublicTaskBrokerServiceClient.prototype.getTask = function(ctx, taskID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getTask(ctx, taskID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getTask(ctx, taskID);
  }
};

PublicTaskBrokerServiceClient.prototype.send_getTask = function(ctx, taskID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicTaskBrokerService_getTask_args();
  args.ctx = ctx;
  args.taskID = taskID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicTaskBrokerServiceClient.prototype.recv_getTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicTaskBrokerService_getTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getTask failed: unknown result');
};
PublicTaskBrokerServiceClient.prototype.cancelTask = function(ctx, taskID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancelTask(ctx, taskID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancelTask(ctx, taskID);
  }
};

PublicTaskBrokerServiceClient.prototype.send_cancelTask = function(ctx, taskID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancelTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicTaskBrokerService_cancelTask_args();
  args.ctx = ctx;
  args.taskID = taskID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicTaskBrokerServiceClient.prototype.recv_cancelTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicTaskBrokerService_cancelTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cancelTask failed: unknown result');
};
PublicTaskBrokerServiceClient.prototype.getAll = function(ctx, filter, paginator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAll(ctx, filter, paginator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAll(ctx, filter, paginator);
  }
};

PublicTaskBrokerServiceClient.prototype.send_getAll = function(ctx, filter, paginator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAll', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicTaskBrokerService_getAll_args();
  args.ctx = ctx;
  args.filter = filter;
  args.paginator = paginator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicTaskBrokerServiceClient.prototype.recv_getAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicTaskBrokerService_getAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAll failed: unknown result');
};
PublicTaskBrokerServiceClient.prototype.sendTask = function(ctx, taskName, taskPayload, taskComment, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_sendTask(ctx, taskName, taskPayload, taskComment);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_sendTask(ctx, taskName, taskPayload, taskComment);
  }
};

PublicTaskBrokerServiceClient.prototype.send_sendTask = function(ctx, taskName, taskPayload, taskComment) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('sendTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicTaskBrokerService_sendTask_args();
  args.ctx = ctx;
  args.taskName = taskName;
  args.taskPayload = taskPayload;
  args.taskComment = taskComment;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicTaskBrokerServiceClient.prototype.recv_sendTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicTaskBrokerService_sendTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('sendTask failed: unknown result');
};
var PublicTaskBrokerServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(PublicTaskBrokerServiceProcessor, BaseServiceProcessor);
PublicTaskBrokerServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PublicTaskBrokerServiceProcessor.prototype.process_getTask = function(seqid, input, output) {
  var args = new PublicTaskBrokerService_getTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getTask.length === 2) {
    Q.fcall(this._handler.getTask, args.ctx, args.taskID)
      .then(function(result) {
        var result_obj = new PublicTaskBrokerService_getTask_result({success: result});
        output.writeMessageBegin("getTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicTaskBrokerService_getTask_result(err);
          output.writeMessageBegin("getTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getTask(args.ctx, args.taskID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicTaskBrokerService_getTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicTaskBrokerServiceProcessor.prototype.process_cancelTask = function(seqid, input, output) {
  var args = new PublicTaskBrokerService_cancelTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancelTask.length === 2) {
    Q.fcall(this._handler.cancelTask, args.ctx, args.taskID)
      .then(function(result) {
        var result_obj = new PublicTaskBrokerService_cancelTask_result({success: result});
        output.writeMessageBegin("cancelTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicTaskBrokerService_cancelTask_result(err);
          output.writeMessageBegin("cancelTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancelTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancelTask(args.ctx, args.taskID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicTaskBrokerService_cancelTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancelTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancelTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicTaskBrokerServiceProcessor.prototype.process_getAll = function(seqid, input, output) {
  var args = new PublicTaskBrokerService_getAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAll.length === 3) {
    Q.fcall(this._handler.getAll, args.ctx, args.filter, args.paginator)
      .then(function(result) {
        var result_obj = new PublicTaskBrokerService_getAll_result({success: result});
        output.writeMessageBegin("getAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicTaskBrokerService_getAll_result(err);
          output.writeMessageBegin("getAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAll(args.ctx, args.filter, args.paginator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicTaskBrokerService_getAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicTaskBrokerServiceProcessor.prototype.process_sendTask = function(seqid, input, output) {
  var args = new PublicTaskBrokerService_sendTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.sendTask.length === 4) {
    Q.fcall(this._handler.sendTask, args.ctx, args.taskName, args.taskPayload, args.taskComment)
      .then(function(result) {
        var result_obj = new PublicTaskBrokerService_sendTask_result({success: result});
        output.writeMessageBegin("sendTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicTaskBrokerService_sendTask_result(err);
          output.writeMessageBegin("sendTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("sendTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.sendTask(args.ctx, args.taskName, args.taskPayload, args.taskComment, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicTaskBrokerService_sendTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("sendTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("sendTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
