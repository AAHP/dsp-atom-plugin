//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./admin-um_types');
//HELPER FUNCTIONS AND STRUCTURES

var AdminUserMgmtService_changePassword_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.login = null;
  this.newPassword = null;
  this.forceChange = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.login !== undefined && args.login !== null) {
      this.login = args.login;
    }
    if (args.newPassword !== undefined && args.newPassword !== null) {
      this.newPassword = args.newPassword;
    }
    if (args.forceChange !== undefined && args.forceChange !== null) {
      this.forceChange = args.forceChange;
    }
  }
};
AdminUserMgmtService_changePassword_args.prototype = {};
AdminUserMgmtService_changePassword_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newPassword = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.forceChange = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_changePassword_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_changePassword_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 3);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.newPassword !== null && this.newPassword !== undefined) {
    output.writeFieldBegin('newPassword', Thrift.Type.STRING, 4);
    output.writeString(this.newPassword);
    output.writeFieldEnd();
  }
  if (this.forceChange !== null && this.forceChange !== undefined) {
    output.writeFieldBegin('forceChange', Thrift.Type.BOOL, 5);
    output.writeBool(this.forceChange);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_changePassword_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_changePassword_result.prototype = {};
AdminUserMgmtService_changePassword_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_changePassword_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_changePassword_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_lockUnlockUser_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.login = null;
  this.lock = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.login !== undefined && args.login !== null) {
      this.login = args.login;
    }
    if (args.lock !== undefined && args.lock !== null) {
      this.lock = args.lock;
    }
  }
};
AdminUserMgmtService_lockUnlockUser_args.prototype = {};
AdminUserMgmtService_lockUnlockUser_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.lock = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_lockUnlockUser_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_lockUnlockUser_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 3);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.lock !== null && this.lock !== undefined) {
    output.writeFieldBegin('lock', Thrift.Type.BOOL, 4);
    output.writeBool(this.lock);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_lockUnlockUser_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_lockUnlockUser_result.prototype = {};
AdminUserMgmtService_lockUnlockUser_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_lockUnlockUser_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_lockUnlockUser_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_setPasswordMustChange_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.login = null;
  this.mustChange = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.login !== undefined && args.login !== null) {
      this.login = args.login;
    }
    if (args.mustChange !== undefined && args.mustChange !== null) {
      this.mustChange = args.mustChange;
    }
  }
};
AdminUserMgmtService_setPasswordMustChange_args.prototype = {};
AdminUserMgmtService_setPasswordMustChange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.login = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.mustChange = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_setPasswordMustChange_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_setPasswordMustChange_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.login !== null && this.login !== undefined) {
    output.writeFieldBegin('login', Thrift.Type.STRING, 3);
    output.writeString(this.login);
    output.writeFieldEnd();
  }
  if (this.mustChange !== null && this.mustChange !== undefined) {
    output.writeFieldBegin('mustChange', Thrift.Type.BOOL, 4);
    output.writeBool(this.mustChange);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_setPasswordMustChange_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_setPasswordMustChange_result.prototype = {};
AdminUserMgmtService_setPasswordMustChange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_setPasswordMustChange_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_setPasswordMustChange_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_importGroups_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.groups = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [ttypes.Group]);
    }
  }
};
AdminUserMgmtService_importGroups_args.prototype = {};
AdminUserMgmtService_importGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.groups = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = new ttypes.Group();
          elem82.read(input);
          this.groups.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_importGroups_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_importGroups_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter83 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter83))
      {
        iter83 = this.groups[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_importGroups_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.InvalidGroup]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_importGroups_result.prototype = {};
AdminUserMgmtService_importGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.success = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new ttypes.InvalidGroup();
          elem90.read(input);
          this.success.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_importGroups_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_importGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter91 in this.success)
    {
      if (this.success.hasOwnProperty(iter91))
      {
        iter91 = this.success[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_exportGroups_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.format = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.format !== undefined && args.format !== null) {
      this.format = args.format;
    }
  }
};
AdminUserMgmtService_exportGroups_args.prototype = {};
AdminUserMgmtService_exportGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.format = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_exportGroups_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_exportGroups_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRING, 3);
    output.writeString(this.format);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_exportGroups_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExportGroups(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_exportGroups_result.prototype = {};
AdminUserMgmtService_exportGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExportGroups();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_exportGroups_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_exportGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_deleteGroups_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.groups = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [ttypes.Group]);
    }
  }
};
AdminUserMgmtService_deleteGroups_args.prototype = {};
AdminUserMgmtService_deleteGroups_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.groups = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          elem98 = new ttypes.Group();
          elem98.read(input);
          this.groups.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_deleteGroups_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_deleteGroups_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter99 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter99))
      {
        iter99 = this.groups[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_deleteGroups_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.InvalidGroup]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_deleteGroups_result.prototype = {};
AdminUserMgmtService_deleteGroups_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size100 = 0;
        var _rtmp3104;
        this.success = [];
        var _etype103 = 0;
        _rtmp3104 = input.readListBegin();
        _etype103 = _rtmp3104.etype;
        _size100 = _rtmp3104.size;
        for (var _i105 = 0; _i105 < _size100; ++_i105)
        {
          var elem106 = null;
          elem106 = new ttypes.InvalidGroup();
          elem106.read(input);
          this.success.push(elem106);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_deleteGroups_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_deleteGroups_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter107 in this.success)
    {
      if (this.success.hasOwnProperty(iter107))
      {
        iter107 = this.success[iter107];
        iter107.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_importUsers_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.users = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [ttypes.User]);
    }
  }
};
AdminUserMgmtService_importUsers_args.prototype = {};
AdminUserMgmtService_importUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.users = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = new ttypes.User();
          elem114.read(input);
          this.users.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_importUsers_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_importUsers_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter115 in this.users)
    {
      if (this.users.hasOwnProperty(iter115))
      {
        iter115 = this.users[iter115];
        iter115.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_importUsers_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.InvalidUser]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_importUsers_result.prototype = {};
AdminUserMgmtService_importUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size116 = 0;
        var _rtmp3120;
        this.success = [];
        var _etype119 = 0;
        _rtmp3120 = input.readListBegin();
        _etype119 = _rtmp3120.etype;
        _size116 = _rtmp3120.size;
        for (var _i121 = 0; _i121 < _size116; ++_i121)
        {
          var elem122 = null;
          elem122 = new ttypes.InvalidUser();
          elem122.read(input);
          this.success.push(elem122);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_importUsers_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_importUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter123 in this.success)
    {
      if (this.success.hasOwnProperty(iter123))
      {
        iter123 = this.success[iter123];
        iter123.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_exportUsers_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.format = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.format !== undefined && args.format !== null) {
      this.format = args.format;
    }
  }
};
AdminUserMgmtService_exportUsers_args.prototype = {};
AdminUserMgmtService_exportUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.format = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_exportUsers_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_exportUsers_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.format !== null && this.format !== undefined) {
    output.writeFieldBegin('format', Thrift.Type.STRING, 3);
    output.writeString(this.format);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_exportUsers_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ExportUsers(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_exportUsers_result.prototype = {};
AdminUserMgmtService_exportUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ExportUsers();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_exportUsers_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_exportUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_deleteUsers_args = function(args) {
  this.ctx = null;
  this.connectorID = null;
  this.users = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.connectorID !== undefined && args.connectorID !== null) {
      this.connectorID = args.connectorID;
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [ttypes.User]);
    }
  }
};
AdminUserMgmtService_deleteUsers_args.prototype = {};
AdminUserMgmtService_deleteUsers_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.connectorID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.users = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new ttypes.User();
          elem130.read(input);
          this.users.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_deleteUsers_args.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_deleteUsers_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.connectorID !== null && this.connectorID !== undefined) {
    output.writeFieldBegin('connectorID', Thrift.Type.STRING, 2);
    output.writeString(this.connectorID);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter131 in this.users)
    {
      if (this.users.hasOwnProperty(iter131))
      {
        iter131 = this.users[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtService_deleteUsers_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.InvalidUser]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminUserMgmtService_deleteUsers_result.prototype = {};
AdminUserMgmtService_deleteUsers_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.success = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.InvalidUser();
          elem138.read(input);
          this.success.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserMgmtService_deleteUsers_result.prototype.write = function(output) {
  output.writeStructBegin('AdminUserMgmtService_deleteUsers_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter139 in this.success)
    {
      if (this.success.hasOwnProperty(iter139))
      {
        iter139 = this.success[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserMgmtServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(AdminUserMgmtServiceClient, BaseServiceClient);
AdminUserMgmtServiceClient.prototype.seqid = function() { return this._seqid; };
AdminUserMgmtServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
AdminUserMgmtServiceClient.prototype.changePassword = function(ctx, connectorID, login, newPassword, forceChange, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_changePassword(ctx, connectorID, login, newPassword, forceChange);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_changePassword(ctx, connectorID, login, newPassword, forceChange);
  }
};

AdminUserMgmtServiceClient.prototype.send_changePassword = function(ctx, connectorID, login, newPassword, forceChange) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changePassword', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_changePassword_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.login = login;
  args.newPassword = newPassword;
  args.forceChange = forceChange;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_changePassword = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_changePassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
AdminUserMgmtServiceClient.prototype.lockUnlockUser = function(ctx, connectorID, login, lock, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_lockUnlockUser(ctx, connectorID, login, lock);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_lockUnlockUser(ctx, connectorID, login, lock);
  }
};

AdminUserMgmtServiceClient.prototype.send_lockUnlockUser = function(ctx, connectorID, login, lock) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('lockUnlockUser', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_lockUnlockUser_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.login = login;
  args.lock = lock;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_lockUnlockUser = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_lockUnlockUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
AdminUserMgmtServiceClient.prototype.setPasswordMustChange = function(ctx, connectorID, login, mustChange, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_setPasswordMustChange(ctx, connectorID, login, mustChange);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_setPasswordMustChange(ctx, connectorID, login, mustChange);
  }
};

AdminUserMgmtServiceClient.prototype.send_setPasswordMustChange = function(ctx, connectorID, login, mustChange) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('setPasswordMustChange', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_setPasswordMustChange_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.login = login;
  args.mustChange = mustChange;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_setPasswordMustChange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_setPasswordMustChange_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
AdminUserMgmtServiceClient.prototype.importGroups = function(ctx, connectorID, groups, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_importGroups(ctx, connectorID, groups);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_importGroups(ctx, connectorID, groups);
  }
};

AdminUserMgmtServiceClient.prototype.send_importGroups = function(ctx, connectorID, groups) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_importGroups_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.groups = groups;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_importGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_importGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('importGroups failed: unknown result');
};
AdminUserMgmtServiceClient.prototype.exportGroups = function(ctx, connectorID, format, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exportGroups(ctx, connectorID, format);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exportGroups(ctx, connectorID, format);
  }
};

AdminUserMgmtServiceClient.prototype.send_exportGroups = function(ctx, connectorID, format) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exportGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_exportGroups_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.format = format;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_exportGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_exportGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exportGroups failed: unknown result');
};
AdminUserMgmtServiceClient.prototype.deleteGroups = function(ctx, connectorID, groups, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteGroups(ctx, connectorID, groups);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteGroups(ctx, connectorID, groups);
  }
};

AdminUserMgmtServiceClient.prototype.send_deleteGroups = function(ctx, connectorID, groups) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteGroups', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_deleteGroups_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.groups = groups;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_deleteGroups = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_deleteGroups_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteGroups failed: unknown result');
};
AdminUserMgmtServiceClient.prototype.importUsers = function(ctx, connectorID, users, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_importUsers(ctx, connectorID, users);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_importUsers(ctx, connectorID, users);
  }
};

AdminUserMgmtServiceClient.prototype.send_importUsers = function(ctx, connectorID, users) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importUsers', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_importUsers_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.users = users;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_importUsers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_importUsers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('importUsers failed: unknown result');
};
AdminUserMgmtServiceClient.prototype.exportUsers = function(ctx, connectorID, format, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exportUsers(ctx, connectorID, format);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exportUsers(ctx, connectorID, format);
  }
};

AdminUserMgmtServiceClient.prototype.send_exportUsers = function(ctx, connectorID, format) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exportUsers', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_exportUsers_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.format = format;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_exportUsers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_exportUsers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exportUsers failed: unknown result');
};
AdminUserMgmtServiceClient.prototype.deleteUsers = function(ctx, connectorID, users, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteUsers(ctx, connectorID, users);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteUsers(ctx, connectorID, users);
  }
};

AdminUserMgmtServiceClient.prototype.send_deleteUsers = function(ctx, connectorID, users) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteUsers', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserMgmtService_deleteUsers_args();
  args.ctx = ctx;
  args.connectorID = connectorID;
  args.users = users;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserMgmtServiceClient.prototype.recv_deleteUsers = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserMgmtService_deleteUsers_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteUsers failed: unknown result');
};
var AdminUserMgmtServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(AdminUserMgmtServiceProcessor, BaseServiceProcessor);
AdminUserMgmtServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
AdminUserMgmtServiceProcessor.prototype.process_changePassword = function(seqid, input, output) {
  var args = new AdminUserMgmtService_changePassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.changePassword.length === 5) {
    Q.fcall(this._handler.changePassword, args.ctx, args.connectorID, args.login, args.newPassword, args.forceChange)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_changePassword_result({success: result});
        output.writeMessageBegin("changePassword", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_changePassword_result(err);
          output.writeMessageBegin("changePassword", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("changePassword", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.changePassword(args.ctx, args.connectorID, args.login, args.newPassword, args.forceChange, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_changePassword_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("changePassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("changePassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserMgmtServiceProcessor.prototype.process_lockUnlockUser = function(seqid, input, output) {
  var args = new AdminUserMgmtService_lockUnlockUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.lockUnlockUser.length === 4) {
    Q.fcall(this._handler.lockUnlockUser, args.ctx, args.connectorID, args.login, args.lock)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_lockUnlockUser_result({success: result});
        output.writeMessageBegin("lockUnlockUser", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_lockUnlockUser_result(err);
          output.writeMessageBegin("lockUnlockUser", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lockUnlockUser", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.lockUnlockUser(args.ctx, args.connectorID, args.login, args.lock, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_lockUnlockUser_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("lockUnlockUser", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("lockUnlockUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserMgmtServiceProcessor.prototype.process_setPasswordMustChange = function(seqid, input, output) {
  var args = new AdminUserMgmtService_setPasswordMustChange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.setPasswordMustChange.length === 4) {
    Q.fcall(this._handler.setPasswordMustChange, args.ctx, args.connectorID, args.login, args.mustChange)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_setPasswordMustChange_result({success: result});
        output.writeMessageBegin("setPasswordMustChange", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_setPasswordMustChange_result(err);
          output.writeMessageBegin("setPasswordMustChange", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("setPasswordMustChange", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.setPasswordMustChange(args.ctx, args.connectorID, args.login, args.mustChange, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_setPasswordMustChange_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("setPasswordMustChange", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("setPasswordMustChange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserMgmtServiceProcessor.prototype.process_importGroups = function(seqid, input, output) {
  var args = new AdminUserMgmtService_importGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.importGroups.length === 3) {
    Q.fcall(this._handler.importGroups, args.ctx, args.connectorID, args.groups)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_importGroups_result({success: result});
        output.writeMessageBegin("importGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_importGroups_result(err);
          output.writeMessageBegin("importGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("importGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.importGroups(args.ctx, args.connectorID, args.groups, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_importGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("importGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("importGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserMgmtServiceProcessor.prototype.process_exportGroups = function(seqid, input, output) {
  var args = new AdminUserMgmtService_exportGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exportGroups.length === 3) {
    Q.fcall(this._handler.exportGroups, args.ctx, args.connectorID, args.format)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_exportGroups_result({success: result});
        output.writeMessageBegin("exportGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_exportGroups_result(err);
          output.writeMessageBegin("exportGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exportGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exportGroups(args.ctx, args.connectorID, args.format, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_exportGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("exportGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exportGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserMgmtServiceProcessor.prototype.process_deleteGroups = function(seqid, input, output) {
  var args = new AdminUserMgmtService_deleteGroups_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteGroups.length === 3) {
    Q.fcall(this._handler.deleteGroups, args.ctx, args.connectorID, args.groups)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_deleteGroups_result({success: result});
        output.writeMessageBegin("deleteGroups", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_deleteGroups_result(err);
          output.writeMessageBegin("deleteGroups", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteGroups", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteGroups(args.ctx, args.connectorID, args.groups, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_deleteGroups_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteGroups", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteGroups", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserMgmtServiceProcessor.prototype.process_importUsers = function(seqid, input, output) {
  var args = new AdminUserMgmtService_importUsers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.importUsers.length === 3) {
    Q.fcall(this._handler.importUsers, args.ctx, args.connectorID, args.users)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_importUsers_result({success: result});
        output.writeMessageBegin("importUsers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_importUsers_result(err);
          output.writeMessageBegin("importUsers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("importUsers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.importUsers(args.ctx, args.connectorID, args.users, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_importUsers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("importUsers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("importUsers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserMgmtServiceProcessor.prototype.process_exportUsers = function(seqid, input, output) {
  var args = new AdminUserMgmtService_exportUsers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exportUsers.length === 3) {
    Q.fcall(this._handler.exportUsers, args.ctx, args.connectorID, args.format)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_exportUsers_result({success: result});
        output.writeMessageBegin("exportUsers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_exportUsers_result(err);
          output.writeMessageBegin("exportUsers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exportUsers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exportUsers(args.ctx, args.connectorID, args.format, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_exportUsers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("exportUsers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exportUsers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserMgmtServiceProcessor.prototype.process_deleteUsers = function(seqid, input, output) {
  var args = new AdminUserMgmtService_deleteUsers_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteUsers.length === 3) {
    Q.fcall(this._handler.deleteUsers, args.ctx, args.connectorID, args.users)
      .then(function(result) {
        var result_obj = new AdminUserMgmtService_deleteUsers_result({success: result});
        output.writeMessageBegin("deleteUsers", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminUserMgmtService_deleteUsers_result(err);
          output.writeMessageBegin("deleteUsers", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteUsers", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteUsers(args.ctx, args.connectorID, args.users, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminUserMgmtService_deleteUsers_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteUsers", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteUsers", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
