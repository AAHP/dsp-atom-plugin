//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./dsn_types');
//HELPER FUNCTIONS AND STRUCTURES

var PublicDSNManager_createDSN_args = function(args) {
  this.ctx = null;
  this.entry = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.entry !== undefined && args.entry !== null) {
      this.entry = new ttypes.Entry(args.entry);
    }
  }
};
PublicDSNManager_createDSN_args.prototype = {};
PublicDSNManager_createDSN_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.entry = new ttypes.Entry();
        this.entry.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_createDSN_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_createDSN_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.entry !== null && this.entry !== undefined) {
    output.writeFieldBegin('entry', Thrift.Type.STRUCT, 2);
    this.entry.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_createDSN_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDSNManager_createDSN_result.prototype = {};
PublicDSNManager_createDSN_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_createDSN_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_createDSN_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_updateDSN_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.name = null;
  this.dsnString = null;
  this.updatePassword = null;
  this.extra = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.dsnString !== undefined && args.dsnString !== null) {
      this.dsnString = args.dsnString;
    }
    if (args.updatePassword !== undefined && args.updatePassword !== null) {
      this.updatePassword = args.updatePassword;
    }
    if (args.extra !== undefined && args.extra !== null) {
      this.extra = Thrift.copyMap(args.extra, [null]);
    }
  }
};
PublicDSNManager_updateDSN_args.prototype = {};
PublicDSNManager_updateDSN_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.dsnString = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.updatePassword = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size20 = 0;
        var _rtmp324;
        this.extra = {};
        var _ktype21 = 0;
        var _vtype22 = 0;
        _rtmp324 = input.readMapBegin();
        _ktype21 = _rtmp324.ktype;
        _vtype22 = _rtmp324.vtype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var key26 = null;
          var val27 = null;
          key26 = input.readString();
          val27 = input.readString();
          this.extra[key26] = val27;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_updateDSN_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_updateDSN_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.dsnString !== null && this.dsnString !== undefined) {
    output.writeFieldBegin('dsnString', Thrift.Type.STRING, 4);
    output.writeString(this.dsnString);
    output.writeFieldEnd();
  }
  if (this.updatePassword !== null && this.updatePassword !== undefined) {
    output.writeFieldBegin('updatePassword', Thrift.Type.BOOL, 5);
    output.writeBool(this.updatePassword);
    output.writeFieldEnd();
  }
  if (this.extra !== null && this.extra !== undefined) {
    output.writeFieldBegin('extra', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extra));
    for (var kiter28 in this.extra)
    {
      if (this.extra.hasOwnProperty(kiter28))
      {
        var viter29 = this.extra[kiter28];
        output.writeString(kiter28);
        output.writeString(viter29);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_updateDSN_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDSNManager_updateDSN_result.prototype = {};
PublicDSNManager_updateDSN_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_updateDSN_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_updateDSN_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_deleteDSN_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDSNManager_deleteDSN_args.prototype = {};
PublicDSNManager_deleteDSN_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_deleteDSN_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_deleteDSN_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_deleteDSN_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDSNManager_deleteDSN_result.prototype = {};
PublicDSNManager_deleteDSN_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_deleteDSN_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_deleteDSN_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_getDSN_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDSNManager_getDSN_args.prototype = {};
PublicDSNManager_getDSN_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_getDSN_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_getDSN_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_getDSN_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ListEntry(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDSNManager_getDSN_result.prototype = {};
PublicDSNManager_getDSN_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ListEntry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_getDSN_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_getDSN_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_getAllEntries_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
  }
};
PublicDSNManager_getAllEntries_args.prototype = {};
PublicDSNManager_getAllEntries_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_getAllEntries_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_getAllEntries_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManager_getAllEntries_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ListEntry]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDSNManager_getAllEntries_result.prototype = {};
PublicDSNManager_getAllEntries_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size30 = 0;
        var _rtmp334;
        this.success = [];
        var _etype33 = 0;
        _rtmp334 = input.readListBegin();
        _etype33 = _rtmp334.etype;
        _size30 = _rtmp334.size;
        for (var _i35 = 0; _i35 < _size30; ++_i35)
        {
          var elem36 = null;
          elem36 = new ttypes.ListEntry();
          elem36.read(input);
          this.success.push(elem36);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDSNManager_getAllEntries_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDSNManager_getAllEntries_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter37 in this.success)
    {
      if (this.success.hasOwnProperty(iter37))
      {
        iter37 = this.success[iter37];
        iter37.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDSNManagerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(PublicDSNManagerClient, BaseServiceClient);
PublicDSNManagerClient.prototype.seqid = function() { return this._seqid; };
PublicDSNManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };
PublicDSNManagerClient.prototype.createDSN = function(ctx, entry, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createDSN(ctx, entry);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createDSN(ctx, entry);
  }
};

PublicDSNManagerClient.prototype.send_createDSN = function(ctx, entry) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createDSN', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDSNManager_createDSN_args();
  args.ctx = ctx;
  args.entry = entry;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDSNManagerClient.prototype.recv_createDSN = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDSNManager_createDSN_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createDSN failed: unknown result');
};
PublicDSNManagerClient.prototype.updateDSN = function(ctx, ID, name, dsnString, updatePassword, extra, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateDSN(ctx, ID, name, dsnString, updatePassword, extra);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateDSN(ctx, ID, name, dsnString, updatePassword, extra);
  }
};

PublicDSNManagerClient.prototype.send_updateDSN = function(ctx, ID, name, dsnString, updatePassword, extra) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateDSN', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDSNManager_updateDSN_args();
  args.ctx = ctx;
  args.ID = ID;
  args.name = name;
  args.dsnString = dsnString;
  args.updatePassword = updatePassword;
  args.extra = extra;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDSNManagerClient.prototype.recv_updateDSN = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDSNManager_updateDSN_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDSNManagerClient.prototype.deleteDSN = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteDSN(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteDSN(ctx, ID);
  }
};

PublicDSNManagerClient.prototype.send_deleteDSN = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteDSN', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDSNManager_deleteDSN_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDSNManagerClient.prototype.recv_deleteDSN = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDSNManager_deleteDSN_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDSNManagerClient.prototype.getDSN = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getDSN(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getDSN(ctx, ID);
  }
};

PublicDSNManagerClient.prototype.send_getDSN = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getDSN', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDSNManager_getDSN_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDSNManagerClient.prototype.recv_getDSN = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDSNManager_getDSN_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getDSN failed: unknown result');
};
PublicDSNManagerClient.prototype.getAllEntries = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllEntries(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllEntries(ctx);
  }
};

PublicDSNManagerClient.prototype.send_getAllEntries = function(ctx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllEntries', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDSNManager_getAllEntries_args();
  args.ctx = ctx;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDSNManagerClient.prototype.recv_getAllEntries = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDSNManager_getAllEntries_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllEntries failed: unknown result');
};
var PublicDSNManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(PublicDSNManagerProcessor, BaseServiceProcessor);
PublicDSNManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PublicDSNManagerProcessor.prototype.process_createDSN = function(seqid, input, output) {
  var args = new PublicDSNManager_createDSN_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createDSN.length === 2) {
    Q.fcall(this._handler.createDSN, args.ctx, args.entry)
      .then(function(result) {
        var result_obj = new PublicDSNManager_createDSN_result({success: result});
        output.writeMessageBegin("createDSN", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDSNManager_createDSN_result(err);
          output.writeMessageBegin("createDSN", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createDSN", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createDSN(args.ctx, args.entry, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDSNManager_createDSN_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createDSN", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createDSN", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDSNManagerProcessor.prototype.process_updateDSN = function(seqid, input, output) {
  var args = new PublicDSNManager_updateDSN_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateDSN.length === 6) {
    Q.fcall(this._handler.updateDSN, args.ctx, args.ID, args.name, args.dsnString, args.updatePassword, args.extra)
      .then(function(result) {
        var result_obj = new PublicDSNManager_updateDSN_result({success: result});
        output.writeMessageBegin("updateDSN", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDSNManager_updateDSN_result(err);
          output.writeMessageBegin("updateDSN", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateDSN", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateDSN(args.ctx, args.ID, args.name, args.dsnString, args.updatePassword, args.extra, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDSNManager_updateDSN_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateDSN", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateDSN", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDSNManagerProcessor.prototype.process_deleteDSN = function(seqid, input, output) {
  var args = new PublicDSNManager_deleteDSN_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteDSN.length === 2) {
    Q.fcall(this._handler.deleteDSN, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDSNManager_deleteDSN_result({success: result});
        output.writeMessageBegin("deleteDSN", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDSNManager_deleteDSN_result(err);
          output.writeMessageBegin("deleteDSN", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteDSN", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteDSN(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDSNManager_deleteDSN_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteDSN", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteDSN", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDSNManagerProcessor.prototype.process_getDSN = function(seqid, input, output) {
  var args = new PublicDSNManager_getDSN_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getDSN.length === 2) {
    Q.fcall(this._handler.getDSN, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDSNManager_getDSN_result({success: result});
        output.writeMessageBegin("getDSN", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDSNManager_getDSN_result(err);
          output.writeMessageBegin("getDSN", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getDSN", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getDSN(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDSNManager_getDSN_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getDSN", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getDSN", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDSNManagerProcessor.prototype.process_getAllEntries = function(seqid, input, output) {
  var args = new PublicDSNManager_getAllEntries_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllEntries.length === 1) {
    Q.fcall(this._handler.getAllEntries, args.ctx)
      .then(function(result) {
        var result_obj = new PublicDSNManager_getAllEntries_result({success: result});
        output.writeMessageBegin("getAllEntries", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDSNManager_getAllEntries_result(err);
          output.writeMessageBegin("getAllEntries", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllEntries", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllEntries(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDSNManager_getAllEntries_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllEntries", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllEntries", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
