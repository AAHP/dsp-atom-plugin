//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var PublishTaskPayload = module.exports.PublishTaskPayload = function(args) {
  this.fileID = null;
  this.dataSourceID = null;
  this.password = null;
  if (args) {
    if (args.fileID !== undefined && args.fileID !== null) {
      this.fileID = args.fileID;
    }
    if (args.dataSourceID !== undefined && args.dataSourceID !== null) {
      this.dataSourceID = args.dataSourceID;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
PublishTaskPayload.prototype = {};
PublishTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.fileID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dataSourceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublishTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('PublishTaskPayload');
  if (this.fileID !== null && this.fileID !== undefined) {
    output.writeFieldBegin('fileID', Thrift.Type.STRING, 1);
    output.writeString(this.fileID);
    output.writeFieldEnd();
  }
  if (this.dataSourceID !== null && this.dataSourceID !== undefined) {
    output.writeFieldBegin('dataSourceID', Thrift.Type.STRING, 2);
    output.writeString(this.dataSourceID);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExtractTaskPayload = module.exports.ExtractTaskPayload = function(args) {
  this.dataSourceID = null;
  this.password = null;
  this.srcPath = null;
  this.destinationFolderID = null;
  if (args) {
    if (args.dataSourceID !== undefined && args.dataSourceID !== null) {
      this.dataSourceID = args.dataSourceID;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.srcPath !== undefined && args.srcPath !== null) {
      this.srcPath = args.srcPath;
    }
    if (args.destinationFolderID !== undefined && args.destinationFolderID !== null) {
      this.destinationFolderID = args.destinationFolderID;
    }
  }
};
ExtractTaskPayload.prototype = {};
ExtractTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.dataSourceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.srcPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.destinationFolderID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExtractTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('ExtractTaskPayload');
  if (this.dataSourceID !== null && this.dataSourceID !== undefined) {
    output.writeFieldBegin('dataSourceID', Thrift.Type.STRING, 1);
    output.writeString(this.dataSourceID);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.srcPath !== null && this.srcPath !== undefined) {
    output.writeFieldBegin('srcPath', Thrift.Type.STRING, 3);
    output.writeString(this.srcPath);
    output.writeFieldEnd();
  }
  if (this.destinationFolderID !== null && this.destinationFolderID !== undefined) {
    output.writeFieldBegin('destinationFolderID', Thrift.Type.STRING, 4);
    output.writeString(this.destinationFolderID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileInfo = module.exports.FileInfo = function(args) {
  this.name = null;
  this.size = null;
  this.modTime = null;
  this.isDir = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.modTime !== undefined && args.modTime !== null) {
      this.modTime = args.modTime;
    }
    if (args.isDir !== undefined && args.isDir !== null) {
      this.isDir = args.isDir;
    }
  }
};
FileInfo.prototype = {};
FileInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.modTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isDir = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileInfo.prototype.write = function(output) {
  output.writeStructBegin('FileInfo');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 2);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.modTime !== null && this.modTime !== undefined) {
    output.writeFieldBegin('modTime', Thrift.Type.STRING, 3);
    output.writeString(this.modTime);
    output.writeFieldEnd();
  }
  if (this.isDir !== null && this.isDir !== undefined) {
    output.writeFieldBegin('isDir', Thrift.Type.BOOL, 4);
    output.writeBool(this.isDir);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FolderContent = module.exports.FolderContent = function(args) {
  this.parent = null;
  this.content = null;
  this.pagination = null;
  if (args) {
    if (args.parent !== undefined && args.parent !== null) {
      this.parent = new ttypes.FileInfo(args.parent);
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = Thrift.copyList(args.content, [ttypes.FileInfo]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
FolderContent.prototype = {};
FolderContent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parent = new ttypes.FileInfo();
        this.parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.content = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.FileInfo();
          elem6.read(input);
          this.content.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FolderContent.prototype.write = function(output) {
  output.writeStructBegin('FolderContent');
  if (this.parent !== null && this.parent !== undefined) {
    output.writeFieldBegin('parent', Thrift.Type.STRUCT, 1);
    this.parent.write(output);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.content.length);
    for (var iter7 in this.content)
    {
      if (this.content.hasOwnProperty(iter7))
      {
        iter7 = this.content[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'dmp-connector-sftp';
ttypes.VERSION = '0.4.0';
ttypes.TASK_PUBLISH = 'task-sftp-publish';
ttypes.TASK_EXTRACT = 'task-sftp-extract';
ttypes.ERR_CODE = 54;
