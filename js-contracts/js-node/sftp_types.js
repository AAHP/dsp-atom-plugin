//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var MoveFileInfo = module.exports.MoveFileInfo = function(args) {
  this.sourceFileID = null;
  this.targetFileID = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.sourceFileID !== undefined && args.sourceFileID !== null) {
      this.sourceFileID = args.sourceFileID;
    }
    if (args.targetFileID !== undefined && args.targetFileID !== null) {
      this.targetFileID = args.targetFileID;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
MoveFileInfo.prototype = {};
MoveFileInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceFileID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.targetFileID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoveFileInfo.prototype.write = function(output) {
  output.writeStructBegin('MoveFileInfo');
  if (this.sourceFileID !== null && this.sourceFileID !== undefined) {
    output.writeFieldBegin('sourceFileID', Thrift.Type.STRING, 1);
    output.writeString(this.sourceFileID);
    output.writeFieldEnd();
  }
  if (this.targetFileID !== null && this.targetFileID !== undefined) {
    output.writeFieldBegin('targetFileID', Thrift.Type.STRING, 2);
    output.writeString(this.targetFileID);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 3);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '0.2.0';
ttypes.ERR_CODE = 34;
ttypes.SERVICE_NAME = 'dmp-sftp-upload';
ttypes.AMQP_ROUTING_KEY = 'dmp.events.sftp-upload';
