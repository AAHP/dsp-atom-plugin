//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./ac_types');
//HELPER FUNCTIONS AND STRUCTURES

var AccessControlService_isAllowed_args = function(args) {
  this.ctx = null;
  this.req = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new ttypes.Request(args.req);
    }
  }
};
AccessControlService_isAllowed_args.prototype = {};
AccessControlService_isAllowed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new ttypes.Request();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_isAllowed_args.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_isAllowed_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_isAllowed_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AccessControlService_isAllowed_result.prototype = {};
AccessControlService_isAllowed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_isAllowed_result.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_isAllowed_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_isAnyAllowed_args = function(args) {
  this.ctx = null;
  this.reqs = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.reqs !== undefined && args.reqs !== null) {
      this.reqs = Thrift.copyList(args.reqs, [ttypes.Request]);
    }
  }
};
AccessControlService_isAnyAllowed_args.prototype = {};
AccessControlService_isAnyAllowed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.reqs = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new ttypes.Request();
          elem16.read(input);
          this.reqs.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_isAnyAllowed_args.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_isAnyAllowed_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.reqs !== null && this.reqs !== undefined) {
    output.writeFieldBegin('reqs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.reqs.length);
    for (var iter17 in this.reqs)
    {
      if (this.reqs.hasOwnProperty(iter17))
      {
        iter17 = this.reqs[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_isAnyAllowed_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AccessControlService_isAnyAllowed_result.prototype = {};
AccessControlService_isAnyAllowed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_isAnyAllowed_result.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_isAnyAllowed_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_areAllAllowed_args = function(args) {
  this.ctx = null;
  this.reqs = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.reqs !== undefined && args.reqs !== null) {
      this.reqs = Thrift.copyList(args.reqs, [ttypes.Request]);
    }
  }
};
AccessControlService_areAllAllowed_args.prototype = {};
AccessControlService_areAllAllowed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.reqs = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new ttypes.Request();
          elem24.read(input);
          this.reqs.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_areAllAllowed_args.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_areAllAllowed_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.reqs !== null && this.reqs !== undefined) {
    output.writeFieldBegin('reqs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.reqs.length);
    for (var iter25 in this.reqs)
    {
      if (this.reqs.hasOwnProperty(iter25))
      {
        iter25 = this.reqs[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_areAllAllowed_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AccessControlService_areAllAllowed_result.prototype = {};
AccessControlService_areAllAllowed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_areAllAllowed_result.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_areAllAllowed_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_allowedResources_args = function(args) {
  this.ctx = null;
  this.subject = null;
  this.actionsANDFilter = null;
  this.actionsORFilter = null;
  this.resourcePrefix = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.subject !== undefined && args.subject !== null) {
      this.subject = args.subject;
    }
    if (args.actionsANDFilter !== undefined && args.actionsANDFilter !== null) {
      this.actionsANDFilter = Thrift.copyList(args.actionsANDFilter, [null]);
    }
    if (args.actionsORFilter !== undefined && args.actionsORFilter !== null) {
      this.actionsORFilter = Thrift.copyList(args.actionsORFilter, [null]);
    }
    if (args.resourcePrefix !== undefined && args.resourcePrefix !== null) {
      this.resourcePrefix = args.resourcePrefix;
    }
  }
};
AccessControlService_allowedResources_args.prototype = {};
AccessControlService_allowedResources_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.actionsANDFilter = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.actionsANDFilter.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size33 = 0;
        var _rtmp337;
        this.actionsORFilter = [];
        var _etype36 = 0;
        _rtmp337 = input.readListBegin();
        _etype36 = _rtmp337.etype;
        _size33 = _rtmp337.size;
        for (var _i38 = 0; _i38 < _size33; ++_i38)
        {
          var elem39 = null;
          elem39 = input.readString();
          this.actionsORFilter.push(elem39);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.resourcePrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_allowedResources_args.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_allowedResources_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 2);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.actionsANDFilter !== null && this.actionsANDFilter !== undefined) {
    output.writeFieldBegin('actionsANDFilter', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.actionsANDFilter.length);
    for (var iter40 in this.actionsANDFilter)
    {
      if (this.actionsANDFilter.hasOwnProperty(iter40))
      {
        iter40 = this.actionsANDFilter[iter40];
        output.writeString(iter40);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actionsORFilter !== null && this.actionsORFilter !== undefined) {
    output.writeFieldBegin('actionsORFilter', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.actionsORFilter.length);
    for (var iter41 in this.actionsORFilter)
    {
      if (this.actionsORFilter.hasOwnProperty(iter41))
      {
        iter41 = this.actionsORFilter[iter41];
        output.writeString(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resourcePrefix !== null && this.resourcePrefix !== undefined) {
    output.writeFieldBegin('resourcePrefix', Thrift.Type.STRING, 5);
    output.writeString(this.resourcePrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_allowedResources_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AccessControlService_allowedResources_result.prototype = {};
AccessControlService_allowedResources_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.success = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.success.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_allowedResources_result.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_allowedResources_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter49 in this.success)
    {
      if (this.success.hasOwnProperty(iter49))
      {
        iter49 = this.success[iter49];
        output.writeString(iter49);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_allowedResourcesForAll_args = function(args) {
  this.ctx = null;
  this.subjects = null;
  this.actionsANDFilter = null;
  this.actionsORFilter = null;
  this.resourcePrefix = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.subjects !== undefined && args.subjects !== null) {
      this.subjects = Thrift.copyList(args.subjects, [null]);
    }
    if (args.actionsANDFilter !== undefined && args.actionsANDFilter !== null) {
      this.actionsANDFilter = Thrift.copyList(args.actionsANDFilter, [null]);
    }
    if (args.actionsORFilter !== undefined && args.actionsORFilter !== null) {
      this.actionsORFilter = Thrift.copyList(args.actionsORFilter, [null]);
    }
    if (args.resourcePrefix !== undefined && args.resourcePrefix !== null) {
      this.resourcePrefix = args.resourcePrefix;
    }
  }
};
AccessControlService_allowedResourcesForAll_args.prototype = {};
AccessControlService_allowedResourcesForAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.subjects = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readString();
          this.subjects.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size57 = 0;
        var _rtmp361;
        this.actionsANDFilter = [];
        var _etype60 = 0;
        _rtmp361 = input.readListBegin();
        _etype60 = _rtmp361.etype;
        _size57 = _rtmp361.size;
        for (var _i62 = 0; _i62 < _size57; ++_i62)
        {
          var elem63 = null;
          elem63 = input.readString();
          this.actionsANDFilter.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.actionsORFilter = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.actionsORFilter.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.resourcePrefix = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_allowedResourcesForAll_args.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_allowedResourcesForAll_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.subjects !== null && this.subjects !== undefined) {
    output.writeFieldBegin('subjects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.subjects.length);
    for (var iter71 in this.subjects)
    {
      if (this.subjects.hasOwnProperty(iter71))
      {
        iter71 = this.subjects[iter71];
        output.writeString(iter71);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actionsANDFilter !== null && this.actionsANDFilter !== undefined) {
    output.writeFieldBegin('actionsANDFilter', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.actionsANDFilter.length);
    for (var iter72 in this.actionsANDFilter)
    {
      if (this.actionsANDFilter.hasOwnProperty(iter72))
      {
        iter72 = this.actionsANDFilter[iter72];
        output.writeString(iter72);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actionsORFilter !== null && this.actionsORFilter !== undefined) {
    output.writeFieldBegin('actionsORFilter', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.actionsORFilter.length);
    for (var iter73 in this.actionsORFilter)
    {
      if (this.actionsORFilter.hasOwnProperty(iter73))
      {
        iter73 = this.actionsORFilter[iter73];
        output.writeString(iter73);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resourcePrefix !== null && this.resourcePrefix !== undefined) {
    output.writeFieldBegin('resourcePrefix', Thrift.Type.STRING, 5);
    output.writeString(this.resourcePrefix);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_allowedResourcesForAll_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AccessControlService_allowedResourcesForAll_result.prototype = {};
AccessControlService_allowedResourcesForAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.success = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = input.readString();
          this.success.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_allowedResourcesForAll_result.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_allowedResourcesForAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter81 in this.success)
    {
      if (this.success.hasOwnProperty(iter81))
      {
        iter81 = this.success[iter81];
        output.writeString(iter81);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_allowedActions_args = function(args) {
  this.ctx = null;
  this.subject = null;
  this.resources = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.subject !== undefined && args.subject !== null) {
      this.subject = args.subject;
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [null]);
    }
  }
};
AccessControlService_allowedActions_args.prototype = {};
AccessControlService_allowedActions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.subject = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.resources = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = input.readString();
          this.resources.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_allowedActions_args.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_allowedActions_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.subject !== null && this.subject !== undefined) {
    output.writeFieldBegin('subject', Thrift.Type.STRING, 2);
    output.writeString(this.subject);
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.resources.length);
    for (var iter89 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter89))
      {
        iter89 = this.resources[iter89];
        output.writeString(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_allowedActions_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AccessControlService_allowedActions_result.prototype = {};
AccessControlService_allowedActions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size90 = 0;
        var _rtmp394;
        this.success = {};
        var _ktype91 = 0;
        var _vtype92 = 0;
        _rtmp394 = input.readMapBegin();
        _ktype91 = _rtmp394.ktype;
        _vtype92 = _rtmp394.vtype;
        _size90 = _rtmp394.size;
        for (var _i95 = 0; _i95 < _size90; ++_i95)
        {
          var key96 = null;
          var val97 = null;
          key96 = input.readString();
          var _size98 = 0;
          var _rtmp3102;
          val97 = [];
          var _etype101 = 0;
          _rtmp3102 = input.readListBegin();
          _etype101 = _rtmp3102.etype;
          _size98 = _rtmp3102.size;
          for (var _i103 = 0; _i103 < _size98; ++_i103)
          {
            var elem104 = null;
            elem104 = input.readString();
            val97.push(elem104);
          }
          input.readListEnd();
          this.success[key96] = val97;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_allowedActions_result.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_allowedActions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter105 in this.success)
    {
      if (this.success.hasOwnProperty(kiter105))
      {
        var viter106 = this.success[kiter105];
        output.writeString(kiter105);
        output.writeListBegin(Thrift.Type.STRING, viter106.length);
        for (var iter107 in viter106)
        {
          if (viter106.hasOwnProperty(iter107))
          {
            iter107 = viter106[iter107];
            output.writeString(iter107);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_allowedActionsForAll_args = function(args) {
  this.ctx = null;
  this.subjects = null;
  this.resources = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.subjects !== undefined && args.subjects !== null) {
      this.subjects = Thrift.copyList(args.subjects, [null]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [null]);
    }
  }
};
AccessControlService_allowedActionsForAll_args.prototype = {};
AccessControlService_allowedActionsForAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.subjects = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          elem114 = input.readString();
          this.subjects.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size115 = 0;
        var _rtmp3119;
        this.resources = [];
        var _etype118 = 0;
        _rtmp3119 = input.readListBegin();
        _etype118 = _rtmp3119.etype;
        _size115 = _rtmp3119.size;
        for (var _i120 = 0; _i120 < _size115; ++_i120)
        {
          var elem121 = null;
          elem121 = input.readString();
          this.resources.push(elem121);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_allowedActionsForAll_args.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_allowedActionsForAll_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.subjects !== null && this.subjects !== undefined) {
    output.writeFieldBegin('subjects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.subjects.length);
    for (var iter122 in this.subjects)
    {
      if (this.subjects.hasOwnProperty(iter122))
      {
        iter122 = this.subjects[iter122];
        output.writeString(iter122);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.resources.length);
    for (var iter123 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter123))
      {
        iter123 = this.resources[iter123];
        output.writeString(iter123);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlService_allowedActionsForAll_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [Thrift.copyList, null]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AccessControlService_allowedActionsForAll_result.prototype = {};
AccessControlService_allowedActionsForAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size124 = 0;
        var _rtmp3128;
        this.success = {};
        var _ktype125 = 0;
        var _vtype126 = 0;
        _rtmp3128 = input.readMapBegin();
        _ktype125 = _rtmp3128.ktype;
        _vtype126 = _rtmp3128.vtype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var key130 = null;
          var val131 = null;
          key130 = input.readString();
          var _size132 = 0;
          var _rtmp3136;
          val131 = [];
          var _etype135 = 0;
          _rtmp3136 = input.readListBegin();
          _etype135 = _rtmp3136.etype;
          _size132 = _rtmp3136.size;
          for (var _i137 = 0; _i137 < _size132; ++_i137)
          {
            var elem138 = null;
            elem138 = input.readString();
            val131.push(elem138);
          }
          input.readListEnd();
          this.success[key130] = val131;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessControlService_allowedActionsForAll_result.prototype.write = function(output) {
  output.writeStructBegin('AccessControlService_allowedActionsForAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.LIST, Thrift.objectLength(this.success));
    for (var kiter139 in this.success)
    {
      if (this.success.hasOwnProperty(kiter139))
      {
        var viter140 = this.success[kiter139];
        output.writeString(kiter139);
        output.writeListBegin(Thrift.Type.STRING, viter140.length);
        for (var iter141 in viter140)
        {
          if (viter140.hasOwnProperty(iter141))
          {
            iter141 = viter140[iter141];
            output.writeString(iter141);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AccessControlServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(AccessControlServiceClient, BaseServiceClient);
AccessControlServiceClient.prototype.seqid = function() { return this._seqid; };
AccessControlServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
AccessControlServiceClient.prototype.isAllowed = function(ctx, req, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isAllowed(ctx, req);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isAllowed(ctx, req);
  }
};

AccessControlServiceClient.prototype.send_isAllowed = function(ctx, req) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isAllowed', Thrift.MessageType.CALL, this.seqid());
  var args = new AccessControlService_isAllowed_args();
  args.ctx = ctx;
  args.req = req;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccessControlServiceClient.prototype.recv_isAllowed = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccessControlService_isAllowed_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
AccessControlServiceClient.prototype.isAnyAllowed = function(ctx, reqs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_isAnyAllowed(ctx, reqs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_isAnyAllowed(ctx, reqs);
  }
};

AccessControlServiceClient.prototype.send_isAnyAllowed = function(ctx, reqs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('isAnyAllowed', Thrift.MessageType.CALL, this.seqid());
  var args = new AccessControlService_isAnyAllowed_args();
  args.ctx = ctx;
  args.reqs = reqs;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccessControlServiceClient.prototype.recv_isAnyAllowed = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccessControlService_isAnyAllowed_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
AccessControlServiceClient.prototype.areAllAllowed = function(ctx, reqs, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_areAllAllowed(ctx, reqs);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_areAllAllowed(ctx, reqs);
  }
};

AccessControlServiceClient.prototype.send_areAllAllowed = function(ctx, reqs) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('areAllAllowed', Thrift.MessageType.CALL, this.seqid());
  var args = new AccessControlService_areAllAllowed_args();
  args.ctx = ctx;
  args.reqs = reqs;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccessControlServiceClient.prototype.recv_areAllAllowed = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccessControlService_areAllAllowed_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
AccessControlServiceClient.prototype.allowedResources = function(ctx, subject, actionsANDFilter, actionsORFilter, resourcePrefix, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_allowedResources(ctx, subject, actionsANDFilter, actionsORFilter, resourcePrefix);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_allowedResources(ctx, subject, actionsANDFilter, actionsORFilter, resourcePrefix);
  }
};

AccessControlServiceClient.prototype.send_allowedResources = function(ctx, subject, actionsANDFilter, actionsORFilter, resourcePrefix) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('allowedResources', Thrift.MessageType.CALL, this.seqid());
  var args = new AccessControlService_allowedResources_args();
  args.ctx = ctx;
  args.subject = subject;
  args.actionsANDFilter = actionsANDFilter;
  args.actionsORFilter = actionsORFilter;
  args.resourcePrefix = resourcePrefix;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccessControlServiceClient.prototype.recv_allowedResources = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccessControlService_allowedResources_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('allowedResources failed: unknown result');
};
AccessControlServiceClient.prototype.allowedResourcesForAll = function(ctx, subjects, actionsANDFilter, actionsORFilter, resourcePrefix, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_allowedResourcesForAll(ctx, subjects, actionsANDFilter, actionsORFilter, resourcePrefix);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_allowedResourcesForAll(ctx, subjects, actionsANDFilter, actionsORFilter, resourcePrefix);
  }
};

AccessControlServiceClient.prototype.send_allowedResourcesForAll = function(ctx, subjects, actionsANDFilter, actionsORFilter, resourcePrefix) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('allowedResourcesForAll', Thrift.MessageType.CALL, this.seqid());
  var args = new AccessControlService_allowedResourcesForAll_args();
  args.ctx = ctx;
  args.subjects = subjects;
  args.actionsANDFilter = actionsANDFilter;
  args.actionsORFilter = actionsORFilter;
  args.resourcePrefix = resourcePrefix;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccessControlServiceClient.prototype.recv_allowedResourcesForAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccessControlService_allowedResourcesForAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('allowedResourcesForAll failed: unknown result');
};
AccessControlServiceClient.prototype.allowedActions = function(ctx, subject, resources, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_allowedActions(ctx, subject, resources);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_allowedActions(ctx, subject, resources);
  }
};

AccessControlServiceClient.prototype.send_allowedActions = function(ctx, subject, resources) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('allowedActions', Thrift.MessageType.CALL, this.seqid());
  var args = new AccessControlService_allowedActions_args();
  args.ctx = ctx;
  args.subject = subject;
  args.resources = resources;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccessControlServiceClient.prototype.recv_allowedActions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccessControlService_allowedActions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('allowedActions failed: unknown result');
};
AccessControlServiceClient.prototype.allowedActionsForAll = function(ctx, subjects, resources, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_allowedActionsForAll(ctx, subjects, resources);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_allowedActionsForAll(ctx, subjects, resources);
  }
};

AccessControlServiceClient.prototype.send_allowedActionsForAll = function(ctx, subjects, resources) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('allowedActionsForAll', Thrift.MessageType.CALL, this.seqid());
  var args = new AccessControlService_allowedActionsForAll_args();
  args.ctx = ctx;
  args.subjects = subjects;
  args.resources = resources;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AccessControlServiceClient.prototype.recv_allowedActionsForAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AccessControlService_allowedActionsForAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('allowedActionsForAll failed: unknown result');
};
var AccessControlServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(AccessControlServiceProcessor, BaseServiceProcessor);
AccessControlServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
AccessControlServiceProcessor.prototype.process_isAllowed = function(seqid, input, output) {
  var args = new AccessControlService_isAllowed_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isAllowed.length === 2) {
    Q.fcall(this._handler.isAllowed, args.ctx, args.req)
      .then(function(result) {
        var result_obj = new AccessControlService_isAllowed_result({success: result});
        output.writeMessageBegin("isAllowed", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AccessControlService_isAllowed_result(err);
          output.writeMessageBegin("isAllowed", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isAllowed", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isAllowed(args.ctx, args.req, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AccessControlService_isAllowed_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isAllowed", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isAllowed", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AccessControlServiceProcessor.prototype.process_isAnyAllowed = function(seqid, input, output) {
  var args = new AccessControlService_isAnyAllowed_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.isAnyAllowed.length === 2) {
    Q.fcall(this._handler.isAnyAllowed, args.ctx, args.reqs)
      .then(function(result) {
        var result_obj = new AccessControlService_isAnyAllowed_result({success: result});
        output.writeMessageBegin("isAnyAllowed", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AccessControlService_isAnyAllowed_result(err);
          output.writeMessageBegin("isAnyAllowed", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("isAnyAllowed", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.isAnyAllowed(args.ctx, args.reqs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AccessControlService_isAnyAllowed_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("isAnyAllowed", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("isAnyAllowed", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AccessControlServiceProcessor.prototype.process_areAllAllowed = function(seqid, input, output) {
  var args = new AccessControlService_areAllAllowed_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.areAllAllowed.length === 2) {
    Q.fcall(this._handler.areAllAllowed, args.ctx, args.reqs)
      .then(function(result) {
        var result_obj = new AccessControlService_areAllAllowed_result({success: result});
        output.writeMessageBegin("areAllAllowed", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AccessControlService_areAllAllowed_result(err);
          output.writeMessageBegin("areAllAllowed", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("areAllAllowed", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.areAllAllowed(args.ctx, args.reqs, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AccessControlService_areAllAllowed_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("areAllAllowed", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("areAllAllowed", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AccessControlServiceProcessor.prototype.process_allowedResources = function(seqid, input, output) {
  var args = new AccessControlService_allowedResources_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.allowedResources.length === 5) {
    Q.fcall(this._handler.allowedResources, args.ctx, args.subject, args.actionsANDFilter, args.actionsORFilter, args.resourcePrefix)
      .then(function(result) {
        var result_obj = new AccessControlService_allowedResources_result({success: result});
        output.writeMessageBegin("allowedResources", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AccessControlService_allowedResources_result(err);
          output.writeMessageBegin("allowedResources", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("allowedResources", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.allowedResources(args.ctx, args.subject, args.actionsANDFilter, args.actionsORFilter, args.resourcePrefix, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AccessControlService_allowedResources_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("allowedResources", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("allowedResources", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AccessControlServiceProcessor.prototype.process_allowedResourcesForAll = function(seqid, input, output) {
  var args = new AccessControlService_allowedResourcesForAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.allowedResourcesForAll.length === 5) {
    Q.fcall(this._handler.allowedResourcesForAll, args.ctx, args.subjects, args.actionsANDFilter, args.actionsORFilter, args.resourcePrefix)
      .then(function(result) {
        var result_obj = new AccessControlService_allowedResourcesForAll_result({success: result});
        output.writeMessageBegin("allowedResourcesForAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AccessControlService_allowedResourcesForAll_result(err);
          output.writeMessageBegin("allowedResourcesForAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("allowedResourcesForAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.allowedResourcesForAll(args.ctx, args.subjects, args.actionsANDFilter, args.actionsORFilter, args.resourcePrefix, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AccessControlService_allowedResourcesForAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("allowedResourcesForAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("allowedResourcesForAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AccessControlServiceProcessor.prototype.process_allowedActions = function(seqid, input, output) {
  var args = new AccessControlService_allowedActions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.allowedActions.length === 3) {
    Q.fcall(this._handler.allowedActions, args.ctx, args.subject, args.resources)
      .then(function(result) {
        var result_obj = new AccessControlService_allowedActions_result({success: result});
        output.writeMessageBegin("allowedActions", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AccessControlService_allowedActions_result(err);
          output.writeMessageBegin("allowedActions", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("allowedActions", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.allowedActions(args.ctx, args.subject, args.resources, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AccessControlService_allowedActions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("allowedActions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("allowedActions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AccessControlServiceProcessor.prototype.process_allowedActionsForAll = function(seqid, input, output) {
  var args = new AccessControlService_allowedActionsForAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.allowedActionsForAll.length === 3) {
    Q.fcall(this._handler.allowedActionsForAll, args.ctx, args.subjects, args.resources)
      .then(function(result) {
        var result_obj = new AccessControlService_allowedActionsForAll_result({success: result});
        output.writeMessageBegin("allowedActionsForAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AccessControlService_allowedActionsForAll_result(err);
          output.writeMessageBegin("allowedActionsForAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("allowedActionsForAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.allowedActionsForAll(args.ctx, args.subjects, args.resources, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AccessControlService_allowedActionsForAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("allowedActionsForAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("allowedActionsForAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
