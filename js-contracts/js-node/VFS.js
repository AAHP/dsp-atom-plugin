//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./vfs_types');
//HELPER FUNCTIONS AND STRUCTURES

var VFS_getObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
VFS_getObject_args.prototype = {};
VFS_getObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_getObject_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_getObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_getObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_getObject_result.prototype = {};
VFS_getObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_getObject_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_getObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_lookupObject_args = function(args) {
  this.ctx = null;
  this.folderID = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.folderID !== undefined && args.folderID !== null) {
      this.folderID = args.folderID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
VFS_lookupObject_args.prototype = {};
VFS_lookupObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.folderID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_lookupObject_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_lookupObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.folderID !== null && this.folderID !== undefined) {
    output.writeFieldBegin('folderID', Thrift.Type.STRING, 2);
    output.writeString(this.folderID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_lookupObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_lookupObject_result.prototype = {};
VFS_lookupObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_lookupObject_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_lookupObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_renameObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.newName = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.newName !== undefined && args.newName !== null) {
      this.newName = args.newName;
    }
  }
};
VFS_renameObject_args.prototype = {};
VFS_renameObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_renameObject_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_renameObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 3);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_renameObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_renameObject_result.prototype = {};
VFS_renameObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_renameObject_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_renameObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_deleteObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
VFS_deleteObject_args.prototype = {};
VFS_deleteObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_deleteObject_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_deleteObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_deleteObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_deleteObject_result.prototype = {};
VFS_deleteObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_deleteObject_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_deleteObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_changeParent_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.newParentID = null;
  this.newName = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.newParentID !== undefined && args.newParentID !== null) {
      this.newParentID = args.newParentID;
    }
    if (args.newName !== undefined && args.newName !== null) {
      this.newName = args.newName;
    }
  }
};
VFS_changeParent_args.prototype = {};
VFS_changeParent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newParentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_changeParent_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_changeParent_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.newParentID !== null && this.newParentID !== undefined) {
    output.writeFieldBegin('newParentID', Thrift.Type.STRING, 3);
    output.writeString(this.newParentID);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 4);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_changeParent_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_changeParent_result.prototype = {};
VFS_changeParent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_changeParent_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_changeParent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_listObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.paginator = null;
  this.displayOwnOnly = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
    if (args.displayOwnOnly !== undefined && args.displayOwnOnly !== null) {
      this.displayOwnOnly = args.displayOwnOnly;
    }
  }
};
VFS_listObject_args.prototype = {};
VFS_listObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.displayOwnOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_listObject_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_listObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 3);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  if (this.displayOwnOnly !== null && this.displayOwnOnly !== undefined) {
    output.writeFieldBegin('displayOwnOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.displayOwnOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_listObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ObjectsCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_listObject_result.prototype = {};
VFS_listObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ObjectsCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_listObject_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_listObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_listAllNestedObjects_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.displayOwnOnly = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.displayOwnOnly !== undefined && args.displayOwnOnly !== null) {
      this.displayOwnOnly = args.displayOwnOnly;
    }
  }
};
VFS_listAllNestedObjects_args.prototype = {};
VFS_listAllNestedObjects_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.displayOwnOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_listAllNestedObjects_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_listAllNestedObjects_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.displayOwnOnly !== null && this.displayOwnOnly !== undefined) {
    output.writeFieldBegin('displayOwnOnly', Thrift.Type.BOOL, 3);
    output.writeBool(this.displayOwnOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_listAllNestedObjects_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ObjectsNestedCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_listAllNestedObjects_result.prototype = {};
VFS_listAllNestedObjects_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ObjectsNestedCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_listAllNestedObjects_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_listAllNestedObjects_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_addFolder_args = function(args) {
  this.ctx = null;
  this.parentID = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
VFS_addFolder_args.prototype = {};
VFS_addFolder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_addFolder_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_addFolder_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_addFolder_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_addFolder_result.prototype = {};
VFS_addFolder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_addFolder_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_addFolder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_getStats_args = function(args) {
  this.ctx = null;
  this.folderID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.folderID !== undefined && args.folderID !== null) {
      this.folderID = args.folderID;
    }
  }
};
VFS_getStats_args.prototype = {};
VFS_getStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.folderID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_getStats_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_getStats_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.folderID !== null && this.folderID !== undefined) {
    output.writeFieldBegin('folderID', Thrift.Type.STRING, 2);
    output.writeString(this.folderID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_getStats_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.FolderStats(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_getStats_result.prototype = {};
VFS_getStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.FolderStats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_getStats_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_getStats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_addFile_args = function(args) {
  this.ctx = null;
  this.parentID = null;
  this.name = null;
  this.properties = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = new ttypes.FileProperties(args.properties);
    }
  }
};
VFS_addFile_args.prototype = {};
VFS_addFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.properties = new ttypes.FileProperties();
        this.properties.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_addFile_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_addFile_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.STRUCT, 4);
    this.properties.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_addFile_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_addFile_result.prototype = {};
VFS_addFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_addFile_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_addFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_updateFile_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.status = null;
  this.properties = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = new ttypes.FileProperties(args.properties);
    }
  }
};
VFS_updateFile_args.prototype = {};
VFS_updateFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.status = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.properties = new ttypes.FileProperties();
        this.properties.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_updateFile_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_updateFile_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BYTE, 3);
    output.writeByte(this.status);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.STRUCT, 4);
    this.properties.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_updateFile_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_updateFile_result.prototype = {};
VFS_updateFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_updateFile_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_updateFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_enableDownloads_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.password = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
VFS_enableDownloads_args.prototype = {};
VFS_enableDownloads_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_enableDownloads_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_enableDownloads_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_enableDownloads_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_enableDownloads_result.prototype = {};
VFS_enableDownloads_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_enableDownloads_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_enableDownloads_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_disableDownloads_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
VFS_disableDownloads_args.prototype = {};
VFS_disableDownloads_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_disableDownloads_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_disableDownloads_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_disableDownloads_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_disableDownloads_result.prototype = {};
VFS_disableDownloads_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_disableDownloads_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_disableDownloads_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_listDownloads_args = function(args) {
  this.ctx = null;
  this.paginator = null;
  this.displayOwnOnly = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
    if (args.displayOwnOnly !== undefined && args.displayOwnOnly !== null) {
      this.displayOwnOnly = args.displayOwnOnly;
    }
  }
};
VFS_listDownloads_args.prototype = {};
VFS_listDownloads_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.displayOwnOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_listDownloads_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_listDownloads_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 2);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  if (this.displayOwnOnly !== null && this.displayOwnOnly !== undefined) {
    output.writeFieldBegin('displayOwnOnly', Thrift.Type.BOOL, 3);
    output.writeBool(this.displayOwnOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_listDownloads_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ObjectsCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_listDownloads_result.prototype = {};
VFS_listDownloads_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ObjectsCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_listDownloads_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_listDownloads_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_hardDeleteObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
VFS_hardDeleteObject_args.prototype = {};
VFS_hardDeleteObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_hardDeleteObject_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_hardDeleteObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_hardDeleteObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_hardDeleteObject_result.prototype = {};
VFS_hardDeleteObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_hardDeleteObject_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_hardDeleteObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_restoreDeletedObject_args = function(args) {
  this.ctx = null;
  this.parentID = null;
  this.ID = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
VFS_restoreDeletedObject_args.prototype = {};
VFS_restoreDeletedObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_restoreDeletedObject_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_restoreDeletedObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 3);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_restoreDeletedObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_restoreDeletedObject_result.prototype = {};
VFS_restoreDeletedObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_restoreDeletedObject_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_restoreDeletedObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_listDeletedObject_args = function(args) {
  this.ctx = null;
  this.paginator = null;
  this.displayOwnOnly = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
    if (args.displayOwnOnly !== undefined && args.displayOwnOnly !== null) {
      this.displayOwnOnly = args.displayOwnOnly;
    }
  }
};
VFS_listDeletedObject_args.prototype = {};
VFS_listDeletedObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.displayOwnOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_listDeletedObject_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_listDeletedObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 3);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  if (this.displayOwnOnly !== null && this.displayOwnOnly !== undefined) {
    output.writeFieldBegin('displayOwnOnly', Thrift.Type.BOOL, 4);
    output.writeBool(this.displayOwnOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_listDeletedObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ObjectsCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_listDeletedObject_result.prototype = {};
VFS_listDeletedObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ObjectsCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_listDeletedObject_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_listDeletedObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_updateSharingStatus_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.sharingStatus = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.sharingStatus !== undefined && args.sharingStatus !== null) {
      this.sharingStatus = args.sharingStatus;
    }
  }
};
VFS_updateSharingStatus_args.prototype = {};
VFS_updateSharingStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.sharingStatus = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_updateSharingStatus_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_updateSharingStatus_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.sharingStatus !== null && this.sharingStatus !== undefined) {
    output.writeFieldBegin('sharingStatus', Thrift.Type.BYTE, 3);
    output.writeByte(this.sharingStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_updateSharingStatus_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_updateSharingStatus_result.prototype = {};
VFS_updateSharingStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_updateSharingStatus_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_updateSharingStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_updateSharing_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.globalStatus = null;
  this.sharedUsersCollection = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.globalStatus !== undefined && args.globalStatus !== null) {
      this.globalStatus = args.globalStatus;
    }
    if (args.sharedUsersCollection !== undefined && args.sharedUsersCollection !== null) {
      this.sharedUsersCollection = new ttypes.SharedUsersCollection(args.sharedUsersCollection);
    }
  }
};
VFS_updateSharing_args.prototype = {};
VFS_updateSharing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.globalStatus = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedUsersCollection = new ttypes.SharedUsersCollection();
        this.sharedUsersCollection.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_updateSharing_args.prototype.write = function(output) {
  output.writeStructBegin('VFS_updateSharing_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.globalStatus !== null && this.globalStatus !== undefined) {
    output.writeFieldBegin('globalStatus', Thrift.Type.BYTE, 3);
    output.writeByte(this.globalStatus);
    output.writeFieldEnd();
  }
  if (this.sharedUsersCollection !== null && this.sharedUsersCollection !== undefined) {
    output.writeFieldBegin('sharedUsersCollection', Thrift.Type.STRUCT, 4);
    this.sharedUsersCollection.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFS_updateSharing_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
VFS_updateSharing_result.prototype = {};
VFS_updateSharing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

VFS_updateSharing_result.prototype.write = function(output) {
  output.writeStructBegin('VFS_updateSharing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var VFSClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(VFSClient, BaseServiceClient);
VFSClient.prototype.seqid = function() { return this._seqid; };
VFSClient.prototype.new_seqid = function() { return this._seqid += 1; };
VFSClient.prototype.getObject = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getObject(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getObject(ctx, ID);
  }
};

VFSClient.prototype.send_getObject = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getObject', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_getObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_getObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_getObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getObject failed: unknown result');
};
VFSClient.prototype.lookupObject = function(ctx, folderID, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_lookupObject(ctx, folderID, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_lookupObject(ctx, folderID, name);
  }
};

VFSClient.prototype.send_lookupObject = function(ctx, folderID, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('lookupObject', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_lookupObject_args();
  args.ctx = ctx;
  args.folderID = folderID;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_lookupObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_lookupObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('lookupObject failed: unknown result');
};
VFSClient.prototype.renameObject = function(ctx, ID, newName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_renameObject(ctx, ID, newName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_renameObject(ctx, ID, newName);
  }
};

VFSClient.prototype.send_renameObject = function(ctx, ID, newName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('renameObject', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_renameObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.newName = newName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_renameObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_renameObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('renameObject failed: unknown result');
};
VFSClient.prototype.deleteObject = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteObject(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteObject(ctx, ID);
  }
};

VFSClient.prototype.send_deleteObject = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteObject', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_deleteObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_deleteObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_deleteObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteObject failed: unknown result');
};
VFSClient.prototype.changeParent = function(ctx, ID, newParentID, newName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_changeParent(ctx, ID, newParentID, newName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_changeParent(ctx, ID, newParentID, newName);
  }
};

VFSClient.prototype.send_changeParent = function(ctx, ID, newParentID, newName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('changeParent', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_changeParent_args();
  args.ctx = ctx;
  args.ID = ID;
  args.newParentID = newParentID;
  args.newName = newName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_changeParent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_changeParent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('changeParent failed: unknown result');
};
VFSClient.prototype.listObject = function(ctx, ID, paginator, displayOwnOnly, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listObject(ctx, ID, paginator, displayOwnOnly);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listObject(ctx, ID, paginator, displayOwnOnly);
  }
};

VFSClient.prototype.send_listObject = function(ctx, ID, paginator, displayOwnOnly) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listObject', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_listObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.paginator = paginator;
  args.displayOwnOnly = displayOwnOnly;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_listObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_listObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listObject failed: unknown result');
};
VFSClient.prototype.listAllNestedObjects = function(ctx, ID, displayOwnOnly, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listAllNestedObjects(ctx, ID, displayOwnOnly);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listAllNestedObjects(ctx, ID, displayOwnOnly);
  }
};

VFSClient.prototype.send_listAllNestedObjects = function(ctx, ID, displayOwnOnly) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listAllNestedObjects', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_listAllNestedObjects_args();
  args.ctx = ctx;
  args.ID = ID;
  args.displayOwnOnly = displayOwnOnly;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_listAllNestedObjects = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_listAllNestedObjects_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listAllNestedObjects failed: unknown result');
};
VFSClient.prototype.addFolder = function(ctx, parentID, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFolder(ctx, parentID, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFolder(ctx, parentID, name);
  }
};

VFSClient.prototype.send_addFolder = function(ctx, parentID, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFolder', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_addFolder_args();
  args.ctx = ctx;
  args.parentID = parentID;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_addFolder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_addFolder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFolder failed: unknown result');
};
VFSClient.prototype.getStats = function(ctx, folderID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStats(ctx, folderID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStats(ctx, folderID);
  }
};

VFSClient.prototype.send_getStats = function(ctx, folderID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStats', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_getStats_args();
  args.ctx = ctx;
  args.folderID = folderID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_getStats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_getStats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStats failed: unknown result');
};
VFSClient.prototype.addFile = function(ctx, parentID, name, properties, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFile(ctx, parentID, name, properties);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFile(ctx, parentID, name, properties);
  }
};

VFSClient.prototype.send_addFile = function(ctx, parentID, name, properties) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFile', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_addFile_args();
  args.ctx = ctx;
  args.parentID = parentID;
  args.name = name;
  args.properties = properties;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_addFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_addFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFile failed: unknown result');
};
VFSClient.prototype.updateFile = function(ctx, ID, status, properties, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateFile(ctx, ID, status, properties);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateFile(ctx, ID, status, properties);
  }
};

VFSClient.prototype.send_updateFile = function(ctx, ID, status, properties) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateFile', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_updateFile_args();
  args.ctx = ctx;
  args.ID = ID;
  args.status = status;
  args.properties = properties;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_updateFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_updateFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateFile failed: unknown result');
};
VFSClient.prototype.enableDownloads = function(ctx, ID, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enableDownloads(ctx, ID, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enableDownloads(ctx, ID, password);
  }
};

VFSClient.prototype.send_enableDownloads = function(ctx, ID, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enableDownloads', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_enableDownloads_args();
  args.ctx = ctx;
  args.ID = ID;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_enableDownloads = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_enableDownloads_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('enableDownloads failed: unknown result');
};
VFSClient.prototype.disableDownloads = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disableDownloads(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disableDownloads(ctx, ID);
  }
};

VFSClient.prototype.send_disableDownloads = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disableDownloads', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_disableDownloads_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_disableDownloads = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_disableDownloads_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('disableDownloads failed: unknown result');
};
VFSClient.prototype.listDownloads = function(ctx, paginator, displayOwnOnly, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listDownloads(ctx, paginator, displayOwnOnly);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listDownloads(ctx, paginator, displayOwnOnly);
  }
};

VFSClient.prototype.send_listDownloads = function(ctx, paginator, displayOwnOnly) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listDownloads', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_listDownloads_args();
  args.ctx = ctx;
  args.paginator = paginator;
  args.displayOwnOnly = displayOwnOnly;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_listDownloads = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_listDownloads_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listDownloads failed: unknown result');
};
VFSClient.prototype.hardDeleteObject = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hardDeleteObject(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hardDeleteObject(ctx, ID);
  }
};

VFSClient.prototype.send_hardDeleteObject = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hardDeleteObject', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_hardDeleteObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_hardDeleteObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_hardDeleteObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hardDeleteObject failed: unknown result');
};
VFSClient.prototype.restoreDeletedObject = function(ctx, parentID, ID, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_restoreDeletedObject(ctx, parentID, ID, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_restoreDeletedObject(ctx, parentID, ID, name);
  }
};

VFSClient.prototype.send_restoreDeletedObject = function(ctx, parentID, ID, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('restoreDeletedObject', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_restoreDeletedObject_args();
  args.ctx = ctx;
  args.parentID = parentID;
  args.ID = ID;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_restoreDeletedObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_restoreDeletedObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('restoreDeletedObject failed: unknown result');
};
VFSClient.prototype.listDeletedObject = function(ctx, paginator, displayOwnOnly, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listDeletedObject(ctx, paginator, displayOwnOnly);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listDeletedObject(ctx, paginator, displayOwnOnly);
  }
};

VFSClient.prototype.send_listDeletedObject = function(ctx, paginator, displayOwnOnly) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listDeletedObject', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_listDeletedObject_args();
  args.ctx = ctx;
  args.paginator = paginator;
  args.displayOwnOnly = displayOwnOnly;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_listDeletedObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_listDeletedObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listDeletedObject failed: unknown result');
};
VFSClient.prototype.updateSharingStatus = function(ctx, ID, sharingStatus, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSharingStatus(ctx, ID, sharingStatus);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSharingStatus(ctx, ID, sharingStatus);
  }
};

VFSClient.prototype.send_updateSharingStatus = function(ctx, ID, sharingStatus) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSharingStatus', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_updateSharingStatus_args();
  args.ctx = ctx;
  args.ID = ID;
  args.sharingStatus = sharingStatus;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_updateSharingStatus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_updateSharingStatus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSharingStatus failed: unknown result');
};
VFSClient.prototype.updateSharing = function(ctx, ID, globalStatus, sharedUsersCollection, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSharing(ctx, ID, globalStatus, sharedUsersCollection);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSharing(ctx, ID, globalStatus, sharedUsersCollection);
  }
};

VFSClient.prototype.send_updateSharing = function(ctx, ID, globalStatus, sharedUsersCollection) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSharing', Thrift.MessageType.CALL, this.seqid());
  var args = new VFS_updateSharing_args();
  args.ctx = ctx;
  args.ID = ID;
  args.globalStatus = globalStatus;
  args.sharedUsersCollection = sharedUsersCollection;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

VFSClient.prototype.recv_updateSharing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new VFS_updateSharing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateSharing failed: unknown result');
};
var VFSProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(VFSProcessor, BaseServiceProcessor);
VFSProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
VFSProcessor.prototype.process_getObject = function(seqid, input, output) {
  var args = new VFS_getObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getObject.length === 2) {
    Q.fcall(this._handler.getObject, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new VFS_getObject_result({success: result});
        output.writeMessageBegin("getObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_getObject_result(err);
          output.writeMessageBegin("getObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getObject(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_getObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_lookupObject = function(seqid, input, output) {
  var args = new VFS_lookupObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.lookupObject.length === 3) {
    Q.fcall(this._handler.lookupObject, args.ctx, args.folderID, args.name)
      .then(function(result) {
        var result_obj = new VFS_lookupObject_result({success: result});
        output.writeMessageBegin("lookupObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_lookupObject_result(err);
          output.writeMessageBegin("lookupObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.lookupObject(args.ctx, args.folderID, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_lookupObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("lookupObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("lookupObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_renameObject = function(seqid, input, output) {
  var args = new VFS_renameObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.renameObject.length === 3) {
    Q.fcall(this._handler.renameObject, args.ctx, args.ID, args.newName)
      .then(function(result) {
        var result_obj = new VFS_renameObject_result({success: result});
        output.writeMessageBegin("renameObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_renameObject_result(err);
          output.writeMessageBegin("renameObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("renameObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.renameObject(args.ctx, args.ID, args.newName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_renameObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("renameObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("renameObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_deleteObject = function(seqid, input, output) {
  var args = new VFS_deleteObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteObject.length === 2) {
    Q.fcall(this._handler.deleteObject, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new VFS_deleteObject_result({success: result});
        output.writeMessageBegin("deleteObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_deleteObject_result(err);
          output.writeMessageBegin("deleteObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteObject(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_deleteObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_changeParent = function(seqid, input, output) {
  var args = new VFS_changeParent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.changeParent.length === 4) {
    Q.fcall(this._handler.changeParent, args.ctx, args.ID, args.newParentID, args.newName)
      .then(function(result) {
        var result_obj = new VFS_changeParent_result({success: result});
        output.writeMessageBegin("changeParent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_changeParent_result(err);
          output.writeMessageBegin("changeParent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("changeParent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.changeParent(args.ctx, args.ID, args.newParentID, args.newName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_changeParent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("changeParent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("changeParent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_listObject = function(seqid, input, output) {
  var args = new VFS_listObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listObject.length === 4) {
    Q.fcall(this._handler.listObject, args.ctx, args.ID, args.paginator, args.displayOwnOnly)
      .then(function(result) {
        var result_obj = new VFS_listObject_result({success: result});
        output.writeMessageBegin("listObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_listObject_result(err);
          output.writeMessageBegin("listObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listObject(args.ctx, args.ID, args.paginator, args.displayOwnOnly, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_listObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_listAllNestedObjects = function(seqid, input, output) {
  var args = new VFS_listAllNestedObjects_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listAllNestedObjects.length === 3) {
    Q.fcall(this._handler.listAllNestedObjects, args.ctx, args.ID, args.displayOwnOnly)
      .then(function(result) {
        var result_obj = new VFS_listAllNestedObjects_result({success: result});
        output.writeMessageBegin("listAllNestedObjects", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_listAllNestedObjects_result(err);
          output.writeMessageBegin("listAllNestedObjects", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listAllNestedObjects", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listAllNestedObjects(args.ctx, args.ID, args.displayOwnOnly, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_listAllNestedObjects_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listAllNestedObjects", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listAllNestedObjects", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_addFolder = function(seqid, input, output) {
  var args = new VFS_addFolder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFolder.length === 3) {
    Q.fcall(this._handler.addFolder, args.ctx, args.parentID, args.name)
      .then(function(result) {
        var result_obj = new VFS_addFolder_result({success: result});
        output.writeMessageBegin("addFolder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_addFolder_result(err);
          output.writeMessageBegin("addFolder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFolder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFolder(args.ctx, args.parentID, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_addFolder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFolder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFolder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_getStats = function(seqid, input, output) {
  var args = new VFS_getStats_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStats.length === 2) {
    Q.fcall(this._handler.getStats, args.ctx, args.folderID)
      .then(function(result) {
        var result_obj = new VFS_getStats_result({success: result});
        output.writeMessageBegin("getStats", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_getStats_result(err);
          output.writeMessageBegin("getStats", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getStats", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getStats(args.ctx, args.folderID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_getStats_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getStats", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStats", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_addFile = function(seqid, input, output) {
  var args = new VFS_addFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFile.length === 4) {
    Q.fcall(this._handler.addFile, args.ctx, args.parentID, args.name, args.properties)
      .then(function(result) {
        var result_obj = new VFS_addFile_result({success: result});
        output.writeMessageBegin("addFile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_addFile_result(err);
          output.writeMessageBegin("addFile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFile(args.ctx, args.parentID, args.name, args.properties, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_addFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_updateFile = function(seqid, input, output) {
  var args = new VFS_updateFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateFile.length === 4) {
    Q.fcall(this._handler.updateFile, args.ctx, args.ID, args.status, args.properties)
      .then(function(result) {
        var result_obj = new VFS_updateFile_result({success: result});
        output.writeMessageBegin("updateFile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_updateFile_result(err);
          output.writeMessageBegin("updateFile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateFile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateFile(args.ctx, args.ID, args.status, args.properties, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_updateFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_enableDownloads = function(seqid, input, output) {
  var args = new VFS_enableDownloads_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enableDownloads.length === 3) {
    Q.fcall(this._handler.enableDownloads, args.ctx, args.ID, args.password)
      .then(function(result) {
        var result_obj = new VFS_enableDownloads_result({success: result});
        output.writeMessageBegin("enableDownloads", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_enableDownloads_result(err);
          output.writeMessageBegin("enableDownloads", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("enableDownloads", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.enableDownloads(args.ctx, args.ID, args.password, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_enableDownloads_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("enableDownloads", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enableDownloads", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_disableDownloads = function(seqid, input, output) {
  var args = new VFS_disableDownloads_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disableDownloads.length === 2) {
    Q.fcall(this._handler.disableDownloads, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new VFS_disableDownloads_result({success: result});
        output.writeMessageBegin("disableDownloads", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_disableDownloads_result(err);
          output.writeMessageBegin("disableDownloads", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disableDownloads", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disableDownloads(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_disableDownloads_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disableDownloads", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disableDownloads", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_listDownloads = function(seqid, input, output) {
  var args = new VFS_listDownloads_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listDownloads.length === 3) {
    Q.fcall(this._handler.listDownloads, args.ctx, args.paginator, args.displayOwnOnly)
      .then(function(result) {
        var result_obj = new VFS_listDownloads_result({success: result});
        output.writeMessageBegin("listDownloads", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_listDownloads_result(err);
          output.writeMessageBegin("listDownloads", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listDownloads", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listDownloads(args.ctx, args.paginator, args.displayOwnOnly, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_listDownloads_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listDownloads", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listDownloads", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_hardDeleteObject = function(seqid, input, output) {
  var args = new VFS_hardDeleteObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hardDeleteObject.length === 2) {
    Q.fcall(this._handler.hardDeleteObject, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new VFS_hardDeleteObject_result({success: result});
        output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_hardDeleteObject_result(err);
          output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hardDeleteObject(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_hardDeleteObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_restoreDeletedObject = function(seqid, input, output) {
  var args = new VFS_restoreDeletedObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.restoreDeletedObject.length === 4) {
    Q.fcall(this._handler.restoreDeletedObject, args.ctx, args.parentID, args.ID, args.name)
      .then(function(result) {
        var result_obj = new VFS_restoreDeletedObject_result({success: result});
        output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_restoreDeletedObject_result(err);
          output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.restoreDeletedObject(args.ctx, args.parentID, args.ID, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_restoreDeletedObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_listDeletedObject = function(seqid, input, output) {
  var args = new VFS_listDeletedObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listDeletedObject.length === 3) {
    Q.fcall(this._handler.listDeletedObject, args.ctx, args.paginator, args.displayOwnOnly)
      .then(function(result) {
        var result_obj = new VFS_listDeletedObject_result({success: result});
        output.writeMessageBegin("listDeletedObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_listDeletedObject_result(err);
          output.writeMessageBegin("listDeletedObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listDeletedObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listDeletedObject(args.ctx, args.paginator, args.displayOwnOnly, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_listDeletedObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listDeletedObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listDeletedObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_updateSharingStatus = function(seqid, input, output) {
  var args = new VFS_updateSharingStatus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSharingStatus.length === 3) {
    Q.fcall(this._handler.updateSharingStatus, args.ctx, args.ID, args.sharingStatus)
      .then(function(result) {
        var result_obj = new VFS_updateSharingStatus_result({success: result});
        output.writeMessageBegin("updateSharingStatus", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_updateSharingStatus_result(err);
          output.writeMessageBegin("updateSharingStatus", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateSharingStatus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSharingStatus(args.ctx, args.ID, args.sharingStatus, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_updateSharingStatus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateSharingStatus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSharingStatus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
VFSProcessor.prototype.process_updateSharing = function(seqid, input, output) {
  var args = new VFS_updateSharing_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSharing.length === 4) {
    Q.fcall(this._handler.updateSharing, args.ctx, args.ID, args.globalStatus, args.sharedUsersCollection)
      .then(function(result) {
        var result_obj = new VFS_updateSharing_result({success: result});
        output.writeMessageBegin("updateSharing", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new VFS_updateSharing_result(err);
          output.writeMessageBegin("updateSharing", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateSharing", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSharing(args.ctx, args.ID, args.globalStatus, args.sharedUsersCollection, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new VFS_updateSharing_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateSharing", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSharing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
