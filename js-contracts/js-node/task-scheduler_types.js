//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var task_broker_ttypes = require('./task_broker_types');


var ttypes = module.exports = {};
var Schedule = module.exports.Schedule = function(args) {
  this.activeFromDate = null;
  this.activeToDate = null;
  this.cronExpression = null;
  this.timeZoneName = null;
  if (args) {
    if (args.activeFromDate !== undefined && args.activeFromDate !== null) {
      this.activeFromDate = args.activeFromDate;
    }
    if (args.activeToDate !== undefined && args.activeToDate !== null) {
      this.activeToDate = args.activeToDate;
    }
    if (args.cronExpression !== undefined && args.cronExpression !== null) {
      this.cronExpression = args.cronExpression;
    }
    if (args.timeZoneName !== undefined && args.timeZoneName !== null) {
      this.timeZoneName = args.timeZoneName;
    }
  }
};
Schedule.prototype = {};
Schedule.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.activeFromDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.activeToDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cronExpression = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.timeZoneName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Schedule.prototype.write = function(output) {
  output.writeStructBegin('Schedule');
  if (this.activeFromDate !== null && this.activeFromDate !== undefined) {
    output.writeFieldBegin('activeFromDate', Thrift.Type.STRING, 1);
    output.writeString(this.activeFromDate);
    output.writeFieldEnd();
  }
  if (this.activeToDate !== null && this.activeToDate !== undefined) {
    output.writeFieldBegin('activeToDate', Thrift.Type.STRING, 2);
    output.writeString(this.activeToDate);
    output.writeFieldEnd();
  }
  if (this.cronExpression !== null && this.cronExpression !== undefined) {
    output.writeFieldBegin('cronExpression', Thrift.Type.STRING, 3);
    output.writeString(this.cronExpression);
    output.writeFieldEnd();
  }
  if (this.timeZoneName !== null && this.timeZoneName !== undefined) {
    output.writeFieldBegin('timeZoneName', Thrift.Type.STRING, 4);
    output.writeString(this.timeZoneName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScheduledTask = module.exports.ScheduledTask = function(args) {
  this.ID = null;
  this.name = null;
  this.status = null;
  this.taskParameters = null;
  this.schedule = null;
  this.createdBy = null;
  this.createdAt = null;
  this.lastRun = null;
  this.nextRun = null;
  this.taskComment = null;
  this.taskMeta = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.taskParameters !== undefined && args.taskParameters !== null) {
      this.taskParameters = new task_broker_ttypes.TaskParameters(args.taskParameters);
    }
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = new ttypes.Schedule(args.schedule);
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.lastRun !== undefined && args.lastRun !== null) {
      this.lastRun = args.lastRun;
    }
    if (args.nextRun !== undefined && args.nextRun !== null) {
      this.nextRun = args.nextRun;
    }
    if (args.taskComment !== undefined && args.taskComment !== null) {
      this.taskComment = args.taskComment;
    }
    if (args.taskMeta !== undefined && args.taskMeta !== null) {
      this.taskMeta = args.taskMeta;
    }
  }
};
ScheduledTask.prototype = {};
ScheduledTask.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.status = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskParameters = new task_broker_ttypes.TaskParameters();
        this.taskParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedule = new ttypes.Schedule();
        this.schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.lastRun = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.nextRun = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.taskComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.taskMeta = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduledTask.prototype.write = function(output) {
  output.writeStructBegin('ScheduledTask');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BYTE, 3);
    output.writeByte(this.status);
    output.writeFieldEnd();
  }
  if (this.taskParameters !== null && this.taskParameters !== undefined) {
    output.writeFieldBegin('taskParameters', Thrift.Type.STRUCT, 4);
    this.taskParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRUCT, 5);
    this.schedule.write(output);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 6);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 7);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.lastRun !== null && this.lastRun !== undefined) {
    output.writeFieldBegin('lastRun', Thrift.Type.STRING, 8);
    output.writeString(this.lastRun);
    output.writeFieldEnd();
  }
  if (this.nextRun !== null && this.nextRun !== undefined) {
    output.writeFieldBegin('nextRun', Thrift.Type.STRING, 9);
    output.writeString(this.nextRun);
    output.writeFieldEnd();
  }
  if (this.taskComment !== null && this.taskComment !== undefined) {
    output.writeFieldBegin('taskComment', Thrift.Type.STRING, 10);
    output.writeString(this.taskComment);
    output.writeFieldEnd();
  }
  if (this.taskMeta !== null && this.taskMeta !== undefined) {
    output.writeFieldBegin('taskMeta', Thrift.Type.STRING, 11);
    output.writeString(this.taskMeta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScheduledTaskCollection = module.exports.ScheduledTaskCollection = function(args) {
  this.tasks = null;
  this.pagination = null;
  if (args) {
    if (args.tasks !== undefined && args.tasks !== null) {
      this.tasks = Thrift.copyList(args.tasks, [ttypes.ScheduledTask]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
ScheduledTaskCollection.prototype = {};
ScheduledTaskCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tasks = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.ScheduledTask();
          elem6.read(input);
          this.tasks.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduledTaskCollection.prototype.write = function(output) {
  output.writeStructBegin('ScheduledTaskCollection');
  if (this.tasks !== null && this.tasks !== undefined) {
    output.writeFieldBegin('tasks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tasks.length);
    for (var iter7 in this.tasks)
    {
      if (this.tasks.hasOwnProperty(iter7))
      {
        iter7 = this.tasks[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScheduledTaskActivity = module.exports.ScheduledTaskActivity = function(args) {
  this.ID = null;
  this.scheduledTaskID = null;
  this.activityDate = null;
  this.activityType = null;
  this.state = null;
  this.data = null;
  this.principleID = null;
  this.taskMeta = null;
  this.taskID = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.scheduledTaskID !== undefined && args.scheduledTaskID !== null) {
      this.scheduledTaskID = args.scheduledTaskID;
    }
    if (args.activityDate !== undefined && args.activityDate !== null) {
      this.activityDate = args.activityDate;
    }
    if (args.activityType !== undefined && args.activityType !== null) {
      this.activityType = args.activityType;
    }
    if (args.state !== undefined && args.state !== null) {
      this.state = args.state;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
    if (args.principleID !== undefined && args.principleID !== null) {
      this.principleID = args.principleID;
    }
    if (args.taskMeta !== undefined && args.taskMeta !== null) {
      this.taskMeta = args.taskMeta;
    }
    if (args.taskID !== undefined && args.taskID !== null) {
      this.taskID = args.taskID;
    }
  }
};
ScheduledTaskActivity.prototype = {};
ScheduledTaskActivity.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scheduledTaskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.activityDate = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.activityType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.state = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.principleID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.taskMeta = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.taskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduledTaskActivity.prototype.write = function(output) {
  output.writeStructBegin('ScheduledTaskActivity');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.scheduledTaskID !== null && this.scheduledTaskID !== undefined) {
    output.writeFieldBegin('scheduledTaskID', Thrift.Type.STRING, 2);
    output.writeString(this.scheduledTaskID);
    output.writeFieldEnd();
  }
  if (this.activityDate !== null && this.activityDate !== undefined) {
    output.writeFieldBegin('activityDate', Thrift.Type.STRING, 3);
    output.writeString(this.activityDate);
    output.writeFieldEnd();
  }
  if (this.activityType !== null && this.activityType !== undefined) {
    output.writeFieldBegin('activityType', Thrift.Type.BYTE, 4);
    output.writeByte(this.activityType);
    output.writeFieldEnd();
  }
  if (this.state !== null && this.state !== undefined) {
    output.writeFieldBegin('state', Thrift.Type.BYTE, 5);
    output.writeByte(this.state);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 6);
    output.writeString(this.data);
    output.writeFieldEnd();
  }
  if (this.principleID !== null && this.principleID !== undefined) {
    output.writeFieldBegin('principleID', Thrift.Type.STRING, 7);
    output.writeString(this.principleID);
    output.writeFieldEnd();
  }
  if (this.taskMeta !== null && this.taskMeta !== undefined) {
    output.writeFieldBegin('taskMeta', Thrift.Type.STRING, 8);
    output.writeString(this.taskMeta);
    output.writeFieldEnd();
  }
  if (this.taskID !== null && this.taskID !== undefined) {
    output.writeFieldBegin('taskID', Thrift.Type.STRING, 9);
    output.writeString(this.taskID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScheduledTaskActivityCollection = module.exports.ScheduledTaskActivityCollection = function(args) {
  this.activities = null;
  this.pagination = null;
  if (args) {
    if (args.activities !== undefined && args.activities !== null) {
      this.activities = Thrift.copyList(args.activities, [ttypes.ScheduledTaskActivity]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
ScheduledTaskActivityCollection.prototype = {};
ScheduledTaskActivityCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.activities = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.ScheduledTaskActivity();
          elem14.read(input);
          this.activities.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduledTaskActivityCollection.prototype.write = function(output) {
  output.writeStructBegin('ScheduledTaskActivityCollection');
  if (this.activities !== null && this.activities !== undefined) {
    output.writeFieldBegin('activities', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.activities.length);
    for (var iter15 in this.activities)
    {
      if (this.activities.hasOwnProperty(iter15))
      {
        iter15 = this.activities[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScheduledTaskFilter = module.exports.ScheduledTaskFilter = function(args) {
  this.name = null;
  this.taskName = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = Thrift.copyList(args.name, [null]);
    }
    if (args.taskName !== undefined && args.taskName !== null) {
      this.taskName = Thrift.copyList(args.taskName, [null]);
    }
  }
};
ScheduledTaskFilter.prototype = {};
ScheduledTaskFilter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.name = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.name.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.taskName = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          elem29 = input.readString();
          this.taskName.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduledTaskFilter.prototype.write = function(output) {
  output.writeStructBegin('ScheduledTaskFilter');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.name.length);
    for (var iter30 in this.name)
    {
      if (this.name.hasOwnProperty(iter30))
      {
        iter30 = this.name[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.taskName !== null && this.taskName !== undefined) {
    output.writeFieldBegin('taskName', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.taskName.length);
    for (var iter31 in this.taskName)
    {
      if (this.taskName.hasOwnProperty(iter31))
      {
        iter31 = this.taskName[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'dmp-task-scheduler';
ttypes.VERSION = '0.4.0';
ttypes.ERR_CODE = 62;
ttypes.STATUS_ENABLED = 0;
ttypes.STATUS_RUNNING = 1;
ttypes.STATUS_DISABLED = 2;
ttypes.ACTIVITY_TYPE_RUN = 0;
ttypes.ACTIVITY_TYPE_MANUAL_RUN = 1;
ttypes.ACTIVITY_TYPE_ENABLE = 2;
ttypes.ACTIVITY_TYPE_DISABLE = 3;
ttypes.ACTIVITY_TYPE_EDIT = 4;
ttypes.ACTIVITY_STATE_PENDING = 0;
ttypes.ACTIVITY_STATE_STARTED = 1;
ttypes.ACTIVITY_STATE_SUCCESS = 2;
ttypes.ACTIVITY_STATE_FAILURE = 3;
ttypes.ACTIVITY_STATE_CANCEL = 4;
ttypes.ACTIVITY_STATE_UNKNOWN = 5;
