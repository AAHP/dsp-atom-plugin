//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var UserServiceEntry = module.exports.UserServiceEntry = function(args) {
  this.name = null;
  this.status = null;
  this.serviceType = null;
  this.appDirID = null;
  this.isPublic = null;
  this.serviceURI = null;
  this.envVars = null;
  this.dashboardURI = null;
  this.createdBy = null;
  this.createdAt = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.serviceType !== undefined && args.serviceType !== null) {
      this.serviceType = args.serviceType;
    }
    if (args.appDirID !== undefined && args.appDirID !== null) {
      this.appDirID = args.appDirID;
    }
    if (args.isPublic !== undefined && args.isPublic !== null) {
      this.isPublic = args.isPublic;
    }
    if (args.serviceURI !== undefined && args.serviceURI !== null) {
      this.serviceURI = args.serviceURI;
    }
    if (args.envVars !== undefined && args.envVars !== null) {
      this.envVars = Thrift.copyMap(args.envVars, [null]);
    }
    if (args.dashboardURI !== undefined && args.dashboardURI !== null) {
      this.dashboardURI = args.dashboardURI;
    }
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
  }
};
UserServiceEntry.prototype = {};
UserServiceEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.appDirID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isPublic = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.serviceURI = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.envVars = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.envVars[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.dashboardURI = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserServiceEntry.prototype.write = function(output) {
  output.writeStructBegin('UserServiceEntry');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 2);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.serviceType !== null && this.serviceType !== undefined) {
    output.writeFieldBegin('serviceType', Thrift.Type.STRING, 3);
    output.writeString(this.serviceType);
    output.writeFieldEnd();
  }
  if (this.appDirID !== null && this.appDirID !== undefined) {
    output.writeFieldBegin('appDirID', Thrift.Type.STRING, 4);
    output.writeString(this.appDirID);
    output.writeFieldEnd();
  }
  if (this.isPublic !== null && this.isPublic !== undefined) {
    output.writeFieldBegin('isPublic', Thrift.Type.BOOL, 5);
    output.writeBool(this.isPublic);
    output.writeFieldEnd();
  }
  if (this.serviceURI !== null && this.serviceURI !== undefined) {
    output.writeFieldBegin('serviceURI', Thrift.Type.STRING, 6);
    output.writeString(this.serviceURI);
    output.writeFieldEnd();
  }
  if (this.envVars !== null && this.envVars !== undefined) {
    output.writeFieldBegin('envVars', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envVars));
    for (var kiter8 in this.envVars)
    {
      if (this.envVars.hasOwnProperty(kiter8))
      {
        var viter9 = this.envVars[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.dashboardURI !== null && this.dashboardURI !== undefined) {
    output.writeFieldBegin('dashboardURI', Thrift.Type.STRING, 8);
    output.writeString(this.dashboardURI);
    output.writeFieldEnd();
  }
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 9);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 10);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserServiceLogEntry = module.exports.UserServiceLogEntry = function(args) {
  this.name = null;
  this.data = null;
  this.sinceTs = null;
  this.untilTs = null;
  this.isStripped = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.data !== undefined && args.data !== null) {
      this.data = args.data;
    }
    if (args.sinceTs !== undefined && args.sinceTs !== null) {
      this.sinceTs = args.sinceTs;
    }
    if (args.untilTs !== undefined && args.untilTs !== null) {
      this.untilTs = args.untilTs;
    }
    if (args.isStripped !== undefined && args.isStripped !== null) {
      this.isStripped = args.isStripped;
    }
  }
};
UserServiceLogEntry.prototype = {};
UserServiceLogEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.data = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sinceTs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.untilTs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isStripped = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserServiceLogEntry.prototype.write = function(output) {
  output.writeStructBegin('UserServiceLogEntry');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.STRING, 2);
    output.writeBinary(this.data);
    output.writeFieldEnd();
  }
  if (this.sinceTs !== null && this.sinceTs !== undefined) {
    output.writeFieldBegin('sinceTs', Thrift.Type.STRING, 3);
    output.writeString(this.sinceTs);
    output.writeFieldEnd();
  }
  if (this.untilTs !== null && this.untilTs !== undefined) {
    output.writeFieldBegin('untilTs', Thrift.Type.STRING, 4);
    output.writeString(this.untilTs);
    output.writeFieldEnd();
  }
  if (this.isStripped !== null && this.isStripped !== undefined) {
    output.writeFieldBegin('isStripped', Thrift.Type.BOOL, 5);
    output.writeBool(this.isStripped);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserServiceActivityEntry = module.exports.UserServiceActivityEntry = function(args) {
  this.createdBy = null;
  this.createdAt = null;
  this.serviceStatus = null;
  if (args) {
    if (args.createdBy !== undefined && args.createdBy !== null) {
      this.createdBy = args.createdBy;
    }
    if (args.createdAt !== undefined && args.createdAt !== null) {
      this.createdAt = args.createdAt;
    }
    if (args.serviceStatus !== undefined && args.serviceStatus !== null) {
      this.serviceStatus = args.serviceStatus;
    }
  }
};
UserServiceActivityEntry.prototype = {};
UserServiceActivityEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.createdBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.createdAt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserServiceActivityEntry.prototype.write = function(output) {
  output.writeStructBegin('UserServiceActivityEntry');
  if (this.createdBy !== null && this.createdBy !== undefined) {
    output.writeFieldBegin('createdBy', Thrift.Type.STRING, 1);
    output.writeString(this.createdBy);
    output.writeFieldEnd();
  }
  if (this.createdAt !== null && this.createdAt !== undefined) {
    output.writeFieldBegin('createdAt', Thrift.Type.STRING, 2);
    output.writeString(this.createdAt);
    output.writeFieldEnd();
  }
  if (this.serviceStatus !== null && this.serviceStatus !== undefined) {
    output.writeFieldBegin('serviceStatus', Thrift.Type.STRING, 3);
    output.writeString(this.serviceStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserServiceActivityCollection = module.exports.UserServiceActivityCollection = function(args) {
  this.activities = null;
  this.pagination = null;
  if (args) {
    if (args.activities !== undefined && args.activities !== null) {
      this.activities = Thrift.copyList(args.activities, [ttypes.UserServiceActivityEntry]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
UserServiceActivityCollection.prototype = {};
UserServiceActivityCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size10 = 0;
        var _rtmp314;
        this.activities = [];
        var _etype13 = 0;
        _rtmp314 = input.readListBegin();
        _etype13 = _rtmp314.etype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var elem16 = null;
          elem16 = new ttypes.UserServiceActivityEntry();
          elem16.read(input);
          this.activities.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserServiceActivityCollection.prototype.write = function(output) {
  output.writeStructBegin('UserServiceActivityCollection');
  if (this.activities !== null && this.activities !== undefined) {
    output.writeFieldBegin('activities', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.activities.length);
    for (var iter17 in this.activities)
    {
      if (this.activities.hasOwnProperty(iter17))
      {
        iter17 = this.activities[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserServiceCollection = module.exports.UserServiceCollection = function(args) {
  this.services = null;
  this.pagination = null;
  if (args) {
    if (args.services !== undefined && args.services !== null) {
      this.services = Thrift.copyList(args.services, [ttypes.UserServiceEntry]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
UserServiceCollection.prototype = {};
UserServiceCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.services = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new ttypes.UserServiceEntry();
          elem24.read(input);
          this.services.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserServiceCollection.prototype.write = function(output) {
  output.writeStructBegin('UserServiceCollection');
  if (this.services !== null && this.services !== undefined) {
    output.writeFieldBegin('services', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.services.length);
    for (var iter25 in this.services)
    {
      if (this.services.hasOwnProperty(iter25))
      {
        iter25 = this.services[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '0.1.0';
ttypes.SERVICE_NAME = 'dmp-user-service-manager';
ttypes.ERR_CODE = 64;
ttypes.USER_SERVICE_STOPPED = 'stopped';
ttypes.USER_SERVICE_STOPPING = 'stopping';
ttypes.USER_SERVICE_STARTED = 'started';
ttypes.USER_SERVICE_STARTING = 'starting';
ttypes.USER_SERVICE_FAILED = 'failed';
ttypes.USER_SERVICE_CREATING = 'creating';
ttypes.USER_SERVICE_UPDATING = 'updating';
ttypes.USER_SERVICE_RSHINY = 'rshiny';
ttypes.USER_SERVICE_PYTHON = 'python';
