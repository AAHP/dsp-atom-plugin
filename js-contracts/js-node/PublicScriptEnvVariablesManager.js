//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = require('./script-env_types');
//HELPER FUNCTIONS AND STRUCTURES

var PublicScriptEnvVariablesManager_writeEnvironmentVariables_args = function(args) {
  this.ctx = null;
  this.scriptID = null;
  this.entries = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.scriptID !== undefined && args.scriptID !== null) {
      this.scriptID = args.scriptID;
    }
    if (args.entries !== undefined && args.entries !== null) {
      this.entries = Thrift.copyMap(args.entries, [null]);
    }
  }
};
PublicScriptEnvVariablesManager_writeEnvironmentVariables_args.prototype = {};
PublicScriptEnvVariablesManager_writeEnvironmentVariables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scriptID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.entries = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.entries[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicScriptEnvVariablesManager_writeEnvironmentVariables_args.prototype.write = function(output) {
  output.writeStructBegin('PublicScriptEnvVariablesManager_writeEnvironmentVariables_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.scriptID !== null && this.scriptID !== undefined) {
    output.writeFieldBegin('scriptID', Thrift.Type.STRING, 2);
    output.writeString(this.scriptID);
    output.writeFieldEnd();
  }
  if (this.entries !== null && this.entries !== undefined) {
    output.writeFieldBegin('entries', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.entries));
    for (var kiter8 in this.entries)
    {
      if (this.entries.hasOwnProperty(kiter8))
      {
        var viter9 = this.entries[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicScriptEnvVariablesManager_writeEnvironmentVariables_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicScriptEnvVariablesManager_writeEnvironmentVariables_result.prototype = {};
PublicScriptEnvVariablesManager_writeEnvironmentVariables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicScriptEnvVariablesManager_writeEnvironmentVariables_result.prototype.write = function(output) {
  output.writeStructBegin('PublicScriptEnvVariablesManager_writeEnvironmentVariables_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicScriptEnvVariablesManager_deleteEnvironmentVariables_args = function(args) {
  this.ctx = null;
  this.scriptID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.scriptID !== undefined && args.scriptID !== null) {
      this.scriptID = args.scriptID;
    }
  }
};
PublicScriptEnvVariablesManager_deleteEnvironmentVariables_args.prototype = {};
PublicScriptEnvVariablesManager_deleteEnvironmentVariables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scriptID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicScriptEnvVariablesManager_deleteEnvironmentVariables_args.prototype.write = function(output) {
  output.writeStructBegin('PublicScriptEnvVariablesManager_deleteEnvironmentVariables_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.scriptID !== null && this.scriptID !== undefined) {
    output.writeFieldBegin('scriptID', Thrift.Type.STRING, 2);
    output.writeString(this.scriptID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result.prototype = {};
PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result.prototype.write = function(output) {
  output.writeStructBegin('PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicScriptEnvVariablesManager_readEnvironmentVariables_args = function(args) {
  this.ctx = null;
  this.scriptID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.scriptID !== undefined && args.scriptID !== null) {
      this.scriptID = args.scriptID;
    }
  }
};
PublicScriptEnvVariablesManager_readEnvironmentVariables_args.prototype = {};
PublicScriptEnvVariablesManager_readEnvironmentVariables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.scriptID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicScriptEnvVariablesManager_readEnvironmentVariables_args.prototype.write = function(output) {
  output.writeStructBegin('PublicScriptEnvVariablesManager_readEnvironmentVariables_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.scriptID !== null && this.scriptID !== undefined) {
    output.writeFieldBegin('scriptID', Thrift.Type.STRING, 2);
    output.writeString(this.scriptID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicScriptEnvVariablesManager_readEnvironmentVariables_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyMap(args.success, [null]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicScriptEnvVariablesManager_readEnvironmentVariables_result.prototype = {};
PublicScriptEnvVariablesManager_readEnvironmentVariables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.success = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readString();
          this.success[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicScriptEnvVariablesManager_readEnvironmentVariables_result.prototype.write = function(output) {
  output.writeStructBegin('PublicScriptEnvVariablesManager_readEnvironmentVariables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.MAP, 0);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.success));
    for (var kiter18 in this.success)
    {
      if (this.success.hasOwnProperty(kiter18))
      {
        var viter19 = this.success[kiter18];
        output.writeString(kiter18);
        output.writeString(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicScriptEnvVariablesManagerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
PublicScriptEnvVariablesManagerClient.prototype = {};
PublicScriptEnvVariablesManagerClient.prototype.seqid = function() { return this._seqid; };
PublicScriptEnvVariablesManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };
PublicScriptEnvVariablesManagerClient.prototype.writeEnvironmentVariables = function(ctx, scriptID, entries, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_writeEnvironmentVariables(ctx, scriptID, entries);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_writeEnvironmentVariables(ctx, scriptID, entries);
  }
};

PublicScriptEnvVariablesManagerClient.prototype.send_writeEnvironmentVariables = function(ctx, scriptID, entries) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('writeEnvironmentVariables', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicScriptEnvVariablesManager_writeEnvironmentVariables_args();
  args.ctx = ctx;
  args.scriptID = scriptID;
  args.entries = entries;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicScriptEnvVariablesManagerClient.prototype.recv_writeEnvironmentVariables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicScriptEnvVariablesManager_writeEnvironmentVariables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicScriptEnvVariablesManagerClient.prototype.deleteEnvironmentVariables = function(ctx, scriptID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteEnvironmentVariables(ctx, scriptID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteEnvironmentVariables(ctx, scriptID);
  }
};

PublicScriptEnvVariablesManagerClient.prototype.send_deleteEnvironmentVariables = function(ctx, scriptID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteEnvironmentVariables', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicScriptEnvVariablesManager_deleteEnvironmentVariables_args();
  args.ctx = ctx;
  args.scriptID = scriptID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicScriptEnvVariablesManagerClient.prototype.recv_deleteEnvironmentVariables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicScriptEnvVariablesManagerClient.prototype.readEnvironmentVariables = function(ctx, scriptID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readEnvironmentVariables(ctx, scriptID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readEnvironmentVariables(ctx, scriptID);
  }
};

PublicScriptEnvVariablesManagerClient.prototype.send_readEnvironmentVariables = function(ctx, scriptID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readEnvironmentVariables', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicScriptEnvVariablesManager_readEnvironmentVariables_args();
  args.ctx = ctx;
  args.scriptID = scriptID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicScriptEnvVariablesManagerClient.prototype.recv_readEnvironmentVariables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicScriptEnvVariablesManager_readEnvironmentVariables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readEnvironmentVariables failed: unknown result');
};
var PublicScriptEnvVariablesManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
PublicScriptEnvVariablesManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PublicScriptEnvVariablesManagerProcessor.prototype.process_writeEnvironmentVariables = function(seqid, input, output) {
  var args = new PublicScriptEnvVariablesManager_writeEnvironmentVariables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.writeEnvironmentVariables.length === 3) {
    Q.fcall(this._handler.writeEnvironmentVariables, args.ctx, args.scriptID, args.entries)
      .then(function(result) {
        var result_obj = new PublicScriptEnvVariablesManager_writeEnvironmentVariables_result({success: result});
        output.writeMessageBegin("writeEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicScriptEnvVariablesManager_writeEnvironmentVariables_result(err);
          output.writeMessageBegin("writeEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("writeEnvironmentVariables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.writeEnvironmentVariables(args.ctx, args.scriptID, args.entries, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicScriptEnvVariablesManager_writeEnvironmentVariables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("writeEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("writeEnvironmentVariables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicScriptEnvVariablesManagerProcessor.prototype.process_deleteEnvironmentVariables = function(seqid, input, output) {
  var args = new PublicScriptEnvVariablesManager_deleteEnvironmentVariables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteEnvironmentVariables.length === 2) {
    Q.fcall(this._handler.deleteEnvironmentVariables, args.ctx, args.scriptID)
      .then(function(result) {
        var result_obj = new PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result({success: result});
        output.writeMessageBegin("deleteEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result(err);
          output.writeMessageBegin("deleteEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteEnvironmentVariables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteEnvironmentVariables(args.ctx, args.scriptID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicScriptEnvVariablesManager_deleteEnvironmentVariables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteEnvironmentVariables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicScriptEnvVariablesManagerProcessor.prototype.process_readEnvironmentVariables = function(seqid, input, output) {
  var args = new PublicScriptEnvVariablesManager_readEnvironmentVariables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readEnvironmentVariables.length === 2) {
    Q.fcall(this._handler.readEnvironmentVariables, args.ctx, args.scriptID)
      .then(function(result) {
        var result_obj = new PublicScriptEnvVariablesManager_readEnvironmentVariables_result({success: result});
        output.writeMessageBegin("readEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicScriptEnvVariablesManager_readEnvironmentVariables_result(err);
          output.writeMessageBegin("readEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("readEnvironmentVariables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readEnvironmentVariables(args.ctx, args.scriptID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicScriptEnvVariablesManager_readEnvironmentVariables_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readEnvironmentVariables", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readEnvironmentVariables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
