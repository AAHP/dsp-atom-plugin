//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var Message = module.exports.Message = function(args) {
  this.ID = null;
  this.type = null;
  this.headers = null;
  this.encodedContent = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.headers !== undefined && args.headers !== null) {
      this.headers = Thrift.copyMap(args.headers, [null]);
    }
    if (args.encodedContent !== undefined && args.encodedContent !== null) {
      this.encodedContent = args.encodedContent;
    }
  }
};
Message.prototype = {};
Message.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.type = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.headers = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.headers[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.encodedContent = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Message.prototype.write = function(output) {
  output.writeStructBegin('Message');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I32, 2);
    output.writeI32(this.type);
    output.writeFieldEnd();
  }
  if (this.headers !== null && this.headers !== undefined) {
    output.writeFieldBegin('headers', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.headers));
    for (var kiter8 in this.headers)
    {
      if (this.headers.hasOwnProperty(kiter8))
      {
        var viter9 = this.headers[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.encodedContent !== null && this.encodedContent !== undefined) {
    output.writeFieldBegin('encodedContent', Thrift.Type.STRING, 4);
    output.writeBinary(this.encodedContent);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WSPingEvent = module.exports.WSPingEvent = function(args) {
  this.serverTime = null;
  if (args) {
    if (args.serverTime !== undefined && args.serverTime !== null) {
      this.serverTime = args.serverTime;
    }
  }
};
WSPingEvent.prototype = {};
WSPingEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serverTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WSPingEvent.prototype.write = function(output) {
  output.writeStructBegin('WSPingEvent');
  if (this.serverTime !== null && this.serverTime !== undefined) {
    output.writeFieldBegin('serverTime', Thrift.Type.STRING, 1);
    output.writeString(this.serverTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'shared-messages';
ttypes.VERSION = '0.0.1';
ttypes.HEADER_KEY_IDENTITY = 'identity';
ttypes.TYPE_ERROR = 1;
ttypes.TYPE_NOTIFICATION = 2;
ttypes.TYPE_WS_PING = 3;
ttypes.MESSAGE_TYPE_TASK_BROKER_CANCEL_TASK = 4;
ttypes.MESSAGE_TYPE_TASK_BROKER_CANCEL_SUCCESS = 5;
ttypes.MESSAGE_TYPE_TASK_BROKER_CANCEL_FAIL = 6;
ttypes.MESSAGE_TYPE_TASK_WORKER_START_TASK = 7;
ttypes.MESSAGE_TYPE_TASK_WORKER_COMPLETE_TASK = 8;
