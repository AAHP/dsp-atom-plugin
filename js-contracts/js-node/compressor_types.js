//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var mime_ttypes = require('./mime_types');
var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var CompressTaskPayload = module.exports.CompressTaskPayload = function(args) {
  this.IDs = null;
  this.fileName = null;
  this.vfsParentID = null;
  this.mimeType = null;
  this.secret = null;
  if (args) {
    if (args.IDs !== undefined && args.IDs !== null) {
      this.IDs = Thrift.copyList(args.IDs, [null]);
    }
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.vfsParentID !== undefined && args.vfsParentID !== null) {
      this.vfsParentID = args.vfsParentID;
    }
    if (args.mimeType !== undefined && args.mimeType !== null) {
      this.mimeType = args.mimeType;
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    }
  }
};
CompressTaskPayload.prototype = {};
CompressTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.IDs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.IDs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.vfsParentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompressTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('CompressTaskPayload');
  if (this.IDs !== null && this.IDs !== undefined) {
    output.writeFieldBegin('IDs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.IDs.length);
    for (var iter7 in this.IDs)
    {
      if (this.IDs.hasOwnProperty(iter7))
      {
        iter7 = this.IDs[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 2);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.vfsParentID !== null && this.vfsParentID !== undefined) {
    output.writeFieldBegin('vfsParentID', Thrift.Type.STRING, 3);
    output.writeString(this.vfsParentID);
    output.writeFieldEnd();
  }
  if (this.mimeType !== null && this.mimeType !== undefined) {
    output.writeFieldBegin('mimeType', Thrift.Type.STRING, 4);
    output.writeString(this.mimeType);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 5);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecompressTaskPayload = module.exports.DecompressTaskPayload = function(args) {
  this.ID = null;
  this.parentID = null;
  this.secret = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    }
  }
};
DecompressTaskPayload.prototype = {};
DecompressTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecompressTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('DecompressTaskPayload');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 3);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ListArchiveTaskPayload = module.exports.ListArchiveTaskPayload = function(args) {
  this.ID = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
ListArchiveTaskPayload.prototype = {};
ListArchiveTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ListArchiveTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('ListArchiveTaskPayload');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '0.2.0';
ttypes.ERR_CODE = 38;
ttypes.SUPPORTED_MIME = ['application/zip','application/rar','application/x-bzip','application/x-gzip','application/x-7z-compressed'];
ttypes.SERVICE_NAME = 'dmp-processor-compressor';
ttypes.AMQP_ROUTING_KEY = 'dmp.events.compressor';
ttypes.TASK_COMPRESS = 'task-compress';
ttypes.TASK_DECOMPRESS = 'task-decompress';
ttypes.TASK_LIST_ARCHIVE = 'task-list-archive';
