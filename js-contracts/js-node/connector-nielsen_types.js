//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var connectors_ttypes = require('./connectors_types');
var csv_ttypes = require('./csv_types');


var ttypes = module.exports = {};
var NielsenQueryTaskPayload = module.exports.NielsenQueryTaskPayload = function(args) {
  this.queryID = null;
  this.vfsParentID = null;
  this.fileName = null;
  this.fileFormat = null;
  this.addColumnNames = null;
  this.emptyFieldValue = null;
  if (args) {
    if (args.queryID !== undefined && args.queryID !== null) {
      this.queryID = args.queryID;
    }
    if (args.vfsParentID !== undefined && args.vfsParentID !== null) {
      this.vfsParentID = args.vfsParentID;
    }
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.fileFormat !== undefined && args.fileFormat !== null) {
      this.fileFormat = new csv_ttypes.FileFormat(args.fileFormat);
    }
    if (args.addColumnNames !== undefined && args.addColumnNames !== null) {
      this.addColumnNames = args.addColumnNames;
    }
    if (args.emptyFieldValue !== undefined && args.emptyFieldValue !== null) {
      this.emptyFieldValue = args.emptyFieldValue;
    }
  }
};
NielsenQueryTaskPayload.prototype = {};
NielsenQueryTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vfsParentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.fileFormat = new csv_ttypes.FileFormat();
        this.fileFormat.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.addColumnNames = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.emptyFieldValue = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NielsenQueryTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('NielsenQueryTaskPayload');
  if (this.queryID !== null && this.queryID !== undefined) {
    output.writeFieldBegin('queryID', Thrift.Type.STRING, 1);
    output.writeString(this.queryID);
    output.writeFieldEnd();
  }
  if (this.vfsParentID !== null && this.vfsParentID !== undefined) {
    output.writeFieldBegin('vfsParentID', Thrift.Type.STRING, 2);
    output.writeString(this.vfsParentID);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.fileFormat !== null && this.fileFormat !== undefined) {
    output.writeFieldBegin('fileFormat', Thrift.Type.STRUCT, 4);
    this.fileFormat.write(output);
    output.writeFieldEnd();
  }
  if (this.addColumnNames !== null && this.addColumnNames !== undefined) {
    output.writeFieldBegin('addColumnNames', Thrift.Type.BOOL, 5);
    output.writeBool(this.addColumnNames);
    output.writeFieldEnd();
  }
  if (this.emptyFieldValue !== null && this.emptyFieldValue !== undefined) {
    output.writeFieldBegin('emptyFieldValue', Thrift.Type.STRING, 6);
    output.writeString(this.emptyFieldValue);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NielsenQueryInfo = module.exports.NielsenQueryInfo = function(args) {
  this.ID = null;
  this.Name = null;
  this.Description = null;
  this.Json = null;
  this.OwnerID = null;
  this.createdOn = null;
  this.updatedOn = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.Name !== undefined && args.Name !== null) {
      this.Name = args.Name;
    }
    if (args.Description !== undefined && args.Description !== null) {
      this.Description = args.Description;
    }
    if (args.Json !== undefined && args.Json !== null) {
      this.Json = args.Json;
    }
    if (args.OwnerID !== undefined && args.OwnerID !== null) {
      this.OwnerID = args.OwnerID;
    }
    if (args.createdOn !== undefined && args.createdOn !== null) {
      this.createdOn = args.createdOn;
    }
    if (args.updatedOn !== undefined && args.updatedOn !== null) {
      this.updatedOn = args.updatedOn;
    }
  }
};
NielsenQueryInfo.prototype = {};
NielsenQueryInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.Name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.Description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.Json = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.OwnerID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.createdOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.updatedOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NielsenQueryInfo.prototype.write = function(output) {
  output.writeStructBegin('NielsenQueryInfo');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.Name !== null && this.Name !== undefined) {
    output.writeFieldBegin('Name', Thrift.Type.STRING, 2);
    output.writeString(this.Name);
    output.writeFieldEnd();
  }
  if (this.Description !== null && this.Description !== undefined) {
    output.writeFieldBegin('Description', Thrift.Type.STRING, 3);
    output.writeString(this.Description);
    output.writeFieldEnd();
  }
  if (this.Json !== null && this.Json !== undefined) {
    output.writeFieldBegin('Json', Thrift.Type.STRING, 4);
    output.writeString(this.Json);
    output.writeFieldEnd();
  }
  if (this.OwnerID !== null && this.OwnerID !== undefined) {
    output.writeFieldBegin('OwnerID', Thrift.Type.STRING, 5);
    output.writeString(this.OwnerID);
    output.writeFieldEnd();
  }
  if (this.createdOn !== null && this.createdOn !== undefined) {
    output.writeFieldBegin('createdOn', Thrift.Type.STRING, 6);
    output.writeString(this.createdOn);
    output.writeFieldEnd();
  }
  if (this.updatedOn !== null && this.updatedOn !== undefined) {
    output.writeFieldBegin('updatedOn', Thrift.Type.STRING, 7);
    output.writeString(this.updatedOn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NielsenQueryCollection = module.exports.NielsenQueryCollection = function(args) {
  this.objects = null;
  this.pagination = null;
  if (args) {
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [ttypes.NielsenQueryInfo]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
NielsenQueryCollection.prototype = {};
NielsenQueryCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.objects = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.NielsenQueryInfo();
          elem6.read(input);
          this.objects.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NielsenQueryCollection.prototype.write = function(output) {
  output.writeStructBegin('NielsenQueryCollection');
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.objects.length);
    for (var iter7 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter7))
      {
        iter7 = this.objects[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'dmp-connector-nielsen';
ttypes.VERSION = '0.3.0';
ttypes.TASK_NIELSEN_EXECUTE = 'task-nielsen-execute';
ttypes.ERR_CODE = 63;
ttypes.ExtraQueryDescription = 'description';
ttypes.ExtraQueryJson = 'json';
