//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var TaskBrokerCancelTask = module.exports.TaskBrokerCancelTask = function(args) {
  this.taskID = null;
  this.principalID = null;
  if (args) {
    if (args.taskID !== undefined && args.taskID !== null) {
      this.taskID = args.taskID;
    }
    if (args.principalID !== undefined && args.principalID !== null) {
      this.principalID = args.principalID;
    }
  }
};
TaskBrokerCancelTask.prototype = {};
TaskBrokerCancelTask.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskBrokerCancelTask.prototype.write = function(output) {
  output.writeStructBegin('TaskBrokerCancelTask');
  if (this.taskID !== null && this.taskID !== undefined) {
    output.writeFieldBegin('taskID', Thrift.Type.STRING, 1);
    output.writeString(this.taskID);
    output.writeFieldEnd();
  }
  if (this.principalID !== null && this.principalID !== undefined) {
    output.writeFieldBegin('principalID', Thrift.Type.STRING, 2);
    output.writeString(this.principalID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskWorkerTaskInfo = module.exports.TaskWorkerTaskInfo = function(args) {
  this.taskID = null;
  this.taskName = null;
  if (args) {
    if (args.taskID !== undefined && args.taskID !== null) {
      this.taskID = args.taskID;
    }
    if (args.taskName !== undefined && args.taskName !== null) {
      this.taskName = args.taskName;
    }
  }
};
TaskWorkerTaskInfo.prototype = {};
TaskWorkerTaskInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.taskName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskWorkerTaskInfo.prototype.write = function(output) {
  output.writeStructBegin('TaskWorkerTaskInfo');
  if (this.taskID !== null && this.taskID !== undefined) {
    output.writeFieldBegin('taskID', Thrift.Type.STRING, 1);
    output.writeString(this.taskID);
    output.writeFieldEnd();
  }
  if (this.taskName !== null && this.taskName !== undefined) {
    output.writeFieldBegin('taskName', Thrift.Type.STRING, 2);
    output.writeString(this.taskName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskParameters = module.exports.TaskParameters = function(args) {
  this.ctx = null;
  this.taskName = null;
  this.taskPayload = null;
  this.taskId = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.taskName !== undefined && args.taskName !== null) {
      this.taskName = args.taskName;
    }
    if (args.taskPayload !== undefined && args.taskPayload !== null) {
      this.taskPayload = args.taskPayload;
    }
    if (args.taskId !== undefined && args.taskId !== null) {
      this.taskId = args.taskId;
    }
  }
};
TaskParameters.prototype = {};
TaskParameters.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.taskName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.taskPayload = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.taskId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskParameters.prototype.write = function(output) {
  output.writeStructBegin('TaskParameters');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.taskName !== null && this.taskName !== undefined) {
    output.writeFieldBegin('taskName', Thrift.Type.STRING, 2);
    output.writeString(this.taskName);
    output.writeFieldEnd();
  }
  if (this.taskPayload !== null && this.taskPayload !== undefined) {
    output.writeFieldBegin('taskPayload', Thrift.Type.STRING, 3);
    output.writeString(this.taskPayload);
    output.writeFieldEnd();
  }
  if (this.taskId !== null && this.taskId !== undefined) {
    output.writeFieldBegin('taskId', Thrift.Type.STRING, 4);
    output.writeString(this.taskId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskInfo = module.exports.TaskInfo = function(args) {
  this.taskID = null;
  this.principalID = null;
  this.taskName = null;
  this.startTime = null;
  this.endTime = null;
  this.taskStatus = null;
  this.taskOutput = null;
  this.taskComment = null;
  if (args) {
    if (args.taskID !== undefined && args.taskID !== null) {
      this.taskID = args.taskID;
    }
    if (args.principalID !== undefined && args.principalID !== null) {
      this.principalID = args.principalID;
    }
    if (args.taskName !== undefined && args.taskName !== null) {
      this.taskName = args.taskName;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.taskStatus !== undefined && args.taskStatus !== null) {
      this.taskStatus = args.taskStatus;
    }
    if (args.taskOutput !== undefined && args.taskOutput !== null) {
      this.taskOutput = args.taskOutput;
    }
    if (args.taskComment !== undefined && args.taskComment !== null) {
      this.taskComment = args.taskComment;
    }
  }
};
TaskInfo.prototype = {};
TaskInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.taskName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.taskStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.taskOutput = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.taskComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskInfo.prototype.write = function(output) {
  output.writeStructBegin('TaskInfo');
  if (this.taskID !== null && this.taskID !== undefined) {
    output.writeFieldBegin('taskID', Thrift.Type.STRING, 1);
    output.writeString(this.taskID);
    output.writeFieldEnd();
  }
  if (this.principalID !== null && this.principalID !== undefined) {
    output.writeFieldBegin('principalID', Thrift.Type.STRING, 2);
    output.writeString(this.principalID);
    output.writeFieldEnd();
  }
  if (this.taskName !== null && this.taskName !== undefined) {
    output.writeFieldBegin('taskName', Thrift.Type.STRING, 3);
    output.writeString(this.taskName);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 4);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 5);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.taskStatus !== null && this.taskStatus !== undefined) {
    output.writeFieldBegin('taskStatus', Thrift.Type.STRING, 6);
    output.writeString(this.taskStatus);
    output.writeFieldEnd();
  }
  if (this.taskOutput !== null && this.taskOutput !== undefined) {
    output.writeFieldBegin('taskOutput', Thrift.Type.STRING, 7);
    output.writeString(this.taskOutput);
    output.writeFieldEnd();
  }
  if (this.taskComment !== null && this.taskComment !== undefined) {
    output.writeFieldBegin('taskComment', Thrift.Type.STRING, 8);
    output.writeString(this.taskComment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskInfoCollection = module.exports.TaskInfoCollection = function(args) {
  this.tasks = null;
  this.pagination = null;
  if (args) {
    if (args.tasks !== undefined && args.tasks !== null) {
      this.tasks = Thrift.copyList(args.tasks, [ttypes.TaskInfo]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
TaskInfoCollection.prototype = {};
TaskInfoCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tasks = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.TaskInfo();
          elem6.read(input);
          this.tasks.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskInfoCollection.prototype.write = function(output) {
  output.writeStructBegin('TaskInfoCollection');
  if (this.tasks !== null && this.tasks !== undefined) {
    output.writeFieldBegin('tasks', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.tasks.length);
    for (var iter7 in this.tasks)
    {
      if (this.tasks.hasOwnProperty(iter7))
      {
        iter7 = this.tasks[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskInfoFiter = module.exports.TaskInfoFiter = function(args) {
  this.taskNames = null;
  this.allUsers = null;
  this.allStatus = null;
  if (args) {
    if (args.taskNames !== undefined && args.taskNames !== null) {
      this.taskNames = Thrift.copyList(args.taskNames, [null]);
    }
    if (args.allUsers !== undefined && args.allUsers !== null) {
      this.allUsers = args.allUsers;
    }
    if (args.allStatus !== undefined && args.allStatus !== null) {
      this.allStatus = args.allStatus;
    }
  }
};
TaskInfoFiter.prototype = {};
TaskInfoFiter.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.taskNames = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.taskNames.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.allUsers = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.allStatus = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskInfoFiter.prototype.write = function(output) {
  output.writeStructBegin('TaskInfoFiter');
  if (this.taskNames !== null && this.taskNames !== undefined) {
    output.writeFieldBegin('taskNames', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.taskNames.length);
    for (var iter15 in this.taskNames)
    {
      if (this.taskNames.hasOwnProperty(iter15))
      {
        iter15 = this.taskNames[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.allUsers !== null && this.allUsers !== undefined) {
    output.writeFieldBegin('allUsers', Thrift.Type.BOOL, 2);
    output.writeBool(this.allUsers);
    output.writeFieldEnd();
  }
  if (this.allStatus !== null && this.allStatus !== undefined) {
    output.writeFieldBegin('allStatus', Thrift.Type.BOOL, 3);
    output.writeBool(this.allStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.BROKER_SERVICE_NAME = 'task-broker';
ttypes.WORKER_SERVICE_NAME = 'task-worker';
ttypes.VERSION = '0.2.0';
ttypes.AMQP_ROUTING_KEY = 'events.task-broker';
ttypes.ERR_CODE = 178;
