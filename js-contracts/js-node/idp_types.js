//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var Client = module.exports.Client = function(args) {
  this.ID = null;
  this.secret = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.secret !== undefined && args.secret !== null) {
      this.secret = args.secret;
    }
  }
};
Client.prototype = {};
Client.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.secret = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Client.prototype.write = function(output) {
  output.writeStructBegin('Client');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.secret !== null && this.secret !== undefined) {
    output.writeFieldBegin('secret', Thrift.Type.STRING, 2);
    output.writeString(this.secret);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenResponse = module.exports.TokenResponse = function(args) {
  this.accessToken = null;
  this.tokenType = null;
  this.idToken = null;
  this.expiresIn = null;
  if (args) {
    if (args.accessToken !== undefined && args.accessToken !== null) {
      this.accessToken = args.accessToken;
    }
    if (args.tokenType !== undefined && args.tokenType !== null) {
      this.tokenType = args.tokenType;
    }
    if (args.idToken !== undefined && args.idToken !== null) {
      this.idToken = args.idToken;
    }
    if (args.expiresIn !== undefined && args.expiresIn !== null) {
      this.expiresIn = args.expiresIn;
    }
  }
};
TokenResponse.prototype = {};
TokenResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.accessToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tokenType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.idToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.expiresIn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TokenResponse.prototype.write = function(output) {
  output.writeStructBegin('TokenResponse');
  if (this.accessToken !== null && this.accessToken !== undefined) {
    output.writeFieldBegin('accessToken', Thrift.Type.STRING, 1);
    output.writeString(this.accessToken);
    output.writeFieldEnd();
  }
  if (this.tokenType !== null && this.tokenType !== undefined) {
    output.writeFieldBegin('tokenType', Thrift.Type.STRING, 2);
    output.writeString(this.tokenType);
    output.writeFieldEnd();
  }
  if (this.idToken !== null && this.idToken !== undefined) {
    output.writeFieldBegin('idToken', Thrift.Type.STRING, 3);
    output.writeString(this.idToken);
    output.writeFieldEnd();
  }
  if (this.expiresIn !== null && this.expiresIn !== undefined) {
    output.writeFieldBegin('expiresIn', Thrift.Type.STRING, 4);
    output.writeString(this.expiresIn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserInfo = module.exports.UserInfo = function(args) {
  this.email = null;
  this.groups = null;
  this.givenName = null;
  this.familyName = null;
  this.pcas = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.givenName !== undefined && args.givenName !== null) {
      this.givenName = args.givenName;
    }
    if (args.familyName !== undefined && args.familyName !== null) {
      this.familyName = args.familyName;
    }
    if (args.pcas !== undefined && args.pcas !== null) {
      this.pcas = Thrift.copyList(args.pcas, [null]);
    }
  }
};
UserInfo.prototype = {};
UserInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.groups = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.groups.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.givenName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.familyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.pcas = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.pcas.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserInfo.prototype.write = function(output) {
  output.writeStructBegin('UserInfo');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.groups.length);
    for (var iter14 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter14))
      {
        iter14 = this.groups[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.givenName !== null && this.givenName !== undefined) {
    output.writeFieldBegin('givenName', Thrift.Type.STRING, 3);
    output.writeString(this.givenName);
    output.writeFieldEnd();
  }
  if (this.familyName !== null && this.familyName !== undefined) {
    output.writeFieldBegin('familyName', Thrift.Type.STRING, 4);
    output.writeString(this.familyName);
    output.writeFieldEnd();
  }
  if (this.pcas !== null && this.pcas !== undefined) {
    output.writeFieldBegin('pcas', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.pcas.length);
    for (var iter15 in this.pcas)
    {
      if (this.pcas.hasOwnProperty(iter15))
      {
        iter15 = this.pcas[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '0.3.0';
ttypes.ERR_CODE = 160;
ttypes.SERVICE_NAME = '4cas-idp';
ttypes.SERVICE_NAME_INTERNAL = '4cas-idp-internal';
