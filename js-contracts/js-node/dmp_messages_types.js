//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var vfs_ttypes = require('./vfs_types');
var messages_ttypes = require('./messages_types');


var ttypes = module.exports = {};
var FileIOEventHeader = module.exports.FileIOEventHeader = function(args) {
  this.ioContext = null;
  this.vfsID = null;
  this.fileName = null;
  this.identity = null;
  this.parentVfsID = null;
  this.objectType = 2;
  this.status = 1;
  this.fullPath = '';
  if (args) {
    if (args.ioContext !== undefined && args.ioContext !== null) {
      this.ioContext = args.ioContext;
    }
    if (args.vfsID !== undefined && args.vfsID !== null) {
      this.vfsID = args.vfsID;
    }
    if (args.fileName !== undefined && args.fileName !== null) {
      this.fileName = args.fileName;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = new common_ttypes.Identity(args.identity);
    }
    if (args.parentVfsID !== undefined && args.parentVfsID !== null) {
      this.parentVfsID = args.parentVfsID;
    }
    if (args.objectType !== undefined && args.objectType !== null) {
      this.objectType = args.objectType;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.fullPath !== undefined && args.fullPath !== null) {
      this.fullPath = args.fullPath;
    }
  }
};
FileIOEventHeader.prototype = {};
FileIOEventHeader.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.ioContext = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vfsID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.fileName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.identity = new common_ttypes.Identity();
        this.identity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.parentVfsID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.objectType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BYTE) {
        this.status = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.fullPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileIOEventHeader.prototype.write = function(output) {
  output.writeStructBegin('FileIOEventHeader');
  if (this.ioContext !== null && this.ioContext !== undefined) {
    output.writeFieldBegin('ioContext', Thrift.Type.BYTE, 1);
    output.writeByte(this.ioContext);
    output.writeFieldEnd();
  }
  if (this.vfsID !== null && this.vfsID !== undefined) {
    output.writeFieldBegin('vfsID', Thrift.Type.STRING, 2);
    output.writeString(this.vfsID);
    output.writeFieldEnd();
  }
  if (this.fileName !== null && this.fileName !== undefined) {
    output.writeFieldBegin('fileName', Thrift.Type.STRING, 3);
    output.writeString(this.fileName);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRUCT, 4);
    this.identity.write(output);
    output.writeFieldEnd();
  }
  if (this.parentVfsID !== null && this.parentVfsID !== undefined) {
    output.writeFieldBegin('parentVfsID', Thrift.Type.STRING, 5);
    output.writeString(this.parentVfsID);
    output.writeFieldEnd();
  }
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.BYTE, 6);
    output.writeByte(this.objectType);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BYTE, 7);
    output.writeByte(this.status);
    output.writeFieldEnd();
  }
  if (this.fullPath !== null && this.fullPath !== undefined) {
    output.writeFieldBegin('fullPath', Thrift.Type.STRING, 8);
    output.writeString(this.fullPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileIOCreatedEvent = module.exports.FileIOCreatedEvent = function(args) {
  this.header = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
  }
};
FileIOCreatedEvent.prototype = {};
FileIOCreatedEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileIOCreatedEvent.prototype.write = function(output) {
  output.writeStructBegin('FileIOCreatedEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileIOProgressEvent = module.exports.FileIOProgressEvent = function(args) {
  this.header = null;
  this.byteCount = null;
  this.byteTotal = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.byteCount !== undefined && args.byteCount !== null) {
      this.byteCount = args.byteCount;
    }
    if (args.byteTotal !== undefined && args.byteTotal !== null) {
      this.byteTotal = args.byteTotal;
    }
  }
};
FileIOProgressEvent.prototype = {};
FileIOProgressEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.byteCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.byteTotal = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileIOProgressEvent.prototype.write = function(output) {
  output.writeStructBegin('FileIOProgressEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.byteCount !== null && this.byteCount !== undefined) {
    output.writeFieldBegin('byteCount', Thrift.Type.I64, 2);
    output.writeI64(this.byteCount);
    output.writeFieldEnd();
  }
  if (this.byteTotal !== null && this.byteTotal !== undefined) {
    output.writeFieldBegin('byteTotal', Thrift.Type.I64, 3);
    output.writeI64(this.byteTotal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileIOCompletedEvent = module.exports.FileIOCompletedEvent = function(args) {
  this.header = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
  }
};
FileIOCompletedEvent.prototype = {};
FileIOCompletedEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileIOCompletedEvent.prototype.write = function(output) {
  output.writeStructBegin('FileIOCompletedEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileIODeletedEvent = module.exports.FileIODeletedEvent = function(args) {
  this.header = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
  }
};
FileIODeletedEvent.prototype = {};
FileIODeletedEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileIODeletedEvent.prototype.write = function(output) {
  output.writeStructBegin('FileIODeletedEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileIOUpdatedEvent = module.exports.FileIOUpdatedEvent = function(args) {
  this.header = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
  }
};
FileIOUpdatedEvent.prototype = {};
FileIOUpdatedEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileIOUpdatedEvent.prototype.write = function(output) {
  output.writeStructBegin('FileIOUpdatedEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileIOErrorEvent = module.exports.FileIOErrorEvent = function(args) {
  this.header = null;
  this.message = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
FileIOErrorEvent.prototype = {};
FileIOErrorEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileIOErrorEvent.prototype.write = function(output) {
  output.writeStructBegin('FileIOErrorEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WSPingEvent = module.exports.WSPingEvent = function(args) {
  this.serverTime = null;
  if (args) {
    if (args.serverTime !== undefined && args.serverTime !== null) {
      this.serverTime = args.serverTime;
    }
  }
};
WSPingEvent.prototype = {};
WSPingEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.serverTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WSPingEvent.prototype.write = function(output) {
  output.writeStructBegin('WSPingEvent');
  if (this.serverTime !== null && this.serverTime !== undefined) {
    output.writeFieldBegin('serverTime', Thrift.Type.STRING, 1);
    output.writeString(this.serverTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileProcessingSuccessEvent = module.exports.FileProcessingSuccessEvent = function(args) {
  this.header = null;
  this.eventType = null;
  this.target = null;
  this.additionalPayload = null;
  this.serviceID = 'unknown';
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = new ttypes.FileIOEventHeader(args.target);
    }
    if (args.additionalPayload !== undefined && args.additionalPayload !== null) {
      this.additionalPayload = args.additionalPayload;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
  }
};
FileProcessingSuccessEvent.prototype = {};
FileProcessingSuccessEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.target = new ttypes.FileIOEventHeader();
        this.target.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.additionalPayload = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileProcessingSuccessEvent.prototype.write = function(output) {
  output.writeStructBegin('FileProcessingSuccessEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 2);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRUCT, 3);
    this.target.write(output);
    output.writeFieldEnd();
  }
  if (this.additionalPayload !== null && this.additionalPayload !== undefined) {
    output.writeFieldBegin('additionalPayload', Thrift.Type.STRING, 4);
    output.writeString(this.additionalPayload);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 5);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileProcessingFailEvent = module.exports.FileProcessingFailEvent = function(args) {
  this.header = null;
  this.eventType = null;
  this.message = null;
  this.report = null;
  this.serviceID = 'unknown';
  this.isCancelled = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.report !== undefined && args.report !== null) {
      this.report = new ttypes.FileIOEventHeader(args.report);
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.isCancelled !== undefined && args.isCancelled !== null) {
      this.isCancelled = args.isCancelled;
    }
  }
};
FileProcessingFailEvent.prototype = {};
FileProcessingFailEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.report = new ttypes.FileIOEventHeader();
        this.report.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isCancelled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileProcessingFailEvent.prototype.write = function(output) {
  output.writeStructBegin('FileProcessingFailEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 2);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.report !== null && this.report !== undefined) {
    output.writeFieldBegin('report', Thrift.Type.STRUCT, 4);
    this.report.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 5);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.isCancelled !== null && this.isCancelled !== undefined) {
    output.writeFieldBegin('isCancelled', Thrift.Type.BOOL, 6);
    output.writeBool(this.isCancelled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileDownloadEnabledEvent = module.exports.FileDownloadEnabledEvent = function(args) {
  this.header = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
  }
};
FileDownloadEnabledEvent.prototype = {};
FileDownloadEnabledEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileDownloadEnabledEvent.prototype.write = function(output) {
  output.writeStructBegin('FileDownloadEnabledEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileDownloadDisabledEvent = module.exports.FileDownloadDisabledEvent = function(args) {
  this.header = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
  }
};
FileDownloadDisabledEvent.prototype = {};
FileDownloadDisabledEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileDownloadDisabledEvent.prototype.write = function(output) {
  output.writeStructBegin('FileDownloadDisabledEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSV2SQLImportSuccessEvent = module.exports.CSV2SQLImportSuccessEvent = function(args) {
  this.header = null;
  this.serviceID = 'unknown';
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
  }
};
CSV2SQLImportSuccessEvent.prototype = {};
CSV2SQLImportSuccessEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSV2SQLImportSuccessEvent.prototype.write = function(output) {
  output.writeStructBegin('CSV2SQLImportSuccessEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 2);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSV2SQLImportFailEvent = module.exports.CSV2SQLImportFailEvent = function(args) {
  this.header = null;
  this.message = null;
  this.serviceID = 'unknown';
  this.isCancelled = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.isCancelled !== undefined && args.isCancelled !== null) {
      this.isCancelled = args.isCancelled;
    }
  }
};
CSV2SQLImportFailEvent.prototype = {};
CSV2SQLImportFailEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isCancelled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSV2SQLImportFailEvent.prototype.write = function(output) {
  output.writeStructBegin('CSV2SQLImportFailEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 3);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.isCancelled !== null && this.isCancelled !== undefined) {
    output.writeFieldBegin('isCancelled', Thrift.Type.BOOL, 4);
    output.writeBool(this.isCancelled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSV2SQLExportSuccessEvent = module.exports.CSV2SQLExportSuccessEvent = function(args) {
  this.header = null;
  this.tableName = null;
  this.serviceID = 'unknown';
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
  }
};
CSV2SQLExportSuccessEvent.prototype = {};
CSV2SQLExportSuccessEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSV2SQLExportSuccessEvent.prototype.write = function(output) {
  output.writeStructBegin('CSV2SQLExportSuccessEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 3);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CSV2SQLExportFailEvent = module.exports.CSV2SQLExportFailEvent = function(args) {
  this.header = null;
  this.tableName = null;
  this.message = null;
  this.serviceID = 'unknown';
  this.isCancelled = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.tableName !== undefined && args.tableName !== null) {
      this.tableName = args.tableName;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.isCancelled !== undefined && args.isCancelled !== null) {
      this.isCancelled = args.isCancelled;
    }
  }
};
CSV2SQLExportFailEvent.prototype = {};
CSV2SQLExportFailEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tableName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.isCancelled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CSV2SQLExportFailEvent.prototype.write = function(output) {
  output.writeStructBegin('CSV2SQLExportFailEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.tableName !== null && this.tableName !== undefined) {
    output.writeFieldBegin('tableName', Thrift.Type.STRING, 2);
    output.writeString(this.tableName);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 3);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 4);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.isCancelled !== null && this.isCancelled !== undefined) {
    output.writeFieldBegin('isCancelled', Thrift.Type.BOOL, 5);
    output.writeBool(this.isCancelled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskBrokerCancelTask = module.exports.TaskBrokerCancelTask = function(args) {
  this.taskID = null;
  this.principalID = null;
  if (args) {
    if (args.taskID !== undefined && args.taskID !== null) {
      this.taskID = args.taskID;
    }
    if (args.principalID !== undefined && args.principalID !== null) {
      this.principalID = args.principalID;
    }
  }
};
TaskBrokerCancelTask.prototype = {};
TaskBrokerCancelTask.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskBrokerCancelTask.prototype.write = function(output) {
  output.writeStructBegin('TaskBrokerCancelTask');
  if (this.taskID !== null && this.taskID !== undefined) {
    output.writeFieldBegin('taskID', Thrift.Type.STRING, 1);
    output.writeString(this.taskID);
    output.writeFieldEnd();
  }
  if (this.principalID !== null && this.principalID !== undefined) {
    output.writeFieldBegin('principalID', Thrift.Type.STRING, 2);
    output.writeString(this.principalID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScriptExecutingStartEvent = module.exports.ScriptExecutingStartEvent = function(args) {
  this.script = null;
  this.eventType = null;
  this.serviceID = 'unknown';
  if (args) {
    if (args.script !== undefined && args.script !== null) {
      this.script = new ttypes.FileIOEventHeader(args.script);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
  }
};
ScriptExecutingStartEvent.prototype = {};
ScriptExecutingStartEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.script = new ttypes.FileIOEventHeader();
        this.script.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptExecutingStartEvent.prototype.write = function(output) {
  output.writeStructBegin('ScriptExecutingStartEvent');
  if (this.script !== null && this.script !== undefined) {
    output.writeFieldBegin('script', Thrift.Type.STRUCT, 1);
    this.script.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 2);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 5);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScriptExecutingSuccessEvent = module.exports.ScriptExecutingSuccessEvent = function(args) {
  this.script = null;
  this.workingDir = null;
  this.eventType = null;
  this.serviceID = 'unknown';
  if (args) {
    if (args.script !== undefined && args.script !== null) {
      this.script = new ttypes.FileIOEventHeader(args.script);
    }
    if (args.workingDir !== undefined && args.workingDir !== null) {
      this.workingDir = new ttypes.FileIOEventHeader(args.workingDir);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
  }
};
ScriptExecutingSuccessEvent.prototype = {};
ScriptExecutingSuccessEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.script = new ttypes.FileIOEventHeader();
        this.script.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.workingDir = new ttypes.FileIOEventHeader();
        this.workingDir.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptExecutingSuccessEvent.prototype.write = function(output) {
  output.writeStructBegin('ScriptExecutingSuccessEvent');
  if (this.script !== null && this.script !== undefined) {
    output.writeFieldBegin('script', Thrift.Type.STRUCT, 1);
    this.script.write(output);
    output.writeFieldEnd();
  }
  if (this.workingDir !== null && this.workingDir !== undefined) {
    output.writeFieldBegin('workingDir', Thrift.Type.STRUCT, 2);
    this.workingDir.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 3);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 4);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScriptExecutingFailEvent = module.exports.ScriptExecutingFailEvent = function(args) {
  this.script = null;
  this.workingDir = null;
  this.eventType = null;
  this.message = null;
  this.serviceID = 'unknown';
  this.isCancelled = null;
  if (args) {
    if (args.script !== undefined && args.script !== null) {
      this.script = new ttypes.FileIOEventHeader(args.script);
    }
    if (args.workingDir !== undefined && args.workingDir !== null) {
      this.workingDir = new ttypes.FileIOEventHeader(args.workingDir);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.isCancelled !== undefined && args.isCancelled !== null) {
      this.isCancelled = args.isCancelled;
    }
  }
};
ScriptExecutingFailEvent.prototype = {};
ScriptExecutingFailEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.script = new ttypes.FileIOEventHeader();
        this.script.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.workingDir = new ttypes.FileIOEventHeader();
        this.workingDir.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isCancelled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScriptExecutingFailEvent.prototype.write = function(output) {
  output.writeStructBegin('ScriptExecutingFailEvent');
  if (this.script !== null && this.script !== undefined) {
    output.writeFieldBegin('script', Thrift.Type.STRUCT, 1);
    this.script.write(output);
    output.writeFieldEnd();
  }
  if (this.workingDir !== null && this.workingDir !== undefined) {
    output.writeFieldBegin('workingDir', Thrift.Type.STRUCT, 2);
    this.workingDir.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 3);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 5);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.isCancelled !== null && this.isCancelled !== undefined) {
    output.writeFieldBegin('isCancelled', Thrift.Type.BOOL, 6);
    output.writeBool(this.isCancelled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SQLQueryExecutingStartEvent = module.exports.SQLQueryExecutingStartEvent = function(args) {
  this.sqlFile = null;
  this.eventType = null;
  this.serviceID = 'unknown';
  if (args) {
    if (args.sqlFile !== undefined && args.sqlFile !== null) {
      this.sqlFile = new ttypes.FileIOEventHeader(args.sqlFile);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
  }
};
SQLQueryExecutingStartEvent.prototype = {};
SQLQueryExecutingStartEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sqlFile = new ttypes.FileIOEventHeader();
        this.sqlFile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SQLQueryExecutingStartEvent.prototype.write = function(output) {
  output.writeStructBegin('SQLQueryExecutingStartEvent');
  if (this.sqlFile !== null && this.sqlFile !== undefined) {
    output.writeFieldBegin('sqlFile', Thrift.Type.STRUCT, 1);
    this.sqlFile.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 2);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 3);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SQLQueryExecutingSuccessEvent = module.exports.SQLQueryExecutingSuccessEvent = function(args) {
  this.sqlFile = null;
  this.workingDir = null;
  this.eventType = null;
  this.serviceID = 'unknown';
  if (args) {
    if (args.sqlFile !== undefined && args.sqlFile !== null) {
      this.sqlFile = new ttypes.FileIOEventHeader(args.sqlFile);
    }
    if (args.workingDir !== undefined && args.workingDir !== null) {
      this.workingDir = new ttypes.FileIOEventHeader(args.workingDir);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
  }
};
SQLQueryExecutingSuccessEvent.prototype = {};
SQLQueryExecutingSuccessEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sqlFile = new ttypes.FileIOEventHeader();
        this.sqlFile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.workingDir = new ttypes.FileIOEventHeader();
        this.workingDir.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SQLQueryExecutingSuccessEvent.prototype.write = function(output) {
  output.writeStructBegin('SQLQueryExecutingSuccessEvent');
  if (this.sqlFile !== null && this.sqlFile !== undefined) {
    output.writeFieldBegin('sqlFile', Thrift.Type.STRUCT, 1);
    this.sqlFile.write(output);
    output.writeFieldEnd();
  }
  if (this.workingDir !== null && this.workingDir !== undefined) {
    output.writeFieldBegin('workingDir', Thrift.Type.STRUCT, 2);
    this.workingDir.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 3);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 4);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SQLQueryExecutingFailEvent = module.exports.SQLQueryExecutingFailEvent = function(args) {
  this.sqlFile = null;
  this.workingDir = null;
  this.eventType = null;
  this.message = null;
  this.serviceID = 'unknown';
  this.isCancelled = null;
  if (args) {
    if (args.sqlFile !== undefined && args.sqlFile !== null) {
      this.sqlFile = new ttypes.FileIOEventHeader(args.sqlFile);
    }
    if (args.workingDir !== undefined && args.workingDir !== null) {
      this.workingDir = new ttypes.FileIOEventHeader(args.workingDir);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.isCancelled !== undefined && args.isCancelled !== null) {
      this.isCancelled = args.isCancelled;
    }
  }
};
SQLQueryExecutingFailEvent.prototype = {};
SQLQueryExecutingFailEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.sqlFile = new ttypes.FileIOEventHeader();
        this.sqlFile.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.workingDir = new ttypes.FileIOEventHeader();
        this.workingDir.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.isCancelled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SQLQueryExecutingFailEvent.prototype.write = function(output) {
  output.writeStructBegin('SQLQueryExecutingFailEvent');
  if (this.sqlFile !== null && this.sqlFile !== undefined) {
    output.writeFieldBegin('sqlFile', Thrift.Type.STRUCT, 1);
    this.sqlFile.write(output);
    output.writeFieldEnd();
  }
  if (this.workingDir !== null && this.workingDir !== undefined) {
    output.writeFieldBegin('workingDir', Thrift.Type.STRUCT, 2);
    this.workingDir.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 3);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 4);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 5);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.isCancelled !== null && this.isCancelled !== undefined) {
    output.writeFieldBegin('isCancelled', Thrift.Type.BOOL, 6);
    output.writeBool(this.isCancelled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MoveFilesStartEvent = module.exports.MoveFilesStartEvent = function(args) {
  this.fileCount = null;
  this.eventType = null;
  this.serviceID = 'unknown';
  this.identity = null;
  if (args) {
    if (args.fileCount !== undefined && args.fileCount !== null) {
      this.fileCount = args.fileCount;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = new common_ttypes.Identity(args.identity);
    }
  }
};
MoveFilesStartEvent.prototype = {};
MoveFilesStartEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.fileCount = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.identity = new common_ttypes.Identity();
        this.identity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoveFilesStartEvent.prototype.write = function(output) {
  output.writeStructBegin('MoveFilesStartEvent');
  if (this.fileCount !== null && this.fileCount !== undefined) {
    output.writeFieldBegin('fileCount', Thrift.Type.I16, 1);
    output.writeI16(this.fileCount);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 2);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 3);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRUCT, 4);
    this.identity.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MoveFilesSuccessEvent = module.exports.MoveFilesSuccessEvent = function(args) {
  this.fileCount = null;
  this.eventType = null;
  this.serviceID = 'unknown';
  this.identity = null;
  this.movedFiles = null;
  if (args) {
    if (args.fileCount !== undefined && args.fileCount !== null) {
      this.fileCount = args.fileCount;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = new common_ttypes.Identity(args.identity);
    }
    if (args.movedFiles !== undefined && args.movedFiles !== null) {
      this.movedFiles = Thrift.copyList(args.movedFiles, [null]);
    }
  }
};
MoveFilesSuccessEvent.prototype = {};
MoveFilesSuccessEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.fileCount = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.identity = new common_ttypes.Identity();
        this.identity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.movedFiles = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.movedFiles.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoveFilesSuccessEvent.prototype.write = function(output) {
  output.writeStructBegin('MoveFilesSuccessEvent');
  if (this.fileCount !== null && this.fileCount !== undefined) {
    output.writeFieldBegin('fileCount', Thrift.Type.I16, 1);
    output.writeI16(this.fileCount);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 2);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 3);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRUCT, 4);
    this.identity.write(output);
    output.writeFieldEnd();
  }
  if (this.movedFiles !== null && this.movedFiles !== undefined) {
    output.writeFieldBegin('movedFiles', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.movedFiles.length);
    for (var iter7 in this.movedFiles)
    {
      if (this.movedFiles.hasOwnProperty(iter7))
      {
        iter7 = this.movedFiles[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var MoveFilesFailEvent = module.exports.MoveFilesFailEvent = function(args) {
  this.fileCount = null;
  this.eventType = null;
  this.serviceID = 'unknown';
  this.isCancelled = null;
  this.message = null;
  this.identity = null;
  this.movedFiles = null;
  this.failedFiles = null;
  if (args) {
    if (args.fileCount !== undefined && args.fileCount !== null) {
      this.fileCount = args.fileCount;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.isCancelled !== undefined && args.isCancelled !== null) {
      this.isCancelled = args.isCancelled;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = new common_ttypes.Identity(args.identity);
    }
    if (args.movedFiles !== undefined && args.movedFiles !== null) {
      this.movedFiles = Thrift.copyList(args.movedFiles, [null]);
    }
    if (args.failedFiles !== undefined && args.failedFiles !== null) {
      this.failedFiles = Thrift.copyList(args.failedFiles, [null]);
    }
  }
};
MoveFilesFailEvent.prototype = {};
MoveFilesFailEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.fileCount = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.isCancelled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.identity = new common_ttypes.Identity();
        this.identity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.movedFiles = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.movedFiles.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size15 = 0;
        var _rtmp319;
        this.failedFiles = [];
        var _etype18 = 0;
        _rtmp319 = input.readListBegin();
        _etype18 = _rtmp319.etype;
        _size15 = _rtmp319.size;
        for (var _i20 = 0; _i20 < _size15; ++_i20)
        {
          var elem21 = null;
          elem21 = input.readString();
          this.failedFiles.push(elem21);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoveFilesFailEvent.prototype.write = function(output) {
  output.writeStructBegin('MoveFilesFailEvent');
  if (this.fileCount !== null && this.fileCount !== undefined) {
    output.writeFieldBegin('fileCount', Thrift.Type.I16, 1);
    output.writeI16(this.fileCount);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 2);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 3);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.isCancelled !== null && this.isCancelled !== undefined) {
    output.writeFieldBegin('isCancelled', Thrift.Type.BOOL, 4);
    output.writeBool(this.isCancelled);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRUCT, 6);
    this.identity.write(output);
    output.writeFieldEnd();
  }
  if (this.movedFiles !== null && this.movedFiles !== undefined) {
    output.writeFieldBegin('movedFiles', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRING, this.movedFiles.length);
    for (var iter22 in this.movedFiles)
    {
      if (this.movedFiles.hasOwnProperty(iter22))
      {
        iter22 = this.movedFiles[iter22];
        output.writeString(iter22);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.failedFiles !== null && this.failedFiles !== undefined) {
    output.writeFieldBegin('failedFiles', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.failedFiles.length);
    for (var iter23 in this.failedFiles)
    {
      if (this.failedFiles.hasOwnProperty(iter23))
      {
        iter23 = this.failedFiles[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileIOMovedEvent = module.exports.FileIOMovedEvent = function(args) {
  this.header = null;
  this.oldName = null;
  this.renamedOnly = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.oldName !== undefined && args.oldName !== null) {
      this.oldName = args.oldName;
    }
    if (args.renamedOnly !== undefined && args.renamedOnly !== null) {
      this.renamedOnly = args.renamedOnly;
    }
  }
};
FileIOMovedEvent.prototype = {};
FileIOMovedEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.oldName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.renamedOnly = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileIOMovedEvent.prototype.write = function(output) {
  output.writeStructBegin('FileIOMovedEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.oldName !== null && this.oldName !== undefined) {
    output.writeFieldBegin('oldName', Thrift.Type.STRING, 2);
    output.writeString(this.oldName);
    output.writeFieldEnd();
  }
  if (this.renamedOnly !== null && this.renamedOnly !== undefined) {
    output.writeFieldBegin('renamedOnly', Thrift.Type.BOOL, 3);
    output.writeBool(this.renamedOnly);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ToolStartStopEvent = module.exports.ToolStartStopEvent = function(args) {
  this.toolID = null;
  this.toolName = null;
  this.eventType = null;
  this.serviceID = 'unknown';
  this.message = null;
  this.identity = null;
  this.price = null;
  if (args) {
    if (args.toolID !== undefined && args.toolID !== null) {
      this.toolID = args.toolID;
    }
    if (args.toolName !== undefined && args.toolName !== null) {
      this.toolName = args.toolName;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = new common_ttypes.Identity(args.identity);
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
  }
};
ToolStartStopEvent.prototype = {};
ToolStartStopEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toolID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.identity = new common_ttypes.Identity();
        this.identity.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ToolStartStopEvent.prototype.write = function(output) {
  output.writeStructBegin('ToolStartStopEvent');
  if (this.toolID !== null && this.toolID !== undefined) {
    output.writeFieldBegin('toolID', Thrift.Type.STRING, 1);
    output.writeString(this.toolID);
    output.writeFieldEnd();
  }
  if (this.toolName !== null && this.toolName !== undefined) {
    output.writeFieldBegin('toolName', Thrift.Type.STRING, 2);
    output.writeString(this.toolName);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 3);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 4);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRUCT, 6);
    this.identity.write(output);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 7);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var NielsenQueryExecutingEvent = module.exports.NielsenQueryExecutingEvent = function(args) {
  this.queryID = null;
  this.queryName = null;
  this.header = null;
  this.eventType = null;
  this.message = null;
  this.serviceID = 'unknown';
  this.dataSize = null;
  this.dataRows = null;
  if (args) {
    if (args.queryID !== undefined && args.queryID !== null) {
      this.queryID = args.queryID;
    }
    if (args.queryName !== undefined && args.queryName !== null) {
      this.queryName = args.queryName;
    }
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.dataSize !== undefined && args.dataSize !== null) {
      this.dataSize = args.dataSize;
    }
    if (args.dataRows !== undefined && args.dataRows !== null) {
      this.dataRows = args.dataRows;
    }
  }
};
NielsenQueryExecutingEvent.prototype = {};
NielsenQueryExecutingEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.queryID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.queryName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.dataSize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.dataRows = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NielsenQueryExecutingEvent.prototype.write = function(output) {
  output.writeStructBegin('NielsenQueryExecutingEvent');
  if (this.queryID !== null && this.queryID !== undefined) {
    output.writeFieldBegin('queryID', Thrift.Type.STRING, 1);
    output.writeString(this.queryID);
    output.writeFieldEnd();
  }
  if (this.queryName !== null && this.queryName !== undefined) {
    output.writeFieldBegin('queryName', Thrift.Type.STRING, 2);
    output.writeString(this.queryName);
    output.writeFieldEnd();
  }
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 3);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 4);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 5);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 6);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.dataSize !== null && this.dataSize !== undefined) {
    output.writeFieldBegin('dataSize', Thrift.Type.I32, 7);
    output.writeI32(this.dataSize);
    output.writeFieldEnd();
  }
  if (this.dataRows !== null && this.dataRows !== undefined) {
    output.writeFieldBegin('dataRows', Thrift.Type.I32, 8);
    output.writeI32(this.dataRows);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DataSourceExtractEvent = module.exports.DataSourceExtractEvent = function(args) {
  this.header = null;
  this.dsID = null;
  this.dsName = null;
  this.srcPath = null;
  this.totalCount = null;
  this.extractedCount = null;
  this.message = null;
  this.serviceID = 'unknown';
  this.isCancelled = null;
  if (args) {
    if (args.header !== undefined && args.header !== null) {
      this.header = new ttypes.FileIOEventHeader(args.header);
    }
    if (args.dsID !== undefined && args.dsID !== null) {
      this.dsID = args.dsID;
    }
    if (args.dsName !== undefined && args.dsName !== null) {
      this.dsName = args.dsName;
    }
    if (args.srcPath !== undefined && args.srcPath !== null) {
      this.srcPath = args.srcPath;
    }
    if (args.totalCount !== undefined && args.totalCount !== null) {
      this.totalCount = args.totalCount;
    }
    if (args.extractedCount !== undefined && args.extractedCount !== null) {
      this.extractedCount = args.extractedCount;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.isCancelled !== undefined && args.isCancelled !== null) {
      this.isCancelled = args.isCancelled;
    }
  }
};
DataSourceExtractEvent.prototype = {};
DataSourceExtractEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.header = new ttypes.FileIOEventHeader();
        this.header.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.dsID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dsName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.srcPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I16) {
        this.totalCount = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.extractedCount = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.isCancelled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DataSourceExtractEvent.prototype.write = function(output) {
  output.writeStructBegin('DataSourceExtractEvent');
  if (this.header !== null && this.header !== undefined) {
    output.writeFieldBegin('header', Thrift.Type.STRUCT, 1);
    this.header.write(output);
    output.writeFieldEnd();
  }
  if (this.dsID !== null && this.dsID !== undefined) {
    output.writeFieldBegin('dsID', Thrift.Type.STRING, 2);
    output.writeString(this.dsID);
    output.writeFieldEnd();
  }
  if (this.dsName !== null && this.dsName !== undefined) {
    output.writeFieldBegin('dsName', Thrift.Type.STRING, 3);
    output.writeString(this.dsName);
    output.writeFieldEnd();
  }
  if (this.srcPath !== null && this.srcPath !== undefined) {
    output.writeFieldBegin('srcPath', Thrift.Type.STRING, 4);
    output.writeString(this.srcPath);
    output.writeFieldEnd();
  }
  if (this.totalCount !== null && this.totalCount !== undefined) {
    output.writeFieldBegin('totalCount', Thrift.Type.I16, 5);
    output.writeI16(this.totalCount);
    output.writeFieldEnd();
  }
  if (this.extractedCount !== null && this.extractedCount !== undefined) {
    output.writeFieldBegin('extractedCount', Thrift.Type.I16, 6);
    output.writeI16(this.extractedCount);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 7);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 8);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.isCancelled !== null && this.isCancelled !== undefined) {
    output.writeFieldBegin('isCancelled', Thrift.Type.BOOL, 9);
    output.writeBool(this.isCancelled);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'dmp-ws-router';
ttypes.VERSION = '0.1.4';
ttypes.ERR_CODE = 32;
ttypes.AMQP_ROUTING_KEY = 'dmp.ws-gateway';
ttypes.MESSAGE_TYPE_FILE_IO_CREATED = 10;
ttypes.MESSAGE_TYPE_FILE_IO_PROGRESS = 11;
ttypes.MESSAGE_TYPE_FILE_IO_COMPLETED = 12;
ttypes.MESSAGE_TYPE_FILE_IO_ERROR = 13;
ttypes.MESSAGE_TYPE_FILE_IO_DELETED = 14;
ttypes.MESSAGE_TYPE_FILE_IO_UPDATED = 15;
ttypes.MESSAGE_TYPE_FILE_COMPRESSED = 16;
ttypes.MESSAGE_TYPE_FILE_DECOMPRESSED = 17;
ttypes.MESSAGE_TYPE_FILE_ENCRYPTED = 18;
ttypes.MESSAGE_TYPE_FILE_DECRYPTED = 19;
ttypes.MESSAGE_TYPE_CSV_VALIDATION_SUCCESS = 20;
ttypes.MESSAGE_TYPE_CSV_VALIDATION_FAIL = 21;
ttypes.MESSAGE_TYPE_CSV_ANALYSYS_SUCCESS = 22;
ttypes.MESSAGE_TYPE_CSV_ANALYSYS_FAIL = 23;
ttypes.MESSAGE_TYPE_CSV_CONVERSION_SUCCESS = 24;
ttypes.MESSAGE_TYPE_CSV_CONVERSION_FAIL = 25;
ttypes.MESSAGE_TYPE_CSV_FIRST_ROW_SUCCESS = 26;
ttypes.MESSAGE_TYPE_CSV_FIRST_ROW_FAIL = 27;
ttypes.MESSAGE_TYPE_FILE_DOWNLOAD_ENABLED = 28;
ttypes.MESSAGE_TYPE_FILE_DOWNLOAD_DISABLED = 29;
ttypes.MESSAGE_TYPE_FILE_IMPORT_SUCCESS = 30;
ttypes.MESSAGE_TYPE_FILE_IMPORT_FAIL = 31;
ttypes.MESSAGE_TYPE_FILE_EXPORT_SUCCESS = 32;
ttypes.MESSAGE_TYPE_FILE_EXPORT_FAIL = 33;
ttypes.MESSAGE_TYPE_FILE_COMPRESS_SUCCESS = 34;
ttypes.MESSAGE_TYPE_FILE_COMPRESS_FAIL = 35;
ttypes.MESSAGE_TYPE_FILE_DECOMPRESS_SUCCESS = 36;
ttypes.MESSAGE_TYPE_FILE_DECOMPRESS_FAIL = 37;
ttypes.MESSAGE_TYPE_FILE_PUBLISH_SFTP_SUCCESS = 38;
ttypes.MESSAGE_TYPE_FILE_PUBLISH_SFTP_FAIL = 39;
ttypes.MESSAGE_TYPE_FILE_PUBLISH_TO_POSTGRES_SUCCESS = 40;
ttypes.MESSAGE_TYPE_FILE_PUBLISH_TO_POSTGRES_FAIL = 41;
ttypes.MESSAGE_TYPE_SCRIPT_PYTHON_EXECUTE_SUCCESS = 45;
ttypes.MESSAGE_TYPE_SCRIPT_PYTHON_EXECUTE_FAIL = 46;
ttypes.MESSAGE_TYPE_FILE_PUBLISH_S3_SUCCESS = 47;
ttypes.MESSAGE_TYPE_FILE_PUBLISH_S3_FAIL = 48;
ttypes.MESSAGE_TYPE_SCRIPT_PYTHON_EXECUTE_STARTED = 49;
ttypes.MESSAGE_TYPE_SCRIPT_R_EXECUTE_SUCCESS = 50;
ttypes.MESSAGE_TYPE_SCRIPT_R_EXECUTE_FAIL = 51;
ttypes.MESSAGE_TYPE_SCRIPT_R_EXECUTE_STARTED = 52;
ttypes.MESSAGE_TYPE_LIST_ARCHIVE_FAIL = 53;
ttypes.MESSAGE_TYPE_LIST_ARCHIVE_SUCCESS = 54;
ttypes.MESSAGE_TYPE_POSTGRES_SQL_EXECUTE_STARTED = 55;
ttypes.MESSAGE_TYPE_POSTGRES_SQL_EXECUTE_SUCCESS = 56;
ttypes.MESSAGE_TYPE_POSTGRES_SQL_EXECUTE_FAIL = 57;
ttypes.MESSAGE_TYPE_MS_SQL_EXECUTE_STARTED = 58;
ttypes.MESSAGE_TYPE_MS_SQL_EXECUTE_SUCCESS = 59;
ttypes.MESSAGE_TYPE_MS_SQL_EXECUTE_FAIL = 60;
ttypes.MESSAGE_TYPE_MOVE_FILES_TO_WORKSPACE_STARTED = 61;
ttypes.MESSAGE_TYPE_MOVE_FILES_TO_WORKSPACE_SUCCESS = 62;
ttypes.MESSAGE_TYPE_MOVE_FILES_TO_WORKSPACE_FAIL = 63;
ttypes.MESSAGE_TYPE_EXASOL_EXECUTE_STARTED = 64;
ttypes.MESSAGE_TYPE_EXASOL_EXECUTE_SUCCESS = 65;
ttypes.MESSAGE_TYPE_EXASOL_EXECUTE_FAIL = 66;
ttypes.MESSAGE_TYPE_FILE_IO_MOVED = 67;
ttypes.MESSAGE_TYPE_RM_TOOL_STARTING = 68;
ttypes.MESSAGE_TYPE_RM_TOOL_START_SUCCESS = 69;
ttypes.MESSAGE_TYPE_RM_TOOL_START_FAILED = 70;
ttypes.MESSAGE_TYPE_RM_TOOL_STOPPING = 71;
ttypes.MESSAGE_TYPE_RM_TOOL_STOP_SUCCESS = 72;
ttypes.MESSAGE_TYPE_RM_TOOL_STOP_FAILED = 73;
ttypes.MESSAGE_TYPE_EXASOL_LIST_FAILED = 74;
ttypes.MESSAGE_TYPE_EXASOL_LIST_SHEMAS_SUCCESS = 75;
ttypes.MESSAGE_TYPE_EXASOL_LIST_TABLES_SUCCESS = 76;
ttypes.MESSAGE_TYPE_NIELSEN_EXECUTE_SUCCESS = 77;
ttypes.MESSAGE_TYPE_NIELSEN_EXECUTE_FAIL = 78;
ttypes.MESSAGE_TYPE_CSV_FORMAT_PARAMS_SUCCESS = 79;
ttypes.MESSAGE_TYPE_CSV_FORMAT_PARAMS_FAIL = 80;
ttypes.MESSAGE_TYPE_DATA_SOURCE_EXTRACT_SUCCESS = 81;
ttypes.MESSAGE_TYPE_DATA_SOURCE_EXTRACT_FAIL = 82;
ttypes.MESSAGE_TYPE_CSV_SET_FORMAT_SUCCESS = 83;
ttypes.MESSAGE_TYPE_CSV_SET_FORMAT_FAIL = 84;
ttypes.INCOMING = 1;
ttypes.WORKSPACE = 2;
