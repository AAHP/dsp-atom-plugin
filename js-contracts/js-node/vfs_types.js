//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var LockInfo = module.exports.LockInfo = function(args) {
  this.principalID = null;
  this.serviceID = null;
  this.reason = null;
  if (args) {
    if (args.principalID !== undefined && args.principalID !== null) {
      this.principalID = args.principalID;
    }
    if (args.serviceID !== undefined && args.serviceID !== null) {
      this.serviceID = args.serviceID;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
LockInfo.prototype = {};
LockInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.principalID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.serviceID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

LockInfo.prototype.write = function(output) {
  output.writeStructBegin('LockInfo');
  if (this.principalID !== null && this.principalID !== undefined) {
    output.writeFieldBegin('principalID', Thrift.Type.STRING, 1);
    output.writeString(this.principalID);
    output.writeFieldEnd();
  }
  if (this.serviceID !== null && this.serviceID !== undefined) {
    output.writeFieldBegin('serviceID', Thrift.Type.STRING, 2);
    output.writeString(this.serviceID);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilePermissions = module.exports.FilePermissions = function(args) {
  this.canRead = null;
  this.canWrite = null;
  this.canShare = null;
  if (args) {
    if (args.canRead !== undefined && args.canRead !== null) {
      this.canRead = args.canRead;
    }
    if (args.canWrite !== undefined && args.canWrite !== null) {
      this.canWrite = args.canWrite;
    }
    if (args.canShare !== undefined && args.canShare !== null) {
      this.canShare = args.canShare;
    }
  }
};
FilePermissions.prototype = {};
FilePermissions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.canRead = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.canWrite = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.canShare = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilePermissions.prototype.write = function(output) {
  output.writeStructBegin('FilePermissions');
  if (this.canRead !== null && this.canRead !== undefined) {
    output.writeFieldBegin('canRead', Thrift.Type.BOOL, 1);
    output.writeBool(this.canRead);
    output.writeFieldEnd();
  }
  if (this.canWrite !== null && this.canWrite !== undefined) {
    output.writeFieldBegin('canWrite', Thrift.Type.BOOL, 2);
    output.writeBool(this.canWrite);
    output.writeFieldEnd();
  }
  if (this.canShare !== null && this.canShare !== undefined) {
    output.writeFieldBegin('canShare', Thrift.Type.BOOL, 3);
    output.writeBool(this.canShare);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FileProperties = module.exports.FileProperties = function(args) {
  this.size = null;
  this.mimeType = null;
  this.md5 = null;
  this.lockInfo = null;
  this.metadata = null;
  this.effectivePermissions = null;
  if (args) {
    if (args.size !== undefined && args.size !== null) {
      this.size = args.size;
    }
    if (args.mimeType !== undefined && args.mimeType !== null) {
      this.mimeType = args.mimeType;
    }
    if (args.md5 !== undefined && args.md5 !== null) {
      this.md5 = args.md5;
    }
    if (args.lockInfo !== undefined && args.lockInfo !== null) {
      this.lockInfo = new ttypes.LockInfo(args.lockInfo);
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = Thrift.copyMap(args.metadata, [null]);
    }
    if (args.effectivePermissions !== undefined && args.effectivePermissions !== null) {
      this.effectivePermissions = new ttypes.FilePermissions(args.effectivePermissions);
    }
  }
};
FileProperties.prototype = {};
FileProperties.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.size = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.mimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.md5 = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.lockInfo = new ttypes.LockInfo();
        this.lockInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.metadata = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.metadata[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.effectivePermissions = new ttypes.FilePermissions();
        this.effectivePermissions.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FileProperties.prototype.write = function(output) {
  output.writeStructBegin('FileProperties');
  if (this.size !== null && this.size !== undefined) {
    output.writeFieldBegin('size', Thrift.Type.I64, 1);
    output.writeI64(this.size);
    output.writeFieldEnd();
  }
  if (this.mimeType !== null && this.mimeType !== undefined) {
    output.writeFieldBegin('mimeType', Thrift.Type.STRING, 2);
    output.writeString(this.mimeType);
    output.writeFieldEnd();
  }
  if (this.md5 !== null && this.md5 !== undefined) {
    output.writeFieldBegin('md5', Thrift.Type.STRING, 3);
    output.writeString(this.md5);
    output.writeFieldEnd();
  }
  if (this.lockInfo !== null && this.lockInfo !== undefined) {
    output.writeFieldBegin('lockInfo', Thrift.Type.STRUCT, 4);
    this.lockInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metadata));
    for (var kiter8 in this.metadata)
    {
      if (this.metadata.hasOwnProperty(kiter8))
      {
        var viter9 = this.metadata[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.effectivePermissions !== null && this.effectivePermissions !== undefined) {
    output.writeFieldBegin('effectivePermissions', Thrift.Type.STRUCT, 6);
    this.effectivePermissions.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DownloadInfo = module.exports.DownloadInfo = function(args) {
  this.enabledOn = null;
  this.enabledBy = null;
  this.password = null;
  if (args) {
    if (args.enabledOn !== undefined && args.enabledOn !== null) {
      this.enabledOn = args.enabledOn;
    }
    if (args.enabledBy !== undefined && args.enabledBy !== null) {
      this.enabledBy = args.enabledBy;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
DownloadInfo.prototype = {};
DownloadInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.enabledOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.enabledBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DownloadInfo.prototype.write = function(output) {
  output.writeStructBegin('DownloadInfo');
  if (this.enabledOn !== null && this.enabledOn !== undefined) {
    output.writeFieldBegin('enabledOn', Thrift.Type.STRING, 1);
    output.writeString(this.enabledOn);
    output.writeFieldEnd();
  }
  if (this.enabledBy !== null && this.enabledBy !== undefined) {
    output.writeFieldBegin('enabledBy', Thrift.Type.STRING, 2);
    output.writeString(this.enabledBy);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DeleteInfo = module.exports.DeleteInfo = function(args) {
  this.originalPath = null;
  this.deletedBy = null;
  this.deletedOn = null;
  if (args) {
    if (args.originalPath !== undefined && args.originalPath !== null) {
      this.originalPath = args.originalPath;
    }
    if (args.deletedBy !== undefined && args.deletedBy !== null) {
      this.deletedBy = args.deletedBy;
    }
    if (args.deletedOn !== undefined && args.deletedOn !== null) {
      this.deletedOn = args.deletedOn;
    }
  }
};
DeleteInfo.prototype = {};
DeleteInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.originalPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deletedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.deletedOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DeleteInfo.prototype.write = function(output) {
  output.writeStructBegin('DeleteInfo');
  if (this.originalPath !== null && this.originalPath !== undefined) {
    output.writeFieldBegin('originalPath', Thrift.Type.STRING, 1);
    output.writeString(this.originalPath);
    output.writeFieldEnd();
  }
  if (this.deletedBy !== null && this.deletedBy !== undefined) {
    output.writeFieldBegin('deletedBy', Thrift.Type.STRING, 2);
    output.writeString(this.deletedBy);
    output.writeFieldEnd();
  }
  if (this.deletedOn !== null && this.deletedOn !== undefined) {
    output.writeFieldBegin('deletedOn', Thrift.Type.STRING, 3);
    output.writeString(this.deletedOn);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var SharedUsersCollection = module.exports.SharedUsersCollection = function(args) {
  this.sharedUsers = null;
  if (args) {
    if (args.sharedUsers !== undefined && args.sharedUsers !== null) {
      this.sharedUsers = Thrift.copyMap(args.sharedUsers, [null]);
    }
  }
};
SharedUsersCollection.prototype = {};
SharedUsersCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size10 = 0;
        var _rtmp314;
        this.sharedUsers = {};
        var _ktype11 = 0;
        var _vtype12 = 0;
        _rtmp314 = input.readMapBegin();
        _ktype11 = _rtmp314.ktype;
        _vtype12 = _rtmp314.vtype;
        _size10 = _rtmp314.size;
        for (var _i15 = 0; _i15 < _size10; ++_i15)
        {
          var key16 = null;
          var val17 = null;
          key16 = input.readString();
          val17 = input.readByte();
          this.sharedUsers[key16] = val17;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SharedUsersCollection.prototype.write = function(output) {
  output.writeStructBegin('SharedUsersCollection');
  if (this.sharedUsers !== null && this.sharedUsers !== undefined) {
    output.writeFieldBegin('sharedUsers', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.BYTE, Thrift.objectLength(this.sharedUsers));
    for (var kiter18 in this.sharedUsers)
    {
      if (this.sharedUsers.hasOwnProperty(kiter18))
      {
        var viter19 = this.sharedUsers[kiter18];
        output.writeString(kiter18);
        output.writeByte(viter19);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Object = module.exports.Object = function(args) {
  this.ID = null;
  this.parentID = null;
  this.ownerID = null;
  this.objectType = null;
  this.status = null;
  this.name = null;
  this.properties = null;
  this.createdOn = null;
  this.updateOn = null;
  this.downloadInfo = null;
  this.deleteInfo = null;
  this.isShared = null;
  this.sharedUsersCollection = null;
  this.absPath = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.ownerID !== undefined && args.ownerID !== null) {
      this.ownerID = args.ownerID;
    }
    if (args.objectType !== undefined && args.objectType !== null) {
      this.objectType = args.objectType;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.properties !== undefined && args.properties !== null) {
      this.properties = new ttypes.FileProperties(args.properties);
    }
    if (args.createdOn !== undefined && args.createdOn !== null) {
      this.createdOn = args.createdOn;
    }
    if (args.updateOn !== undefined && args.updateOn !== null) {
      this.updateOn = args.updateOn;
    }
    if (args.downloadInfo !== undefined && args.downloadInfo !== null) {
      this.downloadInfo = new ttypes.DownloadInfo(args.downloadInfo);
    }
    if (args.deleteInfo !== undefined && args.deleteInfo !== null) {
      this.deleteInfo = new ttypes.DeleteInfo(args.deleteInfo);
    }
    if (args.isShared !== undefined && args.isShared !== null) {
      this.isShared = args.isShared;
    }
    if (args.sharedUsersCollection !== undefined && args.sharedUsersCollection !== null) {
      this.sharedUsersCollection = new ttypes.SharedUsersCollection(args.sharedUsersCollection);
    }
    if (args.absPath !== undefined && args.absPath !== null) {
      this.absPath = args.absPath;
    }
  }
};
Object.prototype = {};
Object.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ownerID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.objectType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.status = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.properties = new ttypes.FileProperties();
        this.properties.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.createdOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.updateOn = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.downloadInfo = new ttypes.DownloadInfo();
        this.downloadInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRUCT) {
        this.deleteInfo = new ttypes.DeleteInfo();
        this.deleteInfo.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.BYTE) {
        this.isShared = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedUsersCollection = new ttypes.SharedUsersCollection();
        this.sharedUsersCollection.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.absPath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Object.prototype.write = function(output) {
  output.writeStructBegin('Object');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.ownerID !== null && this.ownerID !== undefined) {
    output.writeFieldBegin('ownerID', Thrift.Type.STRING, 3);
    output.writeString(this.ownerID);
    output.writeFieldEnd();
  }
  if (this.objectType !== null && this.objectType !== undefined) {
    output.writeFieldBegin('objectType', Thrift.Type.BYTE, 4);
    output.writeByte(this.objectType);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.BYTE, 5);
    output.writeByte(this.status);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 6);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.properties !== null && this.properties !== undefined) {
    output.writeFieldBegin('properties', Thrift.Type.STRUCT, 7);
    this.properties.write(output);
    output.writeFieldEnd();
  }
  if (this.createdOn !== null && this.createdOn !== undefined) {
    output.writeFieldBegin('createdOn', Thrift.Type.STRING, 8);
    output.writeString(this.createdOn);
    output.writeFieldEnd();
  }
  if (this.updateOn !== null && this.updateOn !== undefined) {
    output.writeFieldBegin('updateOn', Thrift.Type.STRING, 9);
    output.writeString(this.updateOn);
    output.writeFieldEnd();
  }
  if (this.downloadInfo !== null && this.downloadInfo !== undefined) {
    output.writeFieldBegin('downloadInfo', Thrift.Type.STRUCT, 10);
    this.downloadInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.deleteInfo !== null && this.deleteInfo !== undefined) {
    output.writeFieldBegin('deleteInfo', Thrift.Type.STRUCT, 11);
    this.deleteInfo.write(output);
    output.writeFieldEnd();
  }
  if (this.isShared !== null && this.isShared !== undefined) {
    output.writeFieldBegin('isShared', Thrift.Type.BYTE, 12);
    output.writeByte(this.isShared);
    output.writeFieldEnd();
  }
  if (this.sharedUsersCollection !== null && this.sharedUsersCollection !== undefined) {
    output.writeFieldBegin('sharedUsersCollection', Thrift.Type.STRUCT, 13);
    this.sharedUsersCollection.write(output);
    output.writeFieldEnd();
  }
  if (this.absPath !== null && this.absPath !== undefined) {
    output.writeFieldBegin('absPath', Thrift.Type.STRING, 14);
    output.writeString(this.absPath);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ObjectsCollection = module.exports.ObjectsCollection = function(args) {
  this.parent = null;
  this.objects = null;
  this.pagination = null;
  if (args) {
    if (args.parent !== undefined && args.parent !== null) {
      this.parent = new ttypes.Object(args.parent);
    }
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [ttypes.Object]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
ObjectsCollection.prototype = {};
ObjectsCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parent = new ttypes.Object();
        this.parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size20 = 0;
        var _rtmp324;
        this.objects = [];
        var _etype23 = 0;
        _rtmp324 = input.readListBegin();
        _etype23 = _rtmp324.etype;
        _size20 = _rtmp324.size;
        for (var _i25 = 0; _i25 < _size20; ++_i25)
        {
          var elem26 = null;
          elem26 = new ttypes.Object();
          elem26.read(input);
          this.objects.push(elem26);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ObjectsCollection.prototype.write = function(output) {
  output.writeStructBegin('ObjectsCollection');
  if (this.parent !== null && this.parent !== undefined) {
    output.writeFieldBegin('parent', Thrift.Type.STRUCT, 1);
    this.parent.write(output);
    output.writeFieldEnd();
  }
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.objects.length);
    for (var iter27 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter27))
      {
        iter27 = this.objects[iter27];
        iter27.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 3);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FolderStats = module.exports.FolderStats = function(args) {
  this.foldersCount = null;
  this.filesCount = null;
  this.pendingCount = null;
  this.downloadsCount = null;
  if (args) {
    if (args.foldersCount !== undefined && args.foldersCount !== null) {
      this.foldersCount = args.foldersCount;
    }
    if (args.filesCount !== undefined && args.filesCount !== null) {
      this.filesCount = args.filesCount;
    }
    if (args.pendingCount !== undefined && args.pendingCount !== null) {
      this.pendingCount = args.pendingCount;
    }
    if (args.downloadsCount !== undefined && args.downloadsCount !== null) {
      this.downloadsCount = args.downloadsCount;
    }
  }
};
FolderStats.prototype = {};
FolderStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.foldersCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.filesCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.pendingCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.downloadsCount = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FolderStats.prototype.write = function(output) {
  output.writeStructBegin('FolderStats');
  if (this.foldersCount !== null && this.foldersCount !== undefined) {
    output.writeFieldBegin('foldersCount', Thrift.Type.I64, 1);
    output.writeI64(this.foldersCount);
    output.writeFieldEnd();
  }
  if (this.filesCount !== null && this.filesCount !== undefined) {
    output.writeFieldBegin('filesCount', Thrift.Type.I64, 2);
    output.writeI64(this.filesCount);
    output.writeFieldEnd();
  }
  if (this.pendingCount !== null && this.pendingCount !== undefined) {
    output.writeFieldBegin('pendingCount', Thrift.Type.I64, 3);
    output.writeI64(this.pendingCount);
    output.writeFieldEnd();
  }
  if (this.downloadsCount !== null && this.downloadsCount !== undefined) {
    output.writeFieldBegin('downloadsCount', Thrift.Type.I64, 4);
    output.writeI64(this.downloadsCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ObjectsNestedCollection = module.exports.ObjectsNestedCollection = function(args) {
  this.parent = null;
  this.objects = null;
  if (args) {
    if (args.parent !== undefined && args.parent !== null) {
      this.parent = new ttypes.Object(args.parent);
    }
    if (args.objects !== undefined && args.objects !== null) {
      this.objects = Thrift.copyList(args.objects, [ttypes.Object]);
    }
  }
};
ObjectsNestedCollection.prototype = {};
ObjectsNestedCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.parent = new ttypes.Object();
        this.parent.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.objects = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new ttypes.Object();
          elem34.read(input);
          this.objects.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ObjectsNestedCollection.prototype.write = function(output) {
  output.writeStructBegin('ObjectsNestedCollection');
  if (this.parent !== null && this.parent !== undefined) {
    output.writeFieldBegin('parent', Thrift.Type.STRUCT, 1);
    this.parent.write(output);
    output.writeFieldEnd();
  }
  if (this.objects !== null && this.objects !== undefined) {
    output.writeFieldBegin('objects', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.objects.length);
    for (var iter35 in this.objects)
    {
      if (this.objects.hasOwnProperty(iter35))
      {
        iter35 = this.objects[iter35];
        iter35.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'dmp-vfs';
ttypes.VERSION = '0.1.3';
ttypes.ERR_CODE = 33;
ttypes.TYPE_FOLDER = 1;
ttypes.TYPE_FILE = 2;
ttypes.STATUS_DELETED = 0;
ttypes.STATUS_PENDING = 1;
ttypes.STATUS_UPLOADED = 2;
ttypes.STATUS_LOCKED = 3;
ttypes.STATUS_AVAILABLE = 4;
ttypes.NOT_SHARED = 0;
ttypes.SHARED_FOR_VIEW = 1;
ttypes.SHARED_FOR_EDIT = 2;
