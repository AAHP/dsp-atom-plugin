//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./resource_manager_types');
//HELPER FUNCTIONS AND STRUCTURES

var PublicResourceManager_getAllTools_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
  }
};
PublicResourceManager_getAllTools_args.prototype = {};
PublicResourceManager_getAllTools_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_getAllTools_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_getAllTools_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_getAllTools_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ToolEntry]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_getAllTools_result.prototype = {};
PublicResourceManager_getAllTools_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size28 = 0;
        var _rtmp332;
        this.success = [];
        var _etype31 = 0;
        _rtmp332 = input.readListBegin();
        _etype31 = _rtmp332.etype;
        _size28 = _rtmp332.size;
        for (var _i33 = 0; _i33 < _size28; ++_i33)
        {
          var elem34 = null;
          elem34 = new ttypes.ToolEntry();
          elem34.read(input);
          this.success.push(elem34);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_getAllTools_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_getAllTools_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter35 in this.success)
    {
      if (this.success.hasOwnProperty(iter35))
      {
        iter35 = this.success[iter35];
        iter35.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_getToolsByTags_args = function(args) {
  this.ctx = null;
  this.tags = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
  }
};
PublicResourceManager_getToolsByTags_args.prototype = {};
PublicResourceManager_getToolsByTags_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size36 = 0;
        var _rtmp340;
        this.tags = [];
        var _etype39 = 0;
        _rtmp340 = input.readListBegin();
        _etype39 = _rtmp340.etype;
        _size36 = _rtmp340.size;
        for (var _i41 = 0; _i41 < _size36; ++_i41)
        {
          var elem42 = null;
          elem42 = input.readString();
          this.tags.push(elem42);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_getToolsByTags_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_getToolsByTags_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter43 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter43))
      {
        iter43 = this.tags[iter43];
        output.writeString(iter43);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_getToolsByTags_result = function(args) {
  this.success = null;
  this.error = null;
  if (args instanceof common_ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ToolEntry]);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
PublicResourceManager_getToolsByTags_result.prototype = {};
PublicResourceManager_getToolsByTags_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size44 = 0;
        var _rtmp348;
        this.success = [];
        var _etype47 = 0;
        _rtmp348 = input.readListBegin();
        _etype47 = _rtmp348.etype;
        _size44 = _rtmp348.size;
        for (var _i49 = 0; _i49 < _size44; ++_i49)
        {
          var elem50 = null;
          elem50 = new ttypes.ToolEntry();
          elem50.read(input);
          this.success.push(elem50);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new common_ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_getToolsByTags_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_getToolsByTags_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter51 in this.success)
    {
      if (this.success.hasOwnProperty(iter51))
      {
        iter51 = this.success[iter51];
        iter51.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 1);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_getActivityList_args = function(args) {
  this.ctx = null;
  this.toolName = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.toolName !== undefined && args.toolName !== null) {
      this.toolName = args.toolName;
    }
  }
};
PublicResourceManager_getActivityList_args.prototype = {};
PublicResourceManager_getActivityList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_getActivityList_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_getActivityList_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.toolName !== null && this.toolName !== undefined) {
    output.writeFieldBegin('toolName', Thrift.Type.STRING, 2);
    output.writeString(this.toolName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_getActivityList_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TaskInfo]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_getActivityList_result.prototype = {};
PublicResourceManager_getActivityList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size52 = 0;
        var _rtmp356;
        this.success = [];
        var _etype55 = 0;
        _rtmp356 = input.readListBegin();
        _etype55 = _rtmp356.etype;
        _size52 = _rtmp356.size;
        for (var _i57 = 0; _i57 < _size52; ++_i57)
        {
          var elem58 = null;
          elem58 = new ttypes.TaskInfo();
          elem58.read(input);
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_getActivityList_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_getActivityList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter59 in this.success)
    {
      if (this.success.hasOwnProperty(iter59))
      {
        iter59 = this.success[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_getToolCostInfo_args = function(args) {
  this.ctx = null;
  this.toolNames = null;
  this.timeZoneName = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.toolNames !== undefined && args.toolNames !== null) {
      this.toolNames = Thrift.copyList(args.toolNames, [null]);
    }
    if (args.timeZoneName !== undefined && args.timeZoneName !== null) {
      this.timeZoneName = args.timeZoneName;
    }
  }
};
PublicResourceManager_getToolCostInfo_args.prototype = {};
PublicResourceManager_getToolCostInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.toolNames = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = input.readString();
          this.toolNames.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timeZoneName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_getToolCostInfo_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_getToolCostInfo_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.toolNames !== null && this.toolNames !== undefined) {
    output.writeFieldBegin('toolNames', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.toolNames.length);
    for (var iter67 in this.toolNames)
    {
      if (this.toolNames.hasOwnProperty(iter67))
      {
        iter67 = this.toolNames[iter67];
        output.writeString(iter67);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.timeZoneName !== null && this.timeZoneName !== undefined) {
    output.writeFieldBegin('timeZoneName', Thrift.Type.STRING, 3);
    output.writeString(this.timeZoneName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_getToolCostInfo_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ToolCostInfo]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_getToolCostInfo_result.prototype = {};
PublicResourceManager_getToolCostInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.success = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new ttypes.ToolCostInfo();
          elem74.read(input);
          this.success.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_getToolCostInfo_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_getToolCostInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter75 in this.success)
    {
      if (this.success.hasOwnProperty(iter75))
      {
        iter75 = this.success[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_startTool_args = function(args) {
  this.ctx = null;
  this.toolName = null;
  this.comment = null;
  this.extraParams = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.toolName !== undefined && args.toolName !== null) {
      this.toolName = args.toolName;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = Thrift.copyMap(args.extraParams, [null]);
    }
  }
};
PublicResourceManager_startTool_args.prototype = {};
PublicResourceManager_startTool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size76 = 0;
        var _rtmp380;
        this.extraParams = {};
        var _ktype77 = 0;
        var _vtype78 = 0;
        _rtmp380 = input.readMapBegin();
        _ktype77 = _rtmp380.ktype;
        _vtype78 = _rtmp380.vtype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var key82 = null;
          var val83 = null;
          key82 = input.readString();
          val83 = input.readString();
          this.extraParams[key82] = val83;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_startTool_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_startTool_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.toolName !== null && this.toolName !== undefined) {
    output.writeFieldBegin('toolName', Thrift.Type.STRING, 2);
    output.writeString(this.toolName);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraParams));
    for (var kiter84 in this.extraParams)
    {
      if (this.extraParams.hasOwnProperty(kiter84))
      {
        var viter85 = this.extraParams[kiter84];
        output.writeString(kiter84);
        output.writeString(viter85);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_startTool_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TaskInfo(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_startTool_result.prototype = {};
PublicResourceManager_startTool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TaskInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_startTool_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_startTool_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_stopTool_args = function(args) {
  this.ctx = null;
  this.toolID = null;
  this.comment = null;
  this.extraParams = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.toolID !== undefined && args.toolID !== null) {
      this.toolID = args.toolID;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = Thrift.copyMap(args.extraParams, [null]);
    }
  }
};
PublicResourceManager_stopTool_args.prototype = {};
PublicResourceManager_stopTool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size86 = 0;
        var _rtmp390;
        this.extraParams = {};
        var _ktype87 = 0;
        var _vtype88 = 0;
        _rtmp390 = input.readMapBegin();
        _ktype87 = _rtmp390.ktype;
        _vtype88 = _rtmp390.vtype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var key92 = null;
          var val93 = null;
          key92 = input.readString();
          val93 = input.readString();
          this.extraParams[key92] = val93;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_stopTool_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_stopTool_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.toolID !== null && this.toolID !== undefined) {
    output.writeFieldBegin('toolID', Thrift.Type.STRING, 2);
    output.writeString(this.toolID);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraParams));
    for (var kiter94 in this.extraParams)
    {
      if (this.extraParams.hasOwnProperty(kiter94))
      {
        var viter95 = this.extraParams[kiter94];
        output.writeString(kiter94);
        output.writeString(viter95);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_stopTool_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TaskInfo(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_stopTool_result.prototype = {};
PublicResourceManager_stopTool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.TaskInfo();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_stopTool_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_stopTool_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_enableUserServiceExternalAccess_args = function(args) {
  this.ctx = null;
  this.toolID = null;
  this.password = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.toolID !== undefined && args.toolID !== null) {
      this.toolID = args.toolID;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
PublicResourceManager_enableUserServiceExternalAccess_args.prototype = {};
PublicResourceManager_enableUserServiceExternalAccess_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_enableUserServiceExternalAccess_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_enableUserServiceExternalAccess_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.toolID !== null && this.toolID !== undefined) {
    output.writeFieldBegin('toolID', Thrift.Type.STRING, 2);
    output.writeString(this.toolID);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_enableUserServiceExternalAccess_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_enableUserServiceExternalAccess_result.prototype = {};
PublicResourceManager_enableUserServiceExternalAccess_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_enableUserServiceExternalAccess_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_enableUserServiceExternalAccess_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_disableUserServiceExternalAccess_args = function(args) {
  this.ctx = null;
  this.toolID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.toolID !== undefined && args.toolID !== null) {
      this.toolID = args.toolID;
    }
  }
};
PublicResourceManager_disableUserServiceExternalAccess_args.prototype = {};
PublicResourceManager_disableUserServiceExternalAccess_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_disableUserServiceExternalAccess_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_disableUserServiceExternalAccess_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.toolID !== null && this.toolID !== undefined) {
    output.writeFieldBegin('toolID', Thrift.Type.STRING, 2);
    output.writeString(this.toolID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_disableUserServiceExternalAccess_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_disableUserServiceExternalAccess_result.prototype = {};
PublicResourceManager_disableUserServiceExternalAccess_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_disableUserServiceExternalAccess_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_disableUserServiceExternalAccess_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_registerTool_args = function(args) {
  this.ctx = null;
  this.tool = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.tool !== undefined && args.tool !== null) {
      this.tool = new ttypes.ToolEntry(args.tool);
    }
  }
};
PublicResourceManager_registerTool_args.prototype = {};
PublicResourceManager_registerTool_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tool = new ttypes.ToolEntry();
        this.tool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_registerTool_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_registerTool_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.tool !== null && this.tool !== undefined) {
    output.writeFieldBegin('tool', Thrift.Type.STRUCT, 2);
    this.tool.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_registerTool_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ToolEntry]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_registerTool_result.prototype = {};
PublicResourceManager_registerTool_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new ttypes.ToolEntry();
          elem102.read(input);
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_registerTool_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_registerTool_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_removeUserService_args = function(args) {
  this.ctx = null;
  this.toolID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.toolID !== undefined && args.toolID !== null) {
      this.toolID = args.toolID;
    }
  }
};
PublicResourceManager_removeUserService_args.prototype = {};
PublicResourceManager_removeUserService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_removeUserService_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_removeUserService_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.toolID !== null && this.toolID !== undefined) {
    output.writeFieldBegin('toolID', Thrift.Type.STRING, 2);
    output.writeString(this.toolID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_removeUserService_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.ToolEntry]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_removeUserService_result.prototype = {};
PublicResourceManager_removeUserService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new ttypes.ToolEntry();
          elem110.read(input);
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_removeUserService_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_removeUserService_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_editUserService_args = function(args) {
  this.ctx = null;
  this.tool = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.tool !== undefined && args.tool !== null) {
      this.tool = new ttypes.ToolEntry(args.tool);
    }
  }
};
PublicResourceManager_editUserService_args.prototype = {};
PublicResourceManager_editUserService_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.tool = new ttypes.ToolEntry();
        this.tool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_editUserService_args.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_editUserService_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.tool !== null && this.tool !== undefined) {
    output.writeFieldBegin('tool', Thrift.Type.STRUCT, 2);
    this.tool.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManager_editUserService_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ToolEntry(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicResourceManager_editUserService_result.prototype = {};
PublicResourceManager_editUserService_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ToolEntry();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicResourceManager_editUserService_result.prototype.write = function(output) {
  output.writeStructBegin('PublicResourceManager_editUserService_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicResourceManagerClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(PublicResourceManagerClient, BaseServiceClient);
PublicResourceManagerClient.prototype.seqid = function() { return this._seqid; };
PublicResourceManagerClient.prototype.new_seqid = function() { return this._seqid += 1; };
PublicResourceManagerClient.prototype.getAllTools = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllTools(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllTools(ctx);
  }
};

PublicResourceManagerClient.prototype.send_getAllTools = function(ctx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllTools', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_getAllTools_args();
  args.ctx = ctx;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_getAllTools = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_getAllTools_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllTools failed: unknown result');
};
PublicResourceManagerClient.prototype.getToolsByTags = function(ctx, tags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolsByTags(ctx, tags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolsByTags(ctx, tags);
  }
};

PublicResourceManagerClient.prototype.send_getToolsByTags = function(ctx, tags) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getToolsByTags', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_getToolsByTags_args();
  args.ctx = ctx;
  args.tags = tags;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_getToolsByTags = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_getToolsByTags_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.error) {
    return callback(result.error);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolsByTags failed: unknown result');
};
PublicResourceManagerClient.prototype.getActivityList = function(ctx, toolName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getActivityList(ctx, toolName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getActivityList(ctx, toolName);
  }
};

PublicResourceManagerClient.prototype.send_getActivityList = function(ctx, toolName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getActivityList', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_getActivityList_args();
  args.ctx = ctx;
  args.toolName = toolName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_getActivityList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_getActivityList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getActivityList failed: unknown result');
};
PublicResourceManagerClient.prototype.getToolCostInfo = function(ctx, toolNames, timeZoneName, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getToolCostInfo(ctx, toolNames, timeZoneName);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getToolCostInfo(ctx, toolNames, timeZoneName);
  }
};

PublicResourceManagerClient.prototype.send_getToolCostInfo = function(ctx, toolNames, timeZoneName) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getToolCostInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_getToolCostInfo_args();
  args.ctx = ctx;
  args.toolNames = toolNames;
  args.timeZoneName = timeZoneName;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_getToolCostInfo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_getToolCostInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getToolCostInfo failed: unknown result');
};
PublicResourceManagerClient.prototype.startTool = function(ctx, toolName, comment, extraParams, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_startTool(ctx, toolName, comment, extraParams);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_startTool(ctx, toolName, comment, extraParams);
  }
};

PublicResourceManagerClient.prototype.send_startTool = function(ctx, toolName, comment, extraParams) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('startTool', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_startTool_args();
  args.ctx = ctx;
  args.toolName = toolName;
  args.comment = comment;
  args.extraParams = extraParams;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_startTool = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_startTool_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('startTool failed: unknown result');
};
PublicResourceManagerClient.prototype.stopTool = function(ctx, toolID, comment, extraParams, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_stopTool(ctx, toolID, comment, extraParams);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_stopTool(ctx, toolID, comment, extraParams);
  }
};

PublicResourceManagerClient.prototype.send_stopTool = function(ctx, toolID, comment, extraParams) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('stopTool', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_stopTool_args();
  args.ctx = ctx;
  args.toolID = toolID;
  args.comment = comment;
  args.extraParams = extraParams;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_stopTool = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_stopTool_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('stopTool failed: unknown result');
};
PublicResourceManagerClient.prototype.enableUserServiceExternalAccess = function(ctx, toolID, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_enableUserServiceExternalAccess(ctx, toolID, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_enableUserServiceExternalAccess(ctx, toolID, password);
  }
};

PublicResourceManagerClient.prototype.send_enableUserServiceExternalAccess = function(ctx, toolID, password) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('enableUserServiceExternalAccess', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_enableUserServiceExternalAccess_args();
  args.ctx = ctx;
  args.toolID = toolID;
  args.password = password;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_enableUserServiceExternalAccess = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_enableUserServiceExternalAccess_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicResourceManagerClient.prototype.disableUserServiceExternalAccess = function(ctx, toolID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_disableUserServiceExternalAccess(ctx, toolID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_disableUserServiceExternalAccess(ctx, toolID);
  }
};

PublicResourceManagerClient.prototype.send_disableUserServiceExternalAccess = function(ctx, toolID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disableUserServiceExternalAccess', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_disableUserServiceExternalAccess_args();
  args.ctx = ctx;
  args.toolID = toolID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_disableUserServiceExternalAccess = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_disableUserServiceExternalAccess_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicResourceManagerClient.prototype.registerTool = function(ctx, tool, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_registerTool(ctx, tool);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_registerTool(ctx, tool);
  }
};

PublicResourceManagerClient.prototype.send_registerTool = function(ctx, tool) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('registerTool', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_registerTool_args();
  args.ctx = ctx;
  args.tool = tool;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_registerTool = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_registerTool_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('registerTool failed: unknown result');
};
PublicResourceManagerClient.prototype.removeUserService = function(ctx, toolID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeUserService(ctx, toolID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeUserService(ctx, toolID);
  }
};

PublicResourceManagerClient.prototype.send_removeUserService = function(ctx, toolID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeUserService', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_removeUserService_args();
  args.ctx = ctx;
  args.toolID = toolID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_removeUserService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_removeUserService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('removeUserService failed: unknown result');
};
PublicResourceManagerClient.prototype.editUserService = function(ctx, tool, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_editUserService(ctx, tool);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_editUserService(ctx, tool);
  }
};

PublicResourceManagerClient.prototype.send_editUserService = function(ctx, tool) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('editUserService', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicResourceManager_editUserService_args();
  args.ctx = ctx;
  args.tool = tool;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicResourceManagerClient.prototype.recv_editUserService = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicResourceManager_editUserService_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('editUserService failed: unknown result');
};
var PublicResourceManagerProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(PublicResourceManagerProcessor, BaseServiceProcessor);
PublicResourceManagerProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PublicResourceManagerProcessor.prototype.process_getAllTools = function(seqid, input, output) {
  var args = new PublicResourceManager_getAllTools_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllTools.length === 1) {
    Q.fcall(this._handler.getAllTools, args.ctx)
      .then(function(result) {
        var result_obj = new PublicResourceManager_getAllTools_result({success: result});
        output.writeMessageBegin("getAllTools", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_getAllTools_result(err);
          output.writeMessageBegin("getAllTools", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllTools", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllTools(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_getAllTools_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllTools", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllTools", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_getToolsByTags = function(seqid, input, output) {
  var args = new PublicResourceManager_getToolsByTags_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolsByTags.length === 2) {
    Q.fcall(this._handler.getToolsByTags, args.ctx, args.tags)
      .then(function(result) {
        var result_obj = new PublicResourceManager_getToolsByTags_result({success: result});
        output.writeMessageBegin("getToolsByTags", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_getToolsByTags_result(err);
          output.writeMessageBegin("getToolsByTags", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getToolsByTags", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getToolsByTags(args.ctx, args.tags, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_getToolsByTags_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolsByTags", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolsByTags", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_getActivityList = function(seqid, input, output) {
  var args = new PublicResourceManager_getActivityList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getActivityList.length === 2) {
    Q.fcall(this._handler.getActivityList, args.ctx, args.toolName)
      .then(function(result) {
        var result_obj = new PublicResourceManager_getActivityList_result({success: result});
        output.writeMessageBegin("getActivityList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_getActivityList_result(err);
          output.writeMessageBegin("getActivityList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getActivityList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getActivityList(args.ctx, args.toolName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_getActivityList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getActivityList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getActivityList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_getToolCostInfo = function(seqid, input, output) {
  var args = new PublicResourceManager_getToolCostInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getToolCostInfo.length === 3) {
    Q.fcall(this._handler.getToolCostInfo, args.ctx, args.toolNames, args.timeZoneName)
      .then(function(result) {
        var result_obj = new PublicResourceManager_getToolCostInfo_result({success: result});
        output.writeMessageBegin("getToolCostInfo", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_getToolCostInfo_result(err);
          output.writeMessageBegin("getToolCostInfo", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getToolCostInfo", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getToolCostInfo(args.ctx, args.toolNames, args.timeZoneName, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_getToolCostInfo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getToolCostInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getToolCostInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_startTool = function(seqid, input, output) {
  var args = new PublicResourceManager_startTool_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.startTool.length === 4) {
    Q.fcall(this._handler.startTool, args.ctx, args.toolName, args.comment, args.extraParams)
      .then(function(result) {
        var result_obj = new PublicResourceManager_startTool_result({success: result});
        output.writeMessageBegin("startTool", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_startTool_result(err);
          output.writeMessageBegin("startTool", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("startTool", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.startTool(args.ctx, args.toolName, args.comment, args.extraParams, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_startTool_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("startTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("startTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_stopTool = function(seqid, input, output) {
  var args = new PublicResourceManager_stopTool_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.stopTool.length === 4) {
    Q.fcall(this._handler.stopTool, args.ctx, args.toolID, args.comment, args.extraParams)
      .then(function(result) {
        var result_obj = new PublicResourceManager_stopTool_result({success: result});
        output.writeMessageBegin("stopTool", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_stopTool_result(err);
          output.writeMessageBegin("stopTool", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("stopTool", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.stopTool(args.ctx, args.toolID, args.comment, args.extraParams, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_stopTool_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("stopTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("stopTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_enableUserServiceExternalAccess = function(seqid, input, output) {
  var args = new PublicResourceManager_enableUserServiceExternalAccess_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.enableUserServiceExternalAccess.length === 3) {
    Q.fcall(this._handler.enableUserServiceExternalAccess, args.ctx, args.toolID, args.password)
      .then(function(result) {
        var result_obj = new PublicResourceManager_enableUserServiceExternalAccess_result({success: result});
        output.writeMessageBegin("enableUserServiceExternalAccess", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_enableUserServiceExternalAccess_result(err);
          output.writeMessageBegin("enableUserServiceExternalAccess", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("enableUserServiceExternalAccess", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.enableUserServiceExternalAccess(args.ctx, args.toolID, args.password, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_enableUserServiceExternalAccess_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("enableUserServiceExternalAccess", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("enableUserServiceExternalAccess", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_disableUserServiceExternalAccess = function(seqid, input, output) {
  var args = new PublicResourceManager_disableUserServiceExternalAccess_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.disableUserServiceExternalAccess.length === 2) {
    Q.fcall(this._handler.disableUserServiceExternalAccess, args.ctx, args.toolID)
      .then(function(result) {
        var result_obj = new PublicResourceManager_disableUserServiceExternalAccess_result({success: result});
        output.writeMessageBegin("disableUserServiceExternalAccess", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_disableUserServiceExternalAccess_result(err);
          output.writeMessageBegin("disableUserServiceExternalAccess", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("disableUserServiceExternalAccess", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.disableUserServiceExternalAccess(args.ctx, args.toolID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_disableUserServiceExternalAccess_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("disableUserServiceExternalAccess", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("disableUserServiceExternalAccess", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_registerTool = function(seqid, input, output) {
  var args = new PublicResourceManager_registerTool_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.registerTool.length === 2) {
    Q.fcall(this._handler.registerTool, args.ctx, args.tool)
      .then(function(result) {
        var result_obj = new PublicResourceManager_registerTool_result({success: result});
        output.writeMessageBegin("registerTool", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_registerTool_result(err);
          output.writeMessageBegin("registerTool", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("registerTool", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.registerTool(args.ctx, args.tool, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_registerTool_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("registerTool", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("registerTool", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_removeUserService = function(seqid, input, output) {
  var args = new PublicResourceManager_removeUserService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeUserService.length === 2) {
    Q.fcall(this._handler.removeUserService, args.ctx, args.toolID)
      .then(function(result) {
        var result_obj = new PublicResourceManager_removeUserService_result({success: result});
        output.writeMessageBegin("removeUserService", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_removeUserService_result(err);
          output.writeMessageBegin("removeUserService", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeUserService", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeUserService(args.ctx, args.toolID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_removeUserService_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeUserService", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeUserService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicResourceManagerProcessor.prototype.process_editUserService = function(seqid, input, output) {
  var args = new PublicResourceManager_editUserService_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.editUserService.length === 2) {
    Q.fcall(this._handler.editUserService, args.ctx, args.tool)
      .then(function(result) {
        var result_obj = new PublicResourceManager_editUserService_result({success: result});
        output.writeMessageBegin("editUserService", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicResourceManager_editUserService_result(err);
          output.writeMessageBegin("editUserService", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("editUserService", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.editUserService(args.ctx, args.tool, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicResourceManager_editUserService_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("editUserService", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("editUserService", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
