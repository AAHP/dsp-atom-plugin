//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var task_broker_ttypes = require('./task_broker_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./task-scheduler_types');
//HELPER FUNCTIONS AND STRUCTURES

var PublicDmpTaskSchedulerService_getScheduledTask_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDmpTaskSchedulerService_getScheduledTask_args.prototype = {};
PublicDmpTaskSchedulerService_getScheduledTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_getScheduledTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_getScheduledTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_getScheduledTask_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ScheduledTask(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_getScheduledTask_result.prototype = {};
PublicDmpTaskSchedulerService_getScheduledTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScheduledTask();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_getScheduledTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_getScheduledTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_createScheduledTask_args = function(args) {
  this.ctx = null;
  this.name = null;
  this.schedule = null;
  this.taskParameters = null;
  this.apiToken = null;
  this.taskComment = null;
  this.taskMeta = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = new ttypes.Schedule(args.schedule);
    }
    if (args.taskParameters !== undefined && args.taskParameters !== null) {
      this.taskParameters = new task_broker_ttypes.TaskParameters(args.taskParameters);
    }
    if (args.apiToken !== undefined && args.apiToken !== null) {
      this.apiToken = args.apiToken;
    }
    if (args.taskComment !== undefined && args.taskComment !== null) {
      this.taskComment = args.taskComment;
    }
    if (args.taskMeta !== undefined && args.taskMeta !== null) {
      this.taskMeta = args.taskMeta;
    }
  }
};
PublicDmpTaskSchedulerService_createScheduledTask_args.prototype = {};
PublicDmpTaskSchedulerService_createScheduledTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedule = new ttypes.Schedule();
        this.schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskParameters = new task_broker_ttypes.TaskParameters();
        this.taskParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.apiToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.taskComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.taskMeta = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_createScheduledTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_createScheduledTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRUCT, 3);
    this.schedule.write(output);
    output.writeFieldEnd();
  }
  if (this.taskParameters !== null && this.taskParameters !== undefined) {
    output.writeFieldBegin('taskParameters', Thrift.Type.STRUCT, 4);
    this.taskParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.apiToken !== null && this.apiToken !== undefined) {
    output.writeFieldBegin('apiToken', Thrift.Type.STRING, 5);
    output.writeString(this.apiToken);
    output.writeFieldEnd();
  }
  if (this.taskComment !== null && this.taskComment !== undefined) {
    output.writeFieldBegin('taskComment', Thrift.Type.STRING, 6);
    output.writeString(this.taskComment);
    output.writeFieldEnd();
  }
  if (this.taskMeta !== null && this.taskMeta !== undefined) {
    output.writeFieldBegin('taskMeta', Thrift.Type.STRING, 7);
    output.writeString(this.taskMeta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_createScheduledTask_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ScheduledTask(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_createScheduledTask_result.prototype = {};
PublicDmpTaskSchedulerService_createScheduledTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScheduledTask();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_createScheduledTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_createScheduledTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_updateScheduledTask_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.name = null;
  this.schedule = null;
  this.taskParameters = null;
  this.apiToken = null;
  this.taskComment = null;
  this.taskMeta = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.schedule !== undefined && args.schedule !== null) {
      this.schedule = new ttypes.Schedule(args.schedule);
    }
    if (args.taskParameters !== undefined && args.taskParameters !== null) {
      this.taskParameters = new task_broker_ttypes.TaskParameters(args.taskParameters);
    }
    if (args.apiToken !== undefined && args.apiToken !== null) {
      this.apiToken = args.apiToken;
    }
    if (args.taskComment !== undefined && args.taskComment !== null) {
      this.taskComment = args.taskComment;
    }
    if (args.taskMeta !== undefined && args.taskMeta !== null) {
      this.taskMeta = args.taskMeta;
    }
  }
};
PublicDmpTaskSchedulerService_updateScheduledTask_args.prototype = {};
PublicDmpTaskSchedulerService_updateScheduledTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.schedule = new ttypes.Schedule();
        this.schedule.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskParameters = new task_broker_ttypes.TaskParameters();
        this.taskParameters.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.apiToken = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.taskComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.taskMeta = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_updateScheduledTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_updateScheduledTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.schedule !== null && this.schedule !== undefined) {
    output.writeFieldBegin('schedule', Thrift.Type.STRUCT, 4);
    this.schedule.write(output);
    output.writeFieldEnd();
  }
  if (this.taskParameters !== null && this.taskParameters !== undefined) {
    output.writeFieldBegin('taskParameters', Thrift.Type.STRUCT, 5);
    this.taskParameters.write(output);
    output.writeFieldEnd();
  }
  if (this.apiToken !== null && this.apiToken !== undefined) {
    output.writeFieldBegin('apiToken', Thrift.Type.STRING, 6);
    output.writeString(this.apiToken);
    output.writeFieldEnd();
  }
  if (this.taskComment !== null && this.taskComment !== undefined) {
    output.writeFieldBegin('taskComment', Thrift.Type.STRING, 7);
    output.writeString(this.taskComment);
    output.writeFieldEnd();
  }
  if (this.taskMeta !== null && this.taskMeta !== undefined) {
    output.writeFieldBegin('taskMeta', Thrift.Type.STRING, 8);
    output.writeString(this.taskMeta);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_updateScheduledTask_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ScheduledTask(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_updateScheduledTask_result.prototype = {};
PublicDmpTaskSchedulerService_updateScheduledTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScheduledTask();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_updateScheduledTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_updateScheduledTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_removeScheduledTask_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDmpTaskSchedulerService_removeScheduledTask_args.prototype = {};
PublicDmpTaskSchedulerService_removeScheduledTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_removeScheduledTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_removeScheduledTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_removeScheduledTask_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_removeScheduledTask_result.prototype = {};
PublicDmpTaskSchedulerService_removeScheduledTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_removeScheduledTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_removeScheduledTask_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_activateScheduledTask_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDmpTaskSchedulerService_activateScheduledTask_args.prototype = {};
PublicDmpTaskSchedulerService_activateScheduledTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_activateScheduledTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_activateScheduledTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_activateScheduledTask_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_activateScheduledTask_result.prototype = {};
PublicDmpTaskSchedulerService_activateScheduledTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_activateScheduledTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_activateScheduledTask_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_deactivateScheduledTask_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDmpTaskSchedulerService_deactivateScheduledTask_args.prototype = {};
PublicDmpTaskSchedulerService_deactivateScheduledTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_deactivateScheduledTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_deactivateScheduledTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_deactivateScheduledTask_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_deactivateScheduledTask_result.prototype = {};
PublicDmpTaskSchedulerService_deactivateScheduledTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_deactivateScheduledTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_deactivateScheduledTask_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_listScheduledTasks_args = function(args) {
  this.ctx = null;
  this.paginator = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
  }
};
PublicDmpTaskSchedulerService_listScheduledTasks_args.prototype = {};
PublicDmpTaskSchedulerService_listScheduledTasks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_listScheduledTasks_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_listScheduledTasks_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 2);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_listScheduledTasks_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ScheduledTaskCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_listScheduledTasks_result.prototype = {};
PublicDmpTaskSchedulerService_listScheduledTasks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScheduledTaskCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_listScheduledTasks_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_listScheduledTasks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_getScheduledTaskActivities_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.paginator = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
  }
};
PublicDmpTaskSchedulerService_getScheduledTaskActivities_args.prototype = {};
PublicDmpTaskSchedulerService_getScheduledTaskActivities_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_getScheduledTaskActivities_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_getScheduledTaskActivities_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 3);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_getScheduledTaskActivities_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ScheduledTaskActivityCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_getScheduledTaskActivities_result.prototype = {};
PublicDmpTaskSchedulerService_getScheduledTaskActivities_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScheduledTaskActivityCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_getScheduledTaskActivities_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_getScheduledTaskActivities_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_runScheduledTask_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDmpTaskSchedulerService_runScheduledTask_args.prototype = {};
PublicDmpTaskSchedulerService_runScheduledTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_runScheduledTask_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_runScheduledTask_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_runScheduledTask_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_runScheduledTask_result.prototype = {};
PublicDmpTaskSchedulerService_runScheduledTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_runScheduledTask_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_runScheduledTask_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_findScheduledTasks_args = function(args) {
  this.ctx = null;
  this.filter = null;
  this.paginator = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.ScheduledTaskFilter(args.filter);
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
  }
};
PublicDmpTaskSchedulerService_findScheduledTasks_args.prototype = {};
PublicDmpTaskSchedulerService_findScheduledTasks_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.ScheduledTaskFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_findScheduledTasks_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_findScheduledTasks_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 3);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerService_findScheduledTasks_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ScheduledTaskCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpTaskSchedulerService_findScheduledTasks_result.prototype = {};
PublicDmpTaskSchedulerService_findScheduledTasks_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ScheduledTaskCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpTaskSchedulerService_findScheduledTasks_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpTaskSchedulerService_findScheduledTasks_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpTaskSchedulerServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(PublicDmpTaskSchedulerServiceClient, BaseServiceClient);
PublicDmpTaskSchedulerServiceClient.prototype.seqid = function() { return this._seqid; };
PublicDmpTaskSchedulerServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
PublicDmpTaskSchedulerServiceClient.prototype.getScheduledTask = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScheduledTask(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScheduledTask(ctx, ID);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_getScheduledTask = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getScheduledTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_getScheduledTask_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_getScheduledTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_getScheduledTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScheduledTask failed: unknown result');
};
PublicDmpTaskSchedulerServiceClient.prototype.createScheduledTask = function(ctx, name, schedule, taskParameters, apiToken, taskComment, taskMeta, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createScheduledTask(ctx, name, schedule, taskParameters, apiToken, taskComment, taskMeta);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createScheduledTask(ctx, name, schedule, taskParameters, apiToken, taskComment, taskMeta);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_createScheduledTask = function(ctx, name, schedule, taskParameters, apiToken, taskComment, taskMeta) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createScheduledTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_createScheduledTask_args();
  args.ctx = ctx;
  args.name = name;
  args.schedule = schedule;
  args.taskParameters = taskParameters;
  args.apiToken = apiToken;
  args.taskComment = taskComment;
  args.taskMeta = taskMeta;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_createScheduledTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_createScheduledTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createScheduledTask failed: unknown result');
};
PublicDmpTaskSchedulerServiceClient.prototype.updateScheduledTask = function(ctx, ID, name, schedule, taskParameters, apiToken, taskComment, taskMeta, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateScheduledTask(ctx, ID, name, schedule, taskParameters, apiToken, taskComment, taskMeta);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateScheduledTask(ctx, ID, name, schedule, taskParameters, apiToken, taskComment, taskMeta);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_updateScheduledTask = function(ctx, ID, name, schedule, taskParameters, apiToken, taskComment, taskMeta) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateScheduledTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_updateScheduledTask_args();
  args.ctx = ctx;
  args.ID = ID;
  args.name = name;
  args.schedule = schedule;
  args.taskParameters = taskParameters;
  args.apiToken = apiToken;
  args.taskComment = taskComment;
  args.taskMeta = taskMeta;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_updateScheduledTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_updateScheduledTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateScheduledTask failed: unknown result');
};
PublicDmpTaskSchedulerServiceClient.prototype.removeScheduledTask = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_removeScheduledTask(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_removeScheduledTask(ctx, ID);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_removeScheduledTask = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('removeScheduledTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_removeScheduledTask_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_removeScheduledTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_removeScheduledTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDmpTaskSchedulerServiceClient.prototype.activateScheduledTask = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_activateScheduledTask(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_activateScheduledTask(ctx, ID);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_activateScheduledTask = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('activateScheduledTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_activateScheduledTask_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_activateScheduledTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_activateScheduledTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDmpTaskSchedulerServiceClient.prototype.deactivateScheduledTask = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deactivateScheduledTask(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deactivateScheduledTask(ctx, ID);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_deactivateScheduledTask = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deactivateScheduledTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_deactivateScheduledTask_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_deactivateScheduledTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_deactivateScheduledTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDmpTaskSchedulerServiceClient.prototype.listScheduledTasks = function(ctx, paginator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listScheduledTasks(ctx, paginator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listScheduledTasks(ctx, paginator);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_listScheduledTasks = function(ctx, paginator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listScheduledTasks', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_listScheduledTasks_args();
  args.ctx = ctx;
  args.paginator = paginator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_listScheduledTasks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_listScheduledTasks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listScheduledTasks failed: unknown result');
};
PublicDmpTaskSchedulerServiceClient.prototype.getScheduledTaskActivities = function(ctx, ID, paginator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getScheduledTaskActivities(ctx, ID, paginator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getScheduledTaskActivities(ctx, ID, paginator);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_getScheduledTaskActivities = function(ctx, ID, paginator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getScheduledTaskActivities', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_getScheduledTaskActivities_args();
  args.ctx = ctx;
  args.ID = ID;
  args.paginator = paginator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_getScheduledTaskActivities = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_getScheduledTaskActivities_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getScheduledTaskActivities failed: unknown result');
};
PublicDmpTaskSchedulerServiceClient.prototype.runScheduledTask = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_runScheduledTask(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_runScheduledTask(ctx, ID);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_runScheduledTask = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('runScheduledTask', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_runScheduledTask_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_runScheduledTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_runScheduledTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDmpTaskSchedulerServiceClient.prototype.findScheduledTasks = function(ctx, filter, paginator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findScheduledTasks(ctx, filter, paginator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findScheduledTasks(ctx, filter, paginator);
  }
};

PublicDmpTaskSchedulerServiceClient.prototype.send_findScheduledTasks = function(ctx, filter, paginator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findScheduledTasks', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpTaskSchedulerService_findScheduledTasks_args();
  args.ctx = ctx;
  args.filter = filter;
  args.paginator = paginator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpTaskSchedulerServiceClient.prototype.recv_findScheduledTasks = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpTaskSchedulerService_findScheduledTasks_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findScheduledTasks failed: unknown result');
};
var PublicDmpTaskSchedulerServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(PublicDmpTaskSchedulerServiceProcessor, BaseServiceProcessor);
PublicDmpTaskSchedulerServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PublicDmpTaskSchedulerServiceProcessor.prototype.process_getScheduledTask = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_getScheduledTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScheduledTask.length === 2) {
    Q.fcall(this._handler.getScheduledTask, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_getScheduledTask_result({success: result});
        output.writeMessageBegin("getScheduledTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_getScheduledTask_result(err);
          output.writeMessageBegin("getScheduledTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getScheduledTask(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_getScheduledTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getScheduledTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_createScheduledTask = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_createScheduledTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createScheduledTask.length === 7) {
    Q.fcall(this._handler.createScheduledTask, args.ctx, args.name, args.schedule, args.taskParameters, args.apiToken, args.taskComment, args.taskMeta)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_createScheduledTask_result({success: result});
        output.writeMessageBegin("createScheduledTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_createScheduledTask_result(err);
          output.writeMessageBegin("createScheduledTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createScheduledTask(args.ctx, args.name, args.schedule, args.taskParameters, args.apiToken, args.taskComment, args.taskMeta, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_createScheduledTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createScheduledTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_updateScheduledTask = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_updateScheduledTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateScheduledTask.length === 8) {
    Q.fcall(this._handler.updateScheduledTask, args.ctx, args.ID, args.name, args.schedule, args.taskParameters, args.apiToken, args.taskComment, args.taskMeta)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_updateScheduledTask_result({success: result});
        output.writeMessageBegin("updateScheduledTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_updateScheduledTask_result(err);
          output.writeMessageBegin("updateScheduledTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateScheduledTask(args.ctx, args.ID, args.name, args.schedule, args.taskParameters, args.apiToken, args.taskComment, args.taskMeta, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_updateScheduledTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateScheduledTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_removeScheduledTask = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_removeScheduledTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.removeScheduledTask.length === 2) {
    Q.fcall(this._handler.removeScheduledTask, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_removeScheduledTask_result({success: result});
        output.writeMessageBegin("removeScheduledTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_removeScheduledTask_result(err);
          output.writeMessageBegin("removeScheduledTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("removeScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.removeScheduledTask(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_removeScheduledTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("removeScheduledTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("removeScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_activateScheduledTask = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_activateScheduledTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.activateScheduledTask.length === 2) {
    Q.fcall(this._handler.activateScheduledTask, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_activateScheduledTask_result({success: result});
        output.writeMessageBegin("activateScheduledTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_activateScheduledTask_result(err);
          output.writeMessageBegin("activateScheduledTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("activateScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.activateScheduledTask(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_activateScheduledTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("activateScheduledTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("activateScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_deactivateScheduledTask = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_deactivateScheduledTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deactivateScheduledTask.length === 2) {
    Q.fcall(this._handler.deactivateScheduledTask, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_deactivateScheduledTask_result({success: result});
        output.writeMessageBegin("deactivateScheduledTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_deactivateScheduledTask_result(err);
          output.writeMessageBegin("deactivateScheduledTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deactivateScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deactivateScheduledTask(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_deactivateScheduledTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deactivateScheduledTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deactivateScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_listScheduledTasks = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_listScheduledTasks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listScheduledTasks.length === 2) {
    Q.fcall(this._handler.listScheduledTasks, args.ctx, args.paginator)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_listScheduledTasks_result({success: result});
        output.writeMessageBegin("listScheduledTasks", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_listScheduledTasks_result(err);
          output.writeMessageBegin("listScheduledTasks", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listScheduledTasks", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listScheduledTasks(args.ctx, args.paginator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_listScheduledTasks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listScheduledTasks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listScheduledTasks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_getScheduledTaskActivities = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_getScheduledTaskActivities_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getScheduledTaskActivities.length === 3) {
    Q.fcall(this._handler.getScheduledTaskActivities, args.ctx, args.ID, args.paginator)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_getScheduledTaskActivities_result({success: result});
        output.writeMessageBegin("getScheduledTaskActivities", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_getScheduledTaskActivities_result(err);
          output.writeMessageBegin("getScheduledTaskActivities", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getScheduledTaskActivities", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getScheduledTaskActivities(args.ctx, args.ID, args.paginator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_getScheduledTaskActivities_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getScheduledTaskActivities", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getScheduledTaskActivities", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_runScheduledTask = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_runScheduledTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.runScheduledTask.length === 2) {
    Q.fcall(this._handler.runScheduledTask, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_runScheduledTask_result({success: result});
        output.writeMessageBegin("runScheduledTask", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_runScheduledTask_result(err);
          output.writeMessageBegin("runScheduledTask", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("runScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.runScheduledTask(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_runScheduledTask_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("runScheduledTask", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("runScheduledTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpTaskSchedulerServiceProcessor.prototype.process_findScheduledTasks = function(seqid, input, output) {
  var args = new PublicDmpTaskSchedulerService_findScheduledTasks_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findScheduledTasks.length === 3) {
    Q.fcall(this._handler.findScheduledTasks, args.ctx, args.filter, args.paginator)
      .then(function(result) {
        var result_obj = new PublicDmpTaskSchedulerService_findScheduledTasks_result({success: result});
        output.writeMessageBegin("findScheduledTasks", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpTaskSchedulerService_findScheduledTasks_result(err);
          output.writeMessageBegin("findScheduledTasks", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("findScheduledTasks", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findScheduledTasks(args.ctx, args.filter, args.paginator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpTaskSchedulerService_findScheduledTasks_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findScheduledTasks", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findScheduledTasks", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
