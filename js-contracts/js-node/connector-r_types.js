//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var TaskPayload = module.exports.TaskPayload = function(args) {
  this.scriptID = null;
  this.workingDirID = null;
  this.appName = null;
  this.envVars = null;
  this.entryPoint = null;
  if (args) {
    if (args.scriptID !== undefined && args.scriptID !== null) {
      this.scriptID = args.scriptID;
    }
    if (args.workingDirID !== undefined && args.workingDirID !== null) {
      this.workingDirID = args.workingDirID;
    }
    if (args.appName !== undefined && args.appName !== null) {
      this.appName = args.appName;
    }
    if (args.envVars !== undefined && args.envVars !== null) {
      this.envVars = Thrift.copyMap(args.envVars, [null]);
    }
    if (args.entryPoint !== undefined && args.entryPoint !== null) {
      this.entryPoint = args.entryPoint;
    }
  }
};
TaskPayload.prototype = {};
TaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.scriptID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.workingDirID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.appName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size0 = 0;
        var _rtmp34;
        this.envVars = {};
        var _ktype1 = 0;
        var _vtype2 = 0;
        _rtmp34 = input.readMapBegin();
        _ktype1 = _rtmp34.ktype;
        _vtype2 = _rtmp34.vtype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var key6 = null;
          var val7 = null;
          key6 = input.readString();
          val7 = input.readString();
          this.envVars[key6] = val7;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.entryPoint = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskPayload.prototype.write = function(output) {
  output.writeStructBegin('TaskPayload');
  if (this.scriptID !== null && this.scriptID !== undefined) {
    output.writeFieldBegin('scriptID', Thrift.Type.STRING, 1);
    output.writeString(this.scriptID);
    output.writeFieldEnd();
  }
  if (this.workingDirID !== null && this.workingDirID !== undefined) {
    output.writeFieldBegin('workingDirID', Thrift.Type.STRING, 2);
    output.writeString(this.workingDirID);
    output.writeFieldEnd();
  }
  if (this.appName !== null && this.appName !== undefined) {
    output.writeFieldBegin('appName', Thrift.Type.STRING, 3);
    output.writeString(this.appName);
    output.writeFieldEnd();
  }
  if (this.envVars !== null && this.envVars !== undefined) {
    output.writeFieldBegin('envVars', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.envVars));
    for (var kiter8 in this.envVars)
    {
      if (this.envVars.hasOwnProperty(kiter8))
      {
        var viter9 = this.envVars[kiter8];
        output.writeString(kiter8);
        output.writeString(viter9);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.entryPoint !== null && this.entryPoint !== undefined) {
    output.writeFieldBegin('entryPoint', Thrift.Type.STRING, 5);
    output.writeString(this.entryPoint);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'dmp-connector-r';
ttypes.VERSION = '0.2.0';
ttypes.TASK_NAME = 'task-r-execute';
ttypes.RSHINY_EXECUTE = 'task-rshiny-execute';
ttypes.ERR_CODE = 57;
