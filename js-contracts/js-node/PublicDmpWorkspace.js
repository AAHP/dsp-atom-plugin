//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var vfs_ttypes = require('./vfs_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./workspace_types');
//HELPER FUNCTIONS AND STRUCTURES

var PublicDmpWorkspace_getObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDmpWorkspace_getObject_args.prototype = {};
PublicDmpWorkspace_getObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_getObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_getObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_getObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_getObject_result.prototype = {};
PublicDmpWorkspace_getObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_getObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_getObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_renameObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.newName = null;
  this.newParentID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.newName !== undefined && args.newName !== null) {
      this.newName = args.newName;
    }
    if (args.newParentID !== undefined && args.newParentID !== null) {
      this.newParentID = args.newParentID;
    }
  }
};
PublicDmpWorkspace_renameObject_args.prototype = {};
PublicDmpWorkspace_renameObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newParentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_renameObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_renameObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 3);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  if (this.newParentID !== null && this.newParentID !== undefined) {
    output.writeFieldBegin('newParentID', Thrift.Type.STRING, 4);
    output.writeString(this.newParentID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_renameObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_renameObject_result.prototype = {};
PublicDmpWorkspace_renameObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_renameObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_renameObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_cloneObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.newName = null;
  this.newParentID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.newName !== undefined && args.newName !== null) {
      this.newName = args.newName;
    }
    if (args.newParentID !== undefined && args.newParentID !== null) {
      this.newParentID = args.newParentID;
    }
  }
};
PublicDmpWorkspace_cloneObject_args.prototype = {};
PublicDmpWorkspace_cloneObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.newParentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_cloneObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_cloneObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.newName !== null && this.newName !== undefined) {
    output.writeFieldBegin('newName', Thrift.Type.STRING, 3);
    output.writeString(this.newName);
    output.writeFieldEnd();
  }
  if (this.newParentID !== null && this.newParentID !== undefined) {
    output.writeFieldBegin('newParentID', Thrift.Type.STRING, 4);
    output.writeString(this.newParentID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_cloneObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_cloneObject_result.prototype = {};
PublicDmpWorkspace_cloneObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_cloneObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_cloneObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_deleteObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = Thrift.copyList(args.ID, [null]);
    }
  }
};
PublicDmpWorkspace_deleteObject_args.prototype = {};
PublicDmpWorkspace_deleteObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.ID = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.ID.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_deleteObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_deleteObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ID.length);
    for (var iter7 in this.ID)
    {
      if (this.ID.hasOwnProperty(iter7))
      {
        iter7 = this.ID[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_deleteObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_deleteObject_result.prototype = {};
PublicDmpWorkspace_deleteObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_deleteObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_deleteObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_listObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.paginator = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
  }
};
PublicDmpWorkspace_listObject_args.prototype = {};
PublicDmpWorkspace_listObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_listObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_listObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 3);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_listObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.ObjectsCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_listObject_result.prototype = {};
PublicDmpWorkspace_listObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.ObjectsCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_listObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_listObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_addFolder_args = function(args) {
  this.ctx = null;
  this.parentID = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PublicDmpWorkspace_addFolder_args.prototype = {};
PublicDmpWorkspace_addFolder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_addFolder_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_addFolder_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_addFolder_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_addFolder_result.prototype = {};
PublicDmpWorkspace_addFolder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_addFolder_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_addFolder_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_getStats_args = function(args) {
  this.ctx = null;
  this.folderID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.folderID !== undefined && args.folderID !== null) {
      this.folderID = args.folderID;
    }
  }
};
PublicDmpWorkspace_getStats_args.prototype = {};
PublicDmpWorkspace_getStats_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.folderID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_getStats_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_getStats_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.folderID !== null && this.folderID !== undefined) {
    output.writeFieldBegin('folderID', Thrift.Type.STRING, 2);
    output.writeString(this.folderID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_getStats_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.FolderStats(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_getStats_result.prototype = {};
PublicDmpWorkspace_getStats_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.FolderStats();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_getStats_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_getStats_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_previewFile_args = function(args) {
  this.ctx = null;
  this.vfsID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.vfsID !== undefined && args.vfsID !== null) {
      this.vfsID = args.vfsID;
    }
  }
};
PublicDmpWorkspace_previewFile_args.prototype = {};
PublicDmpWorkspace_previewFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vfsID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_previewFile_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_previewFile_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.vfsID !== null && this.vfsID !== undefined) {
    output.writeFieldBegin('vfsID', Thrift.Type.STRING, 2);
    output.writeString(this.vfsID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_previewFile_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_previewFile_result.prototype = {};
PublicDmpWorkspace_previewFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_previewFile_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_previewFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_lookupObject_args = function(args) {
  this.ctx = null;
  this.parentID = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PublicDmpWorkspace_lookupObject_args.prototype = {};
PublicDmpWorkspace_lookupObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_lookupObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_lookupObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_lookupObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_lookupObject_result.prototype = {};
PublicDmpWorkspace_lookupObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_lookupObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_lookupObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_readObjectContent_args = function(args) {
  this.ctx = null;
  this.vfsID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.vfsID !== undefined && args.vfsID !== null) {
      this.vfsID = args.vfsID;
    }
  }
};
PublicDmpWorkspace_readObjectContent_args.prototype = {};
PublicDmpWorkspace_readObjectContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vfsID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_readObjectContent_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_readObjectContent_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.vfsID !== null && this.vfsID !== undefined) {
    output.writeFieldBegin('vfsID', Thrift.Type.STRING, 2);
    output.writeString(this.vfsID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_readObjectContent_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_readObjectContent_result.prototype = {};
PublicDmpWorkspace_readObjectContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_readObjectContent_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_readObjectContent_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_writeObjectContent_args = function(args) {
  this.ctx = null;
  this.vfsID = null;
  this.content = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.vfsID !== undefined && args.vfsID !== null) {
      this.vfsID = args.vfsID;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
PublicDmpWorkspace_writeObjectContent_args.prototype = {};
PublicDmpWorkspace_writeObjectContent_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vfsID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_writeObjectContent_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_writeObjectContent_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.vfsID !== null && this.vfsID !== undefined) {
    output.writeFieldBegin('vfsID', Thrift.Type.STRING, 2);
    output.writeString(this.vfsID);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 3);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_writeObjectContent_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_writeObjectContent_result.prototype = {};
PublicDmpWorkspace_writeObjectContent_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_writeObjectContent_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_writeObjectContent_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_addObject_args = function(args) {
  this.ctx = null;
  this.parentID = null;
  this.name = null;
  this.mimeType = null;
  this.content = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.mimeType !== undefined && args.mimeType !== null) {
      this.mimeType = args.mimeType;
    }
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
  }
};
PublicDmpWorkspace_addObject_args.prototype = {};
PublicDmpWorkspace_addObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.mimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_addObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_addObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 3);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.mimeType !== null && this.mimeType !== undefined) {
    output.writeFieldBegin('mimeType', Thrift.Type.STRING, 4);
    output.writeString(this.mimeType);
    output.writeFieldEnd();
  }
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 5);
    output.writeBinary(this.content);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_addObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_addObject_result.prototype = {};
PublicDmpWorkspace_addObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_addObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_addObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_hardDeleteObject_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
PublicDmpWorkspace_hardDeleteObject_args.prototype = {};
PublicDmpWorkspace_hardDeleteObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_hardDeleteObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_hardDeleteObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_hardDeleteObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_hardDeleteObject_result.prototype = {};
PublicDmpWorkspace_hardDeleteObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_hardDeleteObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_hardDeleteObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_restoreDeletedObject_args = function(args) {
  this.ctx = null;
  this.parentID = null;
  this.ID = null;
  this.name = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.parentID !== undefined && args.parentID !== null) {
      this.parentID = args.parentID;
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
PublicDmpWorkspace_restoreDeletedObject_args.prototype = {};
PublicDmpWorkspace_restoreDeletedObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.parentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_restoreDeletedObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_restoreDeletedObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.parentID !== null && this.parentID !== undefined) {
    output.writeFieldBegin('parentID', Thrift.Type.STRING, 2);
    output.writeString(this.parentID);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 3);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_restoreDeletedObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_restoreDeletedObject_result.prototype = {};
PublicDmpWorkspace_restoreDeletedObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_restoreDeletedObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_restoreDeletedObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_listDeletedObject_args = function(args) {
  this.ctx = null;
  this.paginator = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.paginator !== undefined && args.paginator !== null) {
      this.paginator = new common_ttypes.PageParams(args.paginator);
    }
  }
};
PublicDmpWorkspace_listDeletedObject_args.prototype = {};
PublicDmpWorkspace_listDeletedObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.paginator = new common_ttypes.PageParams();
        this.paginator.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_listDeletedObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_listDeletedObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.paginator !== null && this.paginator !== undefined) {
    output.writeFieldBegin('paginator', Thrift.Type.STRUCT, 2);
    this.paginator.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_listDeletedObject_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.ObjectsCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_listDeletedObject_result.prototype = {};
PublicDmpWorkspace_listDeletedObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.ObjectsCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_listDeletedObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_listDeletedObject_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_cleanDeletedObjects_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
  }
};
PublicDmpWorkspace_cleanDeletedObjects_args.prototype = {};
PublicDmpWorkspace_cleanDeletedObjects_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_cleanDeletedObjects_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_cleanDeletedObjects_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_cleanDeletedObjects_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_cleanDeletedObjects_result.prototype = {};
PublicDmpWorkspace_cleanDeletedObjects_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_cleanDeletedObjects_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_cleanDeletedObjects_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_updateMimeType_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.mimeType = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.mimeType !== undefined && args.mimeType !== null) {
      this.mimeType = args.mimeType;
    }
  }
};
PublicDmpWorkspace_updateMimeType_args.prototype = {};
PublicDmpWorkspace_updateMimeType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.mimeType = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_updateMimeType_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_updateMimeType_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.mimeType !== null && this.mimeType !== undefined) {
    output.writeFieldBegin('mimeType', Thrift.Type.STRING, 3);
    output.writeString(this.mimeType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_updateMimeType_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_updateMimeType_result.prototype = {};
PublicDmpWorkspace_updateMimeType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_updateMimeType_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_updateMimeType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_updateMetadata_args = function(args) {
  this.ctx = null;
  this.ID = null;
  this.metadata = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.metadata !== undefined && args.metadata !== null) {
      this.metadata = Thrift.copyMap(args.metadata, [null]);
    }
  }
};
PublicDmpWorkspace_updateMetadata_args.prototype = {};
PublicDmpWorkspace_updateMetadata_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.metadata = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = input.readString();
          this.metadata[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_updateMetadata_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_updateMetadata_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.metadata !== null && this.metadata !== undefined) {
    output.writeFieldBegin('metadata', Thrift.Type.MAP, 3);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.metadata));
    for (var kiter16 in this.metadata)
    {
      if (this.metadata.hasOwnProperty(kiter16))
      {
        var viter17 = this.metadata[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_updateMetadata_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new vfs_ttypes.Object(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_updateMetadata_result.prototype = {};
PublicDmpWorkspace_updateMetadata_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new vfs_ttypes.Object();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_updateMetadata_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_updateMetadata_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_moveObject_args = function(args) {
  this.ctx = null;
  this.IDs = null;
  this.newParentID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.IDs !== undefined && args.IDs !== null) {
      this.IDs = Thrift.copyList(args.IDs, [null]);
    }
    if (args.newParentID !== undefined && args.newParentID !== null) {
      this.newParentID = args.newParentID;
    }
  }
};
PublicDmpWorkspace_moveObject_args.prototype = {};
PublicDmpWorkspace_moveObject_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.IDs = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = input.readString();
          this.IDs.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.newParentID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_moveObject_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_moveObject_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.IDs !== null && this.IDs !== undefined) {
    output.writeFieldBegin('IDs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.IDs.length);
    for (var iter25 in this.IDs)
    {
      if (this.IDs.hasOwnProperty(iter25))
      {
        iter25 = this.IDs[iter25];
        output.writeString(iter25);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.newParentID !== null && this.newParentID !== undefined) {
    output.writeFieldBegin('newParentID', Thrift.Type.STRING, 3);
    output.writeString(this.newParentID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_moveObject_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_moveObject_result.prototype = {};
PublicDmpWorkspace_moveObject_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_moveObject_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_moveObject_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_shareFolder_args = function(args) {
  this.ctx = null;
  this.IDs = null;
  this.sharingStatus = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.IDs !== undefined && args.IDs !== null) {
      this.IDs = Thrift.copyList(args.IDs, [null]);
    }
    if (args.sharingStatus !== undefined && args.sharingStatus !== null) {
      this.sharingStatus = args.sharingStatus;
    }
  }
};
PublicDmpWorkspace_shareFolder_args.prototype = {};
PublicDmpWorkspace_shareFolder_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.IDs = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = input.readString();
          this.IDs.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.sharingStatus = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_shareFolder_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_shareFolder_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.IDs !== null && this.IDs !== undefined) {
    output.writeFieldBegin('IDs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.IDs.length);
    for (var iter33 in this.IDs)
    {
      if (this.IDs.hasOwnProperty(iter33))
      {
        iter33 = this.IDs[iter33];
        output.writeString(iter33);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.sharingStatus !== null && this.sharingStatus !== undefined) {
    output.writeFieldBegin('sharingStatus', Thrift.Type.BYTE, 3);
    output.writeByte(this.sharingStatus);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_shareFolder_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_shareFolder_result.prototype = {};
PublicDmpWorkspace_shareFolder_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_shareFolder_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_shareFolder_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_updateSharing_args = function(args) {
  this.ctx = null;
  this.IDs = null;
  this.globalStatus = null;
  this.sharedUsersCollection = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.IDs !== undefined && args.IDs !== null) {
      this.IDs = Thrift.copyList(args.IDs, [null]);
    }
    if (args.globalStatus !== undefined && args.globalStatus !== null) {
      this.globalStatus = args.globalStatus;
    }
    if (args.sharedUsersCollection !== undefined && args.sharedUsersCollection !== null) {
      this.sharedUsersCollection = new vfs_ttypes.SharedUsersCollection(args.sharedUsersCollection);
    }
  }
};
PublicDmpWorkspace_updateSharing_args.prototype = {};
PublicDmpWorkspace_updateSharing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.IDs = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = input.readString();
          this.IDs.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BYTE) {
        this.globalStatus = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.sharedUsersCollection = new vfs_ttypes.SharedUsersCollection();
        this.sharedUsersCollection.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_updateSharing_args.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_updateSharing_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.IDs !== null && this.IDs !== undefined) {
    output.writeFieldBegin('IDs', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.IDs.length);
    for (var iter41 in this.IDs)
    {
      if (this.IDs.hasOwnProperty(iter41))
      {
        iter41 = this.IDs[iter41];
        output.writeString(iter41);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.globalStatus !== null && this.globalStatus !== undefined) {
    output.writeFieldBegin('globalStatus', Thrift.Type.BYTE, 3);
    output.writeByte(this.globalStatus);
    output.writeFieldEnd();
  }
  if (this.sharedUsersCollection !== null && this.sharedUsersCollection !== undefined) {
    output.writeFieldBegin('sharedUsersCollection', Thrift.Type.STRUCT, 4);
    this.sharedUsersCollection.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspace_updateSharing_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicDmpWorkspace_updateSharing_result.prototype = {};
PublicDmpWorkspace_updateSharing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicDmpWorkspace_updateSharing_result.prototype.write = function(output) {
  output.writeStructBegin('PublicDmpWorkspace_updateSharing_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicDmpWorkspaceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(PublicDmpWorkspaceClient, BaseServiceClient);
PublicDmpWorkspaceClient.prototype.seqid = function() { return this._seqid; };
PublicDmpWorkspaceClient.prototype.new_seqid = function() { return this._seqid += 1; };
PublicDmpWorkspaceClient.prototype.getObject = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getObject(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getObject(ctx, ID);
  }
};

PublicDmpWorkspaceClient.prototype.send_getObject = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_getObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_getObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_getObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.renameObject = function(ctx, ID, newName, newParentID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_renameObject(ctx, ID, newName, newParentID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_renameObject(ctx, ID, newName, newParentID);
  }
};

PublicDmpWorkspaceClient.prototype.send_renameObject = function(ctx, ID, newName, newParentID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('renameObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_renameObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.newName = newName;
  args.newParentID = newParentID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_renameObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_renameObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('renameObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.cloneObject = function(ctx, ID, newName, newParentID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cloneObject(ctx, ID, newName, newParentID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cloneObject(ctx, ID, newName, newParentID);
  }
};

PublicDmpWorkspaceClient.prototype.send_cloneObject = function(ctx, ID, newName, newParentID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cloneObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_cloneObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.newName = newName;
  args.newParentID = newParentID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_cloneObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_cloneObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cloneObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.deleteObject = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteObject(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteObject(ctx, ID);
  }
};

PublicDmpWorkspaceClient.prototype.send_deleteObject = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_deleteObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_deleteObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_deleteObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.listObject = function(ctx, ID, paginator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listObject(ctx, ID, paginator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listObject(ctx, ID, paginator);
  }
};

PublicDmpWorkspaceClient.prototype.send_listObject = function(ctx, ID, paginator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_listObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.paginator = paginator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_listObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_listObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.addFolder = function(ctx, parentID, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addFolder(ctx, parentID, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addFolder(ctx, parentID, name);
  }
};

PublicDmpWorkspaceClient.prototype.send_addFolder = function(ctx, parentID, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addFolder', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_addFolder_args();
  args.ctx = ctx;
  args.parentID = parentID;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_addFolder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_addFolder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addFolder failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.getStats = function(ctx, folderID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getStats(ctx, folderID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getStats(ctx, folderID);
  }
};

PublicDmpWorkspaceClient.prototype.send_getStats = function(ctx, folderID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getStats', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_getStats_args();
  args.ctx = ctx;
  args.folderID = folderID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_getStats = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_getStats_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getStats failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.previewFile = function(ctx, vfsID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_previewFile(ctx, vfsID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_previewFile(ctx, vfsID);
  }
};

PublicDmpWorkspaceClient.prototype.send_previewFile = function(ctx, vfsID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('previewFile', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_previewFile_args();
  args.ctx = ctx;
  args.vfsID = vfsID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_previewFile = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_previewFile_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('previewFile failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.lookupObject = function(ctx, parentID, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_lookupObject(ctx, parentID, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_lookupObject(ctx, parentID, name);
  }
};

PublicDmpWorkspaceClient.prototype.send_lookupObject = function(ctx, parentID, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('lookupObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_lookupObject_args();
  args.ctx = ctx;
  args.parentID = parentID;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_lookupObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_lookupObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('lookupObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.readObjectContent = function(ctx, vfsID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readObjectContent(ctx, vfsID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readObjectContent(ctx, vfsID);
  }
};

PublicDmpWorkspaceClient.prototype.send_readObjectContent = function(ctx, vfsID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('readObjectContent', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_readObjectContent_args();
  args.ctx = ctx;
  args.vfsID = vfsID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_readObjectContent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_readObjectContent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readObjectContent failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.writeObjectContent = function(ctx, vfsID, content, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_writeObjectContent(ctx, vfsID, content);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_writeObjectContent(ctx, vfsID, content);
  }
};

PublicDmpWorkspaceClient.prototype.send_writeObjectContent = function(ctx, vfsID, content) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('writeObjectContent', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_writeObjectContent_args();
  args.ctx = ctx;
  args.vfsID = vfsID;
  args.content = content;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_writeObjectContent = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_writeObjectContent_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDmpWorkspaceClient.prototype.addObject = function(ctx, parentID, name, mimeType, content, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_addObject(ctx, parentID, name, mimeType, content);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_addObject(ctx, parentID, name, mimeType, content);
  }
};

PublicDmpWorkspaceClient.prototype.send_addObject = function(ctx, parentID, name, mimeType, content) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_addObject_args();
  args.ctx = ctx;
  args.parentID = parentID;
  args.name = name;
  args.mimeType = mimeType;
  args.content = content;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_addObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_addObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.hardDeleteObject = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hardDeleteObject(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hardDeleteObject(ctx, ID);
  }
};

PublicDmpWorkspaceClient.prototype.send_hardDeleteObject = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hardDeleteObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_hardDeleteObject_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_hardDeleteObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_hardDeleteObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hardDeleteObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.restoreDeletedObject = function(ctx, parentID, ID, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_restoreDeletedObject(ctx, parentID, ID, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_restoreDeletedObject(ctx, parentID, ID, name);
  }
};

PublicDmpWorkspaceClient.prototype.send_restoreDeletedObject = function(ctx, parentID, ID, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('restoreDeletedObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_restoreDeletedObject_args();
  args.ctx = ctx;
  args.parentID = parentID;
  args.ID = ID;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_restoreDeletedObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_restoreDeletedObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('restoreDeletedObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.listDeletedObject = function(ctx, paginator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listDeletedObject(ctx, paginator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listDeletedObject(ctx, paginator);
  }
};

PublicDmpWorkspaceClient.prototype.send_listDeletedObject = function(ctx, paginator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listDeletedObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_listDeletedObject_args();
  args.ctx = ctx;
  args.paginator = paginator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_listDeletedObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_listDeletedObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listDeletedObject failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.cleanDeletedObjects = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cleanDeletedObjects(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cleanDeletedObjects(ctx);
  }
};

PublicDmpWorkspaceClient.prototype.send_cleanDeletedObjects = function(ctx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cleanDeletedObjects', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_cleanDeletedObjects_args();
  args.ctx = ctx;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_cleanDeletedObjects = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_cleanDeletedObjects_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cleanDeletedObjects failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.updateMimeType = function(ctx, ID, mimeType, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateMimeType(ctx, ID, mimeType);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateMimeType(ctx, ID, mimeType);
  }
};

PublicDmpWorkspaceClient.prototype.send_updateMimeType = function(ctx, ID, mimeType) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateMimeType', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_updateMimeType_args();
  args.ctx = ctx;
  args.ID = ID;
  args.mimeType = mimeType;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_updateMimeType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_updateMimeType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateMimeType failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.updateMetadata = function(ctx, ID, metadata, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateMetadata(ctx, ID, metadata);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateMetadata(ctx, ID, metadata);
  }
};

PublicDmpWorkspaceClient.prototype.send_updateMetadata = function(ctx, ID, metadata) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateMetadata', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_updateMetadata_args();
  args.ctx = ctx;
  args.ID = ID;
  args.metadata = metadata;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_updateMetadata = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_updateMetadata_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateMetadata failed: unknown result');
};
PublicDmpWorkspaceClient.prototype.moveObject = function(ctx, IDs, newParentID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_moveObject(ctx, IDs, newParentID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_moveObject(ctx, IDs, newParentID);
  }
};

PublicDmpWorkspaceClient.prototype.send_moveObject = function(ctx, IDs, newParentID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('moveObject', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_moveObject_args();
  args.ctx = ctx;
  args.IDs = IDs;
  args.newParentID = newParentID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_moveObject = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_moveObject_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDmpWorkspaceClient.prototype.shareFolder = function(ctx, IDs, sharingStatus, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shareFolder(ctx, IDs, sharingStatus);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shareFolder(ctx, IDs, sharingStatus);
  }
};

PublicDmpWorkspaceClient.prototype.send_shareFolder = function(ctx, IDs, sharingStatus) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shareFolder', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_shareFolder_args();
  args.ctx = ctx;
  args.IDs = IDs;
  args.sharingStatus = sharingStatus;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_shareFolder = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_shareFolder_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicDmpWorkspaceClient.prototype.updateSharing = function(ctx, IDs, globalStatus, sharedUsersCollection, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateSharing(ctx, IDs, globalStatus, sharedUsersCollection);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateSharing(ctx, IDs, globalStatus, sharedUsersCollection);
  }
};

PublicDmpWorkspaceClient.prototype.send_updateSharing = function(ctx, IDs, globalStatus, sharedUsersCollection) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateSharing', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicDmpWorkspace_updateSharing_args();
  args.ctx = ctx;
  args.IDs = IDs;
  args.globalStatus = globalStatus;
  args.sharedUsersCollection = sharedUsersCollection;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicDmpWorkspaceClient.prototype.recv_updateSharing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicDmpWorkspace_updateSharing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
var PublicDmpWorkspaceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(PublicDmpWorkspaceProcessor, BaseServiceProcessor);
PublicDmpWorkspaceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PublicDmpWorkspaceProcessor.prototype.process_getObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_getObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getObject.length === 2) {
    Q.fcall(this._handler.getObject, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_getObject_result({success: result});
        output.writeMessageBegin("getObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_getObject_result(err);
          output.writeMessageBegin("getObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getObject(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_getObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_renameObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_renameObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.renameObject.length === 4) {
    Q.fcall(this._handler.renameObject, args.ctx, args.ID, args.newName, args.newParentID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_renameObject_result({success: result});
        output.writeMessageBegin("renameObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_renameObject_result(err);
          output.writeMessageBegin("renameObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("renameObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.renameObject(args.ctx, args.ID, args.newName, args.newParentID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_renameObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("renameObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("renameObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_cloneObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_cloneObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cloneObject.length === 4) {
    Q.fcall(this._handler.cloneObject, args.ctx, args.ID, args.newName, args.newParentID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_cloneObject_result({success: result});
        output.writeMessageBegin("cloneObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_cloneObject_result(err);
          output.writeMessageBegin("cloneObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cloneObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cloneObject(args.ctx, args.ID, args.newName, args.newParentID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_cloneObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cloneObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cloneObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_deleteObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_deleteObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteObject.length === 2) {
    Q.fcall(this._handler.deleteObject, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_deleteObject_result({success: result});
        output.writeMessageBegin("deleteObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_deleteObject_result(err);
          output.writeMessageBegin("deleteObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteObject(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_deleteObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_listObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_listObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listObject.length === 3) {
    Q.fcall(this._handler.listObject, args.ctx, args.ID, args.paginator)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_listObject_result({success: result});
        output.writeMessageBegin("listObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_listObject_result(err);
          output.writeMessageBegin("listObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listObject(args.ctx, args.ID, args.paginator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_listObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_addFolder = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_addFolder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addFolder.length === 3) {
    Q.fcall(this._handler.addFolder, args.ctx, args.parentID, args.name)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_addFolder_result({success: result});
        output.writeMessageBegin("addFolder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_addFolder_result(err);
          output.writeMessageBegin("addFolder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addFolder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addFolder(args.ctx, args.parentID, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_addFolder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addFolder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addFolder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_getStats = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_getStats_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getStats.length === 2) {
    Q.fcall(this._handler.getStats, args.ctx, args.folderID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_getStats_result({success: result});
        output.writeMessageBegin("getStats", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_getStats_result(err);
          output.writeMessageBegin("getStats", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getStats", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getStats(args.ctx, args.folderID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_getStats_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getStats", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getStats", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_previewFile = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_previewFile_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.previewFile.length === 2) {
    Q.fcall(this._handler.previewFile, args.ctx, args.vfsID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_previewFile_result({success: result});
        output.writeMessageBegin("previewFile", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_previewFile_result(err);
          output.writeMessageBegin("previewFile", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("previewFile", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.previewFile(args.ctx, args.vfsID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_previewFile_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("previewFile", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("previewFile", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_lookupObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_lookupObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.lookupObject.length === 3) {
    Q.fcall(this._handler.lookupObject, args.ctx, args.parentID, args.name)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_lookupObject_result({success: result});
        output.writeMessageBegin("lookupObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_lookupObject_result(err);
          output.writeMessageBegin("lookupObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("lookupObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.lookupObject(args.ctx, args.parentID, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_lookupObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("lookupObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("lookupObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_readObjectContent = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_readObjectContent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readObjectContent.length === 2) {
    Q.fcall(this._handler.readObjectContent, args.ctx, args.vfsID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_readObjectContent_result({success: result});
        output.writeMessageBegin("readObjectContent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_readObjectContent_result(err);
          output.writeMessageBegin("readObjectContent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("readObjectContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.readObjectContent(args.ctx, args.vfsID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_readObjectContent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readObjectContent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readObjectContent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_writeObjectContent = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_writeObjectContent_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.writeObjectContent.length === 3) {
    Q.fcall(this._handler.writeObjectContent, args.ctx, args.vfsID, args.content)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_writeObjectContent_result({success: result});
        output.writeMessageBegin("writeObjectContent", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_writeObjectContent_result(err);
          output.writeMessageBegin("writeObjectContent", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("writeObjectContent", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.writeObjectContent(args.ctx, args.vfsID, args.content, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_writeObjectContent_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("writeObjectContent", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("writeObjectContent", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_addObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_addObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.addObject.length === 5) {
    Q.fcall(this._handler.addObject, args.ctx, args.parentID, args.name, args.mimeType, args.content)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_addObject_result({success: result});
        output.writeMessageBegin("addObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_addObject_result(err);
          output.writeMessageBegin("addObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("addObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.addObject(args.ctx, args.parentID, args.name, args.mimeType, args.content, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_addObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("addObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("addObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_hardDeleteObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_hardDeleteObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hardDeleteObject.length === 2) {
    Q.fcall(this._handler.hardDeleteObject, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_hardDeleteObject_result({success: result});
        output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_hardDeleteObject_result(err);
          output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hardDeleteObject(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_hardDeleteObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hardDeleteObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_restoreDeletedObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_restoreDeletedObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.restoreDeletedObject.length === 4) {
    Q.fcall(this._handler.restoreDeletedObject, args.ctx, args.parentID, args.ID, args.name)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_restoreDeletedObject_result({success: result});
        output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_restoreDeletedObject_result(err);
          output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.restoreDeletedObject(args.ctx, args.parentID, args.ID, args.name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_restoreDeletedObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("restoreDeletedObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_listDeletedObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_listDeletedObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listDeletedObject.length === 2) {
    Q.fcall(this._handler.listDeletedObject, args.ctx, args.paginator)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_listDeletedObject_result({success: result});
        output.writeMessageBegin("listDeletedObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_listDeletedObject_result(err);
          output.writeMessageBegin("listDeletedObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listDeletedObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listDeletedObject(args.ctx, args.paginator, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_listDeletedObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listDeletedObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listDeletedObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_cleanDeletedObjects = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_cleanDeletedObjects_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cleanDeletedObjects.length === 1) {
    Q.fcall(this._handler.cleanDeletedObjects, args.ctx)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_cleanDeletedObjects_result({success: result});
        output.writeMessageBegin("cleanDeletedObjects", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_cleanDeletedObjects_result(err);
          output.writeMessageBegin("cleanDeletedObjects", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cleanDeletedObjects", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cleanDeletedObjects(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_cleanDeletedObjects_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cleanDeletedObjects", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cleanDeletedObjects", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_updateMimeType = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_updateMimeType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateMimeType.length === 3) {
    Q.fcall(this._handler.updateMimeType, args.ctx, args.ID, args.mimeType)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_updateMimeType_result({success: result});
        output.writeMessageBegin("updateMimeType", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_updateMimeType_result(err);
          output.writeMessageBegin("updateMimeType", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateMimeType", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateMimeType(args.ctx, args.ID, args.mimeType, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_updateMimeType_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateMimeType", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateMimeType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_updateMetadata = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_updateMetadata_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateMetadata.length === 3) {
    Q.fcall(this._handler.updateMetadata, args.ctx, args.ID, args.metadata)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_updateMetadata_result({success: result});
        output.writeMessageBegin("updateMetadata", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_updateMetadata_result(err);
          output.writeMessageBegin("updateMetadata", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateMetadata", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateMetadata(args.ctx, args.ID, args.metadata, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_updateMetadata_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateMetadata", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateMetadata", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_moveObject = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_moveObject_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.moveObject.length === 3) {
    Q.fcall(this._handler.moveObject, args.ctx, args.IDs, args.newParentID)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_moveObject_result({success: result});
        output.writeMessageBegin("moveObject", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_moveObject_result(err);
          output.writeMessageBegin("moveObject", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("moveObject", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.moveObject(args.ctx, args.IDs, args.newParentID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_moveObject_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("moveObject", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("moveObject", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_shareFolder = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_shareFolder_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shareFolder.length === 3) {
    Q.fcall(this._handler.shareFolder, args.ctx, args.IDs, args.sharingStatus)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_shareFolder_result({success: result});
        output.writeMessageBegin("shareFolder", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_shareFolder_result(err);
          output.writeMessageBegin("shareFolder", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("shareFolder", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.shareFolder(args.ctx, args.IDs, args.sharingStatus, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_shareFolder_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("shareFolder", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shareFolder", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicDmpWorkspaceProcessor.prototype.process_updateSharing = function(seqid, input, output) {
  var args = new PublicDmpWorkspace_updateSharing_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateSharing.length === 4) {
    Q.fcall(this._handler.updateSharing, args.ctx, args.IDs, args.globalStatus, args.sharedUsersCollection)
      .then(function(result) {
        var result_obj = new PublicDmpWorkspace_updateSharing_result({success: result});
        output.writeMessageBegin("updateSharing", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicDmpWorkspace_updateSharing_result(err);
          output.writeMessageBegin("updateSharing", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateSharing", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateSharing(args.ctx, args.IDs, args.globalStatus, args.sharedUsersCollection, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicDmpWorkspace_updateSharing_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateSharing", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateSharing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
