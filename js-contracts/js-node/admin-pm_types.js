//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var Attribute = module.exports.Attribute = function(args) {
  this.ID = null;
  this.name = null;
  this.type = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
Attribute.prototype = {};
Attribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Attribute.prototype.write = function(output) {
  output.writeStructBegin('Attribute');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.I64, 1);
    output.writeI64(this.ID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Policy = module.exports.Policy = function(args) {
  this.ID = null;
  this.name = null;
  this.description = null;
  this.effect = null;
  this.conditions = null;
  this.subjects = null;
  this.resources = null;
  this.actions = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.effect !== undefined && args.effect !== null) {
      this.effect = args.effect;
    }
    if (args.conditions !== undefined && args.conditions !== null) {
      this.conditions = args.conditions;
    }
    if (args.subjects !== undefined && args.subjects !== null) {
      this.subjects = Thrift.copyList(args.subjects, [ttypes.Attribute]);
    }
    if (args.resources !== undefined && args.resources !== null) {
      this.resources = Thrift.copyList(args.resources, [ttypes.Attribute]);
    }
    if (args.actions !== undefined && args.actions !== null) {
      this.actions = Thrift.copyList(args.actions, [ttypes.Attribute]);
    }
  }
};
Policy.prototype = {};
Policy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.effect = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.conditions = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.subjects = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Attribute();
          elem6.read(input);
          this.subjects.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.resources = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.Attribute();
          elem13.read(input);
          this.resources.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.actions = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = new ttypes.Attribute();
          elem20.read(input);
          this.actions.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Policy.prototype.write = function(output) {
  output.writeStructBegin('Policy');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.I64, 1);
    output.writeI64(this.ID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.effect !== null && this.effect !== undefined) {
    output.writeFieldBegin('effect', Thrift.Type.STRING, 4);
    output.writeString(this.effect);
    output.writeFieldEnd();
  }
  if (this.conditions !== null && this.conditions !== undefined) {
    output.writeFieldBegin('conditions', Thrift.Type.STRING, 5);
    output.writeString(this.conditions);
    output.writeFieldEnd();
  }
  if (this.subjects !== null && this.subjects !== undefined) {
    output.writeFieldBegin('subjects', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.subjects.length);
    for (var iter21 in this.subjects)
    {
      if (this.subjects.hasOwnProperty(iter21))
      {
        iter21 = this.subjects[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.resources !== null && this.resources !== undefined) {
    output.writeFieldBegin('resources', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.resources.length);
    for (var iter22 in this.resources)
    {
      if (this.resources.hasOwnProperty(iter22))
      {
        iter22 = this.resources[iter22];
        iter22.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.actions !== null && this.actions !== undefined) {
    output.writeFieldBegin('actions', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRUCT, this.actions.length);
    for (var iter23 in this.actions)
    {
      if (this.actions.hasOwnProperty(iter23))
      {
        iter23 = this.actions[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidPolicy = module.exports.InvalidPolicy = function(args) {
  this.policy = null;
  this.error = null;
  if (args instanceof common_ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.policy !== undefined && args.policy !== null) {
      this.policy = new ttypes.Policy(args.policy);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
InvalidPolicy.prototype = {};
InvalidPolicy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.policy = new ttypes.Policy();
        this.policy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new common_ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidPolicy.prototype.write = function(output) {
  output.writeStructBegin('InvalidPolicy');
  if (this.policy !== null && this.policy !== undefined) {
    output.writeFieldBegin('policy', Thrift.Type.STRUCT, 1);
    this.policy.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PolicyCollection = module.exports.PolicyCollection = function(args) {
  this.policies = null;
  this.pagination = null;
  if (args) {
    if (args.policies !== undefined && args.policies !== null) {
      this.policies = Thrift.copyList(args.policies, [ttypes.Policy]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
PolicyCollection.prototype = {};
PolicyCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.policies = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = new ttypes.Policy();
          elem30.read(input);
          this.policies.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PolicyCollection.prototype.write = function(output) {
  output.writeStructBegin('PolicyCollection');
  if (this.policies !== null && this.policies !== undefined) {
    output.writeFieldBegin('policies', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.policies.length);
    for (var iter31 in this.policies)
    {
      if (this.policies.hasOwnProperty(iter31))
      {
        iter31 = this.policies[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AttributeCollection = module.exports.AttributeCollection = function(args) {
  this.attributes = null;
  this.pagination = null;
  if (args) {
    if (args.attributes !== undefined && args.attributes !== null) {
      this.attributes = Thrift.copyList(args.attributes, [ttypes.Attribute]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
AttributeCollection.prototype = {};
AttributeCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.attributes = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Attribute();
          elem38.read(input);
          this.attributes.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AttributeCollection.prototype.write = function(output) {
  output.writeStructBegin('AttributeCollection');
  if (this.attributes !== null && this.attributes !== undefined) {
    output.writeFieldBegin('attributes', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.attributes.length);
    for (var iter39 in this.attributes)
    {
      if (this.attributes.hasOwnProperty(iter39))
      {
        iter39 = this.attributes[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilterByAttribute = module.exports.FilterByAttribute = function(args) {
  this.ID = null;
  this.type = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
FilterByAttribute.prototype = {};
FilterByAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterByAttribute.prototype.write = function(output) {
  output.writeStructBegin('FilterByAttribute');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.I64, 1);
    output.writeI64(this.ID);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilterPolicy = module.exports.FilterPolicy = function(args) {
  this.name = null;
  this.effect = null;
  this.attrs = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.effect !== undefined && args.effect !== null) {
      this.effect = args.effect;
    }
    if (args.attrs !== undefined && args.attrs !== null) {
      this.attrs = Thrift.copyList(args.attrs, [ttypes.FilterByAttribute]);
    }
  }
};
FilterPolicy.prototype = {};
FilterPolicy.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.effect = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.attrs = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = new ttypes.FilterByAttribute();
          elem46.read(input);
          this.attrs.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterPolicy.prototype.write = function(output) {
  output.writeStructBegin('FilterPolicy');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.effect !== null && this.effect !== undefined) {
    output.writeFieldBegin('effect', Thrift.Type.STRING, 2);
    output.writeString(this.effect);
    output.writeFieldEnd();
  }
  if (this.attrs !== null && this.attrs !== undefined) {
    output.writeFieldBegin('attrs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.attrs.length);
    for (var iter47 in this.attrs)
    {
      if (this.attrs.hasOwnProperty(iter47))
      {
        iter47 = this.attrs[iter47];
        iter47.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FilterAttribute = module.exports.FilterAttribute = function(args) {
  this.name = null;
  this.type = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
  }
};
FilterAttribute.prototype = {};
FilterAttribute.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FilterAttribute.prototype.write = function(output) {
  output.writeStructBegin('FilterAttribute');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 2);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '1.0.0';
ttypes.ERR_CODE = 168;
ttypes.SERVICE_NAME = '4cas-admin-pm';
ttypes.ATTR_SUBJECT = 'subject';
ttypes.ATTR_ACTION = 'action';
ttypes.ATTR_RESOURCE = 'resource';
ttypes.EFFECT_ALLOW = 'allow';
ttypes.EFFECT_DENY = 'deny';
ttypes.SORT_FIELD_ATTR_NAME = 'name';
ttypes.SORT_FIELD_POLICY_NAME = 'name';
