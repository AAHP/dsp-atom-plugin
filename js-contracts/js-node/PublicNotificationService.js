//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./notification_types');
//HELPER FUNCTIONS AND STRUCTURES

var PublicNotificationService_getAll_args = function(args) {
  this.ctx = null;
  this.filter = null;
  this.pager = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.NotificationFilter(args.filter);
    }
    if (args.pager !== undefined && args.pager !== null) {
      this.pager = new common_ttypes.PageParams(args.pager);
    }
  }
};
PublicNotificationService_getAll_args.prototype = {};
PublicNotificationService_getAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.NotificationFilter();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pager = new common_ttypes.PageParams();
        this.pager.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicNotificationService_getAll_args.prototype.write = function(output) {
  output.writeStructBegin('PublicNotificationService_getAll_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.pager !== null && this.pager !== undefined) {
    output.writeFieldBegin('pager', Thrift.Type.STRUCT, 3);
    this.pager.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicNotificationService_getAll_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NotificationCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicNotificationService_getAll_result.prototype = {};
PublicNotificationService_getAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NotificationCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicNotificationService_getAll_result.prototype.write = function(output) {
  output.writeStructBegin('PublicNotificationService_getAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicNotificationService_getUnread_args = function(args) {
  this.ctx = null;
  this.pager = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.pager !== undefined && args.pager !== null) {
      this.pager = new common_ttypes.PageParams(args.pager);
    }
  }
};
PublicNotificationService_getUnread_args.prototype = {};
PublicNotificationService_getUnread_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pager = new common_ttypes.PageParams();
        this.pager.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicNotificationService_getUnread_args.prototype.write = function(output) {
  output.writeStructBegin('PublicNotificationService_getUnread_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.pager !== null && this.pager !== undefined) {
    output.writeFieldBegin('pager', Thrift.Type.STRUCT, 2);
    this.pager.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicNotificationService_getUnread_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.NotificationCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicNotificationService_getUnread_result.prototype = {};
PublicNotificationService_getUnread_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.NotificationCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicNotificationService_getUnread_result.prototype.write = function(output) {
  output.writeStructBegin('PublicNotificationService_getUnread_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicNotificationService_markAllRead_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
  }
};
PublicNotificationService_markAllRead_args.prototype = {};
PublicNotificationService_markAllRead_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicNotificationService_markAllRead_args.prototype.write = function(output) {
  output.writeStructBegin('PublicNotificationService_markAllRead_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicNotificationService_markAllRead_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicNotificationService_markAllRead_result.prototype = {};
PublicNotificationService_markAllRead_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicNotificationService_markAllRead_result.prototype.write = function(output) {
  output.writeStructBegin('PublicNotificationService_markAllRead_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicNotificationService_markAsRead_args = function(args) {
  this.ctx = null;
  this.notificationID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.notificationID !== undefined && args.notificationID !== null) {
      this.notificationID = args.notificationID;
    }
  }
};
PublicNotificationService_markAsRead_args.prototype = {};
PublicNotificationService_markAsRead_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notificationID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicNotificationService_markAsRead_args.prototype.write = function(output) {
  output.writeStructBegin('PublicNotificationService_markAsRead_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.notificationID !== null && this.notificationID !== undefined) {
    output.writeFieldBegin('notificationID', Thrift.Type.STRING, 2);
    output.writeString(this.notificationID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicNotificationService_markAsRead_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
PublicNotificationService_markAsRead_result.prototype = {};
PublicNotificationService_markAsRead_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PublicNotificationService_markAsRead_result.prototype.write = function(output) {
  output.writeStructBegin('PublicNotificationService_markAsRead_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PublicNotificationServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(PublicNotificationServiceClient, BaseServiceClient);
PublicNotificationServiceClient.prototype.seqid = function() { return this._seqid; };
PublicNotificationServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
PublicNotificationServiceClient.prototype.getAll = function(ctx, filter, pager, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAll(ctx, filter, pager);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAll(ctx, filter, pager);
  }
};

PublicNotificationServiceClient.prototype.send_getAll = function(ctx, filter, pager) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAll', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicNotificationService_getAll_args();
  args.ctx = ctx;
  args.filter = filter;
  args.pager = pager;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicNotificationServiceClient.prototype.recv_getAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicNotificationService_getAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAll failed: unknown result');
};
PublicNotificationServiceClient.prototype.getUnread = function(ctx, pager, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUnread(ctx, pager);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUnread(ctx, pager);
  }
};

PublicNotificationServiceClient.prototype.send_getUnread = function(ctx, pager) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUnread', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicNotificationService_getUnread_args();
  args.ctx = ctx;
  args.pager = pager;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicNotificationServiceClient.prototype.recv_getUnread = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicNotificationService_getUnread_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUnread failed: unknown result');
};
PublicNotificationServiceClient.prototype.markAllRead = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_markAllRead(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_markAllRead(ctx);
  }
};

PublicNotificationServiceClient.prototype.send_markAllRead = function(ctx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('markAllRead', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicNotificationService_markAllRead_args();
  args.ctx = ctx;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicNotificationServiceClient.prototype.recv_markAllRead = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicNotificationService_markAllRead_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
PublicNotificationServiceClient.prototype.markAsRead = function(ctx, notificationID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_markAsRead(ctx, notificationID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_markAsRead(ctx, notificationID);
  }
};

PublicNotificationServiceClient.prototype.send_markAsRead = function(ctx, notificationID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('markAsRead', Thrift.MessageType.CALL, this.seqid());
  var args = new PublicNotificationService_markAsRead_args();
  args.ctx = ctx;
  args.notificationID = notificationID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

PublicNotificationServiceClient.prototype.recv_markAsRead = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new PublicNotificationService_markAsRead_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
var PublicNotificationServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(PublicNotificationServiceProcessor, BaseServiceProcessor);
PublicNotificationServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
PublicNotificationServiceProcessor.prototype.process_getAll = function(seqid, input, output) {
  var args = new PublicNotificationService_getAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAll.length === 3) {
    Q.fcall(this._handler.getAll, args.ctx, args.filter, args.pager)
      .then(function(result) {
        var result_obj = new PublicNotificationService_getAll_result({success: result});
        output.writeMessageBegin("getAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicNotificationService_getAll_result(err);
          output.writeMessageBegin("getAll", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAll", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAll(args.ctx, args.filter, args.pager, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicNotificationService_getAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicNotificationServiceProcessor.prototype.process_getUnread = function(seqid, input, output) {
  var args = new PublicNotificationService_getUnread_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUnread.length === 2) {
    Q.fcall(this._handler.getUnread, args.ctx, args.pager)
      .then(function(result) {
        var result_obj = new PublicNotificationService_getUnread_result({success: result});
        output.writeMessageBegin("getUnread", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicNotificationService_getUnread_result(err);
          output.writeMessageBegin("getUnread", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getUnread", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getUnread(args.ctx, args.pager, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicNotificationService_getUnread_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getUnread", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUnread", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicNotificationServiceProcessor.prototype.process_markAllRead = function(seqid, input, output) {
  var args = new PublicNotificationService_markAllRead_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.markAllRead.length === 1) {
    Q.fcall(this._handler.markAllRead, args.ctx)
      .then(function(result) {
        var result_obj = new PublicNotificationService_markAllRead_result({success: result});
        output.writeMessageBegin("markAllRead", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicNotificationService_markAllRead_result(err);
          output.writeMessageBegin("markAllRead", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("markAllRead", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.markAllRead(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicNotificationService_markAllRead_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("markAllRead", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("markAllRead", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
PublicNotificationServiceProcessor.prototype.process_markAsRead = function(seqid, input, output) {
  var args = new PublicNotificationService_markAsRead_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.markAsRead.length === 2) {
    Q.fcall(this._handler.markAsRead, args.ctx, args.notificationID)
      .then(function(result) {
        var result_obj = new PublicNotificationService_markAsRead_result({success: result});
        output.writeMessageBegin("markAsRead", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new PublicNotificationService_markAsRead_result(err);
          output.writeMessageBegin("markAsRead", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("markAsRead", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.markAsRead(args.ctx, args.notificationID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new PublicNotificationService_markAsRead_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("markAsRead", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("markAsRead", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
