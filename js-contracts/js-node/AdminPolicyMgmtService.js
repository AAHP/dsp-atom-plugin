//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var BaseService = require('./BaseService');
var BaseServiceClient = BaseService.Client;
var BaseServiceProcessor = BaseService.Processor;
var ttypes = require('./admin-pm_types');
//HELPER FUNCTIONS AND STRUCTURES

var AdminPolicyMgmtService_flushCache_args = function(args) {
  this.ctx = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
  }
};
AdminPolicyMgmtService_flushCache_args.prototype = {};
AdminPolicyMgmtService_flushCache_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_flushCache_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_flushCache_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_flushCache_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.InvalidPolicy]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_flushCache_result.prototype = {};
AdminPolicyMgmtService_flushCache_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new ttypes.InvalidPolicy();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_flushCache_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_flushCache_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_createPolicy_args = function(args) {
  this.ctx = null;
  this.policy = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.policy !== undefined && args.policy !== null) {
      this.policy = new ttypes.Policy(args.policy);
    }
  }
};
AdminPolicyMgmtService_createPolicy_args.prototype = {};
AdminPolicyMgmtService_createPolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.policy = new ttypes.Policy();
        this.policy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_createPolicy_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_createPolicy_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.policy !== null && this.policy !== undefined) {
    output.writeFieldBegin('policy', Thrift.Type.STRUCT, 2);
    this.policy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_createPolicy_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Policy(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_createPolicy_result.prototype = {};
AdminPolicyMgmtService_createPolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Policy();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_createPolicy_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_createPolicy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_updatePolicy_args = function(args) {
  this.ctx = null;
  this.policy = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.policy !== undefined && args.policy !== null) {
      this.policy = new ttypes.Policy(args.policy);
    }
  }
};
AdminPolicyMgmtService_updatePolicy_args.prototype = {};
AdminPolicyMgmtService_updatePolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.policy = new ttypes.Policy();
        this.policy.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_updatePolicy_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_updatePolicy_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.policy !== null && this.policy !== undefined) {
    output.writeFieldBegin('policy', Thrift.Type.STRUCT, 2);
    this.policy.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_updatePolicy_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Policy(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_updatePolicy_result.prototype = {};
AdminPolicyMgmtService_updatePolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Policy();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_updatePolicy_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_updatePolicy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_getPolicy_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
AdminPolicyMgmtService_getPolicy_args.prototype = {};
AdminPolicyMgmtService_getPolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_getPolicy_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_getPolicy_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.I64, 2);
    output.writeI64(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_getPolicy_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Policy(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_getPolicy_result.prototype = {};
AdminPolicyMgmtService_getPolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Policy();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_getPolicy_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_getPolicy_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_listPolicies_args = function(args) {
  this.ctx = null;
  this.filter = null;
  this.sorter = null;
  this.pager = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.FilterPolicy(args.filter);
    }
    if (args.sorter !== undefined && args.sorter !== null) {
      this.sorter = new common_ttypes.SortParams(args.sorter);
    }
    if (args.pager !== undefined && args.pager !== null) {
      this.pager = new common_ttypes.PageParams(args.pager);
    }
  }
};
AdminPolicyMgmtService_listPolicies_args.prototype = {};
AdminPolicyMgmtService_listPolicies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.FilterPolicy();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sorter = new common_ttypes.SortParams();
        this.sorter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pager = new common_ttypes.PageParams();
        this.pager.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_listPolicies_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_listPolicies_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.sorter !== null && this.sorter !== undefined) {
    output.writeFieldBegin('sorter', Thrift.Type.STRUCT, 3);
    this.sorter.write(output);
    output.writeFieldEnd();
  }
  if (this.pager !== null && this.pager !== undefined) {
    output.writeFieldBegin('pager', Thrift.Type.STRUCT, 4);
    this.pager.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_listPolicies_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.PolicyCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_listPolicies_result.prototype = {};
AdminPolicyMgmtService_listPolicies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.PolicyCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_listPolicies_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_listPolicies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_deletePolicy_args = function(args) {
  this.ctx = null;
  this.ID = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
  }
};
AdminPolicyMgmtService_deletePolicy_args.prototype = {};
AdminPolicyMgmtService_deletePolicy_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ID = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_deletePolicy_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_deletePolicy_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.I64, 2);
    output.writeI64(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_deletePolicy_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_deletePolicy_result.prototype = {};
AdminPolicyMgmtService_deletePolicy_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_deletePolicy_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_deletePolicy_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_importPolicies_args = function(args) {
  this.ctx = null;
  this.policies = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.policies !== undefined && args.policies !== null) {
      this.policies = Thrift.copyList(args.policies, [ttypes.Policy]);
    }
  }
};
AdminPolicyMgmtService_importPolicies_args.prototype = {};
AdminPolicyMgmtService_importPolicies_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.policies = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new ttypes.Policy();
          elem62.read(input);
          this.policies.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_importPolicies_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_importPolicies_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.policies !== null && this.policies !== undefined) {
    output.writeFieldBegin('policies', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.policies.length);
    for (var iter63 in this.policies)
    {
      if (this.policies.hasOwnProperty(iter63))
      {
        iter63 = this.policies[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_importPolicies_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.InvalidPolicy]);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_importPolicies_result.prototype = {};
AdminPolicyMgmtService_importPolicies_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new ttypes.InvalidPolicy();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_importPolicies_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_importPolicies_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_createAttribute_args = function(args) {
  this.ctx = null;
  this.attr = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = new ttypes.Attribute(args.attr);
    }
  }
};
AdminPolicyMgmtService_createAttribute_args.prototype = {};
AdminPolicyMgmtService_createAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.attr = new ttypes.Attribute();
        this.attr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_createAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_createAttribute_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRUCT, 2);
    this.attr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_createAttribute_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Attribute(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_createAttribute_result.prototype = {};
AdminPolicyMgmtService_createAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Attribute();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_createAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_createAttribute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_updateAttribute_args = function(args) {
  this.ctx = null;
  this.attr = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = new ttypes.Attribute(args.attr);
    }
  }
};
AdminPolicyMgmtService_updateAttribute_args.prototype = {};
AdminPolicyMgmtService_updateAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.attr = new ttypes.Attribute();
        this.attr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_updateAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_updateAttribute_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRUCT, 2);
    this.attr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_updateAttribute_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Attribute(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_updateAttribute_result.prototype = {};
AdminPolicyMgmtService_updateAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Attribute();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_updateAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_updateAttribute_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_listAttributesByType_args = function(args) {
  this.ctx = null;
  this.filter = null;
  this.sorter = null;
  this.pager = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.filter !== undefined && args.filter !== null) {
      this.filter = new ttypes.FilterAttribute(args.filter);
    }
    if (args.sorter !== undefined && args.sorter !== null) {
      this.sorter = new common_ttypes.SortParams(args.sorter);
    }
    if (args.pager !== undefined && args.pager !== null) {
      this.pager = new common_ttypes.PageParams(args.pager);
    }
  }
};
AdminPolicyMgmtService_listAttributesByType_args.prototype = {};
AdminPolicyMgmtService_listAttributesByType_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.filter = new ttypes.FilterAttribute();
        this.filter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sorter = new common_ttypes.SortParams();
        this.sorter.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.pager = new common_ttypes.PageParams();
        this.pager.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_listAttributesByType_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_listAttributesByType_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.filter !== null && this.filter !== undefined) {
    output.writeFieldBegin('filter', Thrift.Type.STRUCT, 2);
    this.filter.write(output);
    output.writeFieldEnd();
  }
  if (this.sorter !== null && this.sorter !== undefined) {
    output.writeFieldBegin('sorter', Thrift.Type.STRUCT, 3);
    this.sorter.write(output);
    output.writeFieldEnd();
  }
  if (this.pager !== null && this.pager !== undefined) {
    output.writeFieldBegin('pager', Thrift.Type.STRUCT, 4);
    this.pager.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_listAttributesByType_result = function(args) {
  this.success = null;
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AttributeCollection(args.success);
    }
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_listAttributesByType_result.prototype = {};
AdminPolicyMgmtService_listAttributesByType_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.AttributeCollection();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_listAttributesByType_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_listAttributesByType_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_deleteAttribute_args = function(args) {
  this.ctx = null;
  this.attr = null;
  if (args) {
    if (args.ctx !== undefined && args.ctx !== null) {
      this.ctx = new common_ttypes.Context(args.ctx);
    }
    if (args.attr !== undefined && args.attr !== null) {
      this.attr = new ttypes.Attribute(args.attr);
    }
  }
};
AdminPolicyMgmtService_deleteAttribute_args.prototype = {};
AdminPolicyMgmtService_deleteAttribute_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.ctx = new common_ttypes.Context();
        this.ctx.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.attr = new ttypes.Attribute();
        this.attr.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_deleteAttribute_args.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_deleteAttribute_args');
  if (this.ctx !== null && this.ctx !== undefined) {
    output.writeFieldBegin('ctx', Thrift.Type.STRUCT, 1);
    this.ctx.write(output);
    output.writeFieldEnd();
  }
  if (this.attr !== null && this.attr !== undefined) {
    output.writeFieldBegin('attr', Thrift.Type.STRUCT, 2);
    this.attr.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtService_deleteAttribute_result = function(args) {
  this.err = null;
  if (args instanceof common_ttypes.Error) {
    this.err = args;
    return;
  }
  if (args) {
    if (args.err !== undefined && args.err !== null) {
      this.err = args.err;
    }
  }
};
AdminPolicyMgmtService_deleteAttribute_result.prototype = {};
AdminPolicyMgmtService_deleteAttribute_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.err = new common_ttypes.Error();
        this.err.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminPolicyMgmtService_deleteAttribute_result.prototype.write = function(output) {
  output.writeStructBegin('AdminPolicyMgmtService_deleteAttribute_result');
  if (this.err !== null && this.err !== undefined) {
    output.writeFieldBegin('err', Thrift.Type.STRUCT, 1);
    this.err.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminPolicyMgmtServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(AdminPolicyMgmtServiceClient, BaseServiceClient);
AdminPolicyMgmtServiceClient.prototype.seqid = function() { return this._seqid; };
AdminPolicyMgmtServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
AdminPolicyMgmtServiceClient.prototype.flushCache = function(ctx, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_flushCache(ctx);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_flushCache(ctx);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_flushCache = function(ctx) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flushCache', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_flushCache_args();
  args.ctx = ctx;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_flushCache = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_flushCache_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('flushCache failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.createPolicy = function(ctx, policy, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createPolicy(ctx, policy);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createPolicy(ctx, policy);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_createPolicy = function(ctx, policy) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createPolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_createPolicy_args();
  args.ctx = ctx;
  args.policy = policy;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_createPolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_createPolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createPolicy failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.updatePolicy = function(ctx, policy, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updatePolicy(ctx, policy);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updatePolicy(ctx, policy);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_updatePolicy = function(ctx, policy) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updatePolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_updatePolicy_args();
  args.ctx = ctx;
  args.policy = policy;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_updatePolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_updatePolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updatePolicy failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.getPolicy = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getPolicy(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getPolicy(ctx, ID);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_getPolicy = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getPolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_getPolicy_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_getPolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_getPolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getPolicy failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.listPolicies = function(ctx, filter, sorter, pager, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listPolicies(ctx, filter, sorter, pager);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listPolicies(ctx, filter, sorter, pager);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_listPolicies = function(ctx, filter, sorter, pager) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listPolicies', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_listPolicies_args();
  args.ctx = ctx;
  args.filter = filter;
  args.sorter = sorter;
  args.pager = pager;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_listPolicies = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_listPolicies_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listPolicies failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.deletePolicy = function(ctx, ID, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deletePolicy(ctx, ID);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deletePolicy(ctx, ID);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_deletePolicy = function(ctx, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deletePolicy', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_deletePolicy_args();
  args.ctx = ctx;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_deletePolicy = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_deletePolicy_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
AdminPolicyMgmtServiceClient.prototype.importPolicies = function(ctx, policies, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_importPolicies(ctx, policies);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_importPolicies(ctx, policies);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_importPolicies = function(ctx, policies) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('importPolicies', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_importPolicies_args();
  args.ctx = ctx;
  args.policies = policies;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_importPolicies = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_importPolicies_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('importPolicies failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.createAttribute = function(ctx, attr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_createAttribute(ctx, attr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_createAttribute(ctx, attr);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_createAttribute = function(ctx, attr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('createAttribute', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_createAttribute_args();
  args.ctx = ctx;
  args.attr = attr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_createAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_createAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('createAttribute failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.updateAttribute = function(ctx, attr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateAttribute(ctx, attr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateAttribute(ctx, attr);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_updateAttribute = function(ctx, attr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateAttribute', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_updateAttribute_args();
  args.ctx = ctx;
  args.attr = attr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_updateAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_updateAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateAttribute failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.listAttributesByType = function(ctx, filter, sorter, pager, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_listAttributesByType(ctx, filter, sorter, pager);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_listAttributesByType(ctx, filter, sorter, pager);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_listAttributesByType = function(ctx, filter, sorter, pager) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('listAttributesByType', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_listAttributesByType_args();
  args.ctx = ctx;
  args.filter = filter;
  args.sorter = sorter;
  args.pager = pager;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_listAttributesByType = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_listAttributesByType_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('listAttributesByType failed: unknown result');
};
AdminPolicyMgmtServiceClient.prototype.deleteAttribute = function(ctx, attr, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_deleteAttribute(ctx, attr);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_deleteAttribute(ctx, attr);
  }
};

AdminPolicyMgmtServiceClient.prototype.send_deleteAttribute = function(ctx, attr) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteAttribute', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminPolicyMgmtService_deleteAttribute_args();
  args.ctx = ctx;
  args.attr = attr;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminPolicyMgmtServiceClient.prototype.recv_deleteAttribute = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminPolicyMgmtService_deleteAttribute_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.err) {
    return callback(result.err);
  }
  callback(null);
};
var AdminPolicyMgmtServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
Thrift.inherits(AdminPolicyMgmtServiceProcessor, BaseServiceProcessor);
AdminPolicyMgmtServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
AdminPolicyMgmtServiceProcessor.prototype.process_flushCache = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_flushCache_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.flushCache.length === 1) {
    Q.fcall(this._handler.flushCache, args.ctx)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_flushCache_result({success: result});
        output.writeMessageBegin("flushCache", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_flushCache_result(err);
          output.writeMessageBegin("flushCache", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("flushCache", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.flushCache(args.ctx, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_flushCache_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("flushCache", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flushCache", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_createPolicy = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_createPolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createPolicy.length === 2) {
    Q.fcall(this._handler.createPolicy, args.ctx, args.policy)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_createPolicy_result({success: result});
        output.writeMessageBegin("createPolicy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_createPolicy_result(err);
          output.writeMessageBegin("createPolicy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createPolicy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createPolicy(args.ctx, args.policy, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_createPolicy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createPolicy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createPolicy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_updatePolicy = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_updatePolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updatePolicy.length === 2) {
    Q.fcall(this._handler.updatePolicy, args.ctx, args.policy)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_updatePolicy_result({success: result});
        output.writeMessageBegin("updatePolicy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_updatePolicy_result(err);
          output.writeMessageBegin("updatePolicy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updatePolicy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updatePolicy(args.ctx, args.policy, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_updatePolicy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updatePolicy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updatePolicy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_getPolicy = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_getPolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getPolicy.length === 2) {
    Q.fcall(this._handler.getPolicy, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_getPolicy_result({success: result});
        output.writeMessageBegin("getPolicy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_getPolicy_result(err);
          output.writeMessageBegin("getPolicy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getPolicy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getPolicy(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_getPolicy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getPolicy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getPolicy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_listPolicies = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_listPolicies_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listPolicies.length === 4) {
    Q.fcall(this._handler.listPolicies, args.ctx, args.filter, args.sorter, args.pager)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_listPolicies_result({success: result});
        output.writeMessageBegin("listPolicies", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_listPolicies_result(err);
          output.writeMessageBegin("listPolicies", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listPolicies", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listPolicies(args.ctx, args.filter, args.sorter, args.pager, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_listPolicies_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listPolicies", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listPolicies", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_deletePolicy = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_deletePolicy_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deletePolicy.length === 2) {
    Q.fcall(this._handler.deletePolicy, args.ctx, args.ID)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_deletePolicy_result({success: result});
        output.writeMessageBegin("deletePolicy", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_deletePolicy_result(err);
          output.writeMessageBegin("deletePolicy", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deletePolicy", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deletePolicy(args.ctx, args.ID, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_deletePolicy_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deletePolicy", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deletePolicy", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_importPolicies = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_importPolicies_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.importPolicies.length === 2) {
    Q.fcall(this._handler.importPolicies, args.ctx, args.policies)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_importPolicies_result({success: result});
        output.writeMessageBegin("importPolicies", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_importPolicies_result(err);
          output.writeMessageBegin("importPolicies", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("importPolicies", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.importPolicies(args.ctx, args.policies, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_importPolicies_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("importPolicies", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("importPolicies", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_createAttribute = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_createAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.createAttribute.length === 2) {
    Q.fcall(this._handler.createAttribute, args.ctx, args.attr)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_createAttribute_result({success: result});
        output.writeMessageBegin("createAttribute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_createAttribute_result(err);
          output.writeMessageBegin("createAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("createAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.createAttribute(args.ctx, args.attr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_createAttribute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("createAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("createAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_updateAttribute = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_updateAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateAttribute.length === 2) {
    Q.fcall(this._handler.updateAttribute, args.ctx, args.attr)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_updateAttribute_result({success: result});
        output.writeMessageBegin("updateAttribute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_updateAttribute_result(err);
          output.writeMessageBegin("updateAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("updateAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.updateAttribute(args.ctx, args.attr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_updateAttribute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("updateAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_listAttributesByType = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_listAttributesByType_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.listAttributesByType.length === 4) {
    Q.fcall(this._handler.listAttributesByType, args.ctx, args.filter, args.sorter, args.pager)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_listAttributesByType_result({success: result});
        output.writeMessageBegin("listAttributesByType", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_listAttributesByType_result(err);
          output.writeMessageBegin("listAttributesByType", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("listAttributesByType", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.listAttributesByType(args.ctx, args.filter, args.sorter, args.pager, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_listAttributesByType_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("listAttributesByType", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("listAttributesByType", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminPolicyMgmtServiceProcessor.prototype.process_deleteAttribute = function(seqid, input, output) {
  var args = new AdminPolicyMgmtService_deleteAttribute_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.deleteAttribute.length === 2) {
    Q.fcall(this._handler.deleteAttribute, args.ctx, args.attr)
      .then(function(result) {
        var result_obj = new AdminPolicyMgmtService_deleteAttribute_result({success: result});
        output.writeMessageBegin("deleteAttribute", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof common_ttypes.Error) {
          result = new AdminPolicyMgmtService_deleteAttribute_result(err);
          output.writeMessageBegin("deleteAttribute", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("deleteAttribute", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.deleteAttribute(args.ctx, args.attr, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof common_ttypes.Error) {
        result_obj = new AdminPolicyMgmtService_deleteAttribute_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("deleteAttribute", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("deleteAttribute", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
