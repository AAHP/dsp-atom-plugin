//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var User = module.exports.User = function(args) {
  this.ID = null;
  this.username = null;
  this.email = null;
  this.givenName = null;
  this.familyName = null;
  this.password = null;
  this.locked = null;
  this.forcePasswordChange = null;
  this.generatePassword = null;
  this.groups = null;
  this.customAttributes = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.givenName !== undefined && args.givenName !== null) {
      this.givenName = args.givenName;
    }
    if (args.familyName !== undefined && args.familyName !== null) {
      this.familyName = args.familyName;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.locked !== undefined && args.locked !== null) {
      this.locked = args.locked;
    }
    if (args.forcePasswordChange !== undefined && args.forcePasswordChange !== null) {
      this.forcePasswordChange = args.forcePasswordChange;
    }
    if (args.generatePassword !== undefined && args.generatePassword !== null) {
      this.generatePassword = args.generatePassword;
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [null]);
    }
    if (args.customAttributes !== undefined && args.customAttributes !== null) {
      this.customAttributes = Thrift.copyMap(args.customAttributes, [null]);
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.givenName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.familyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.locked = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.forcePasswordChange = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.generatePassword = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.groups = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Group();
          elem6.read(input);
          this.groups.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.MAP) {
        var _size7 = 0;
        var _rtmp311;
        this.customAttributes = {};
        var _ktype8 = 0;
        var _vtype9 = 0;
        _rtmp311 = input.readMapBegin();
        _ktype8 = _rtmp311.ktype;
        _vtype9 = _rtmp311.vtype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var key13 = null;
          var val14 = null;
          key13 = input.readString();
          val14 = input.readString();
          this.customAttributes[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 2);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.givenName !== null && this.givenName !== undefined) {
    output.writeFieldBegin('givenName', Thrift.Type.STRING, 4);
    output.writeString(this.givenName);
    output.writeFieldEnd();
  }
  if (this.familyName !== null && this.familyName !== undefined) {
    output.writeFieldBegin('familyName', Thrift.Type.STRING, 5);
    output.writeString(this.familyName);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 6);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.locked !== null && this.locked !== undefined) {
    output.writeFieldBegin('locked', Thrift.Type.BOOL, 7);
    output.writeBool(this.locked);
    output.writeFieldEnd();
  }
  if (this.forcePasswordChange !== null && this.forcePasswordChange !== undefined) {
    output.writeFieldBegin('forcePasswordChange', Thrift.Type.BOOL, 8);
    output.writeBool(this.forcePasswordChange);
    output.writeFieldEnd();
  }
  if (this.generatePassword !== null && this.generatePassword !== undefined) {
    output.writeFieldBegin('generatePassword', Thrift.Type.BOOL, 9);
    output.writeBool(this.generatePassword);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter15 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter15))
      {
        iter15 = this.groups[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.customAttributes !== null && this.customAttributes !== undefined) {
    output.writeFieldBegin('customAttributes', Thrift.Type.MAP, 11);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.customAttributes));
    for (var kiter16 in this.customAttributes)
    {
      if (this.customAttributes.hasOwnProperty(kiter16))
      {
        var viter17 = this.customAttributes[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidUser = module.exports.InvalidUser = function(args) {
  this.user = null;
  this.error = null;
  if (args instanceof common_ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.user !== undefined && args.user !== null) {
      this.user = new ttypes.User(args.user);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
InvalidUser.prototype = {};
InvalidUser.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.user = new ttypes.User();
        this.user.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new common_ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidUser.prototype.write = function(output) {
  output.writeStructBegin('InvalidUser');
  if (this.user !== null && this.user !== undefined) {
    output.writeFieldBegin('user', Thrift.Type.STRUCT, 1);
    this.user.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var UserCollection = module.exports.UserCollection = function(args) {
  this.users = null;
  this.pagination = null;
  if (args) {
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [ttypes.User]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
UserCollection.prototype = {};
UserCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.users = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new ttypes.User();
          elem24.read(input);
          this.users.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserCollection.prototype.write = function(output) {
  output.writeStructBegin('UserCollection');
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter25 in this.users)
    {
      if (this.users.hasOwnProperty(iter25))
      {
        iter25 = this.users[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Group = module.exports.Group = function(args) {
  this.ID = null;
  this.name = null;
  this.description = null;
  this.users = null;
  if (args) {
    if (args.ID !== undefined && args.ID !== null) {
      this.ID = args.ID;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [ttypes.User]);
    }
  }
};
Group.prototype = {};
Group.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.users = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new ttypes.User();
          elem32.read(input);
          this.users.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Group.prototype.write = function(output) {
  output.writeStructBegin('Group');
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 1);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 3);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter33 in this.users)
    {
      if (this.users.hasOwnProperty(iter33))
      {
        iter33 = this.users[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InvalidGroup = module.exports.InvalidGroup = function(args) {
  this.group = null;
  this.error = null;
  if (args instanceof common_ttypes.Error) {
    this.error = args;
    return;
  }
  if (args) {
    if (args.group !== undefined && args.group !== null) {
      this.group = new ttypes.Group(args.group);
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
  }
};
InvalidGroup.prototype = {};
InvalidGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.group = new ttypes.Group();
        this.group.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.error = new common_ttypes.Error();
        this.error.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InvalidGroup.prototype.write = function(output) {
  output.writeStructBegin('InvalidGroup');
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRUCT, 1);
    this.group.write(output);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.STRUCT, 2);
    this.error.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GroupCollection = module.exports.GroupCollection = function(args) {
  this.groups = null;
  this.pagination = null;
  if (args) {
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [ttypes.Group]);
    }
    if (args.pagination !== undefined && args.pagination !== null) {
      this.pagination = new common_ttypes.Pagination(args.pagination);
    }
  }
};
GroupCollection.prototype = {};
GroupCollection.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.groups = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new ttypes.Group();
          elem40.read(input);
          this.groups.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.pagination = new common_ttypes.Pagination();
        this.pagination.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GroupCollection.prototype.write = function(output) {
  output.writeStructBegin('GroupCollection');
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter41 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter41))
      {
        iter41 = this.groups[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.pagination !== null && this.pagination !== undefined) {
    output.writeFieldBegin('pagination', Thrift.Type.STRUCT, 2);
    this.pagination.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CsvDetails = module.exports.CsvDetails = function(args) {
  this.columns = null;
  this.attributesPerColumn = null;
  if (args) {
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.attributesPerColumn !== undefined && args.attributesPerColumn !== null) {
      this.attributesPerColumn = Thrift.copyMap(args.attributesPerColumn, [null]);
    }
  }
};
CsvDetails.prototype = {};
CsvDetails.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.columns = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = input.readString();
          this.columns.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size49 = 0;
        var _rtmp353;
        this.attributesPerColumn = {};
        var _ktype50 = 0;
        var _vtype51 = 0;
        _rtmp353 = input.readMapBegin();
        _ktype50 = _rtmp353.ktype;
        _vtype51 = _rtmp353.vtype;
        _size49 = _rtmp353.size;
        for (var _i54 = 0; _i54 < _size49; ++_i54)
        {
          var key55 = null;
          var val56 = null;
          key55 = input.readString();
          val56 = input.readString();
          this.attributesPerColumn[key55] = val56;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CsvDetails.prototype.write = function(output) {
  output.writeStructBegin('CsvDetails');
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter57 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter57))
      {
        iter57 = this.columns[iter57];
        output.writeString(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.attributesPerColumn !== null && this.attributesPerColumn !== undefined) {
    output.writeFieldBegin('attributesPerColumn', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.attributesPerColumn));
    for (var kiter58 in this.attributesPerColumn)
    {
      if (this.attributesPerColumn.hasOwnProperty(kiter58))
      {
        var viter59 = this.attributesPerColumn[kiter58];
        output.writeString(kiter58);
        output.writeString(viter59);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExportUsers = module.exports.ExportUsers = function(args) {
  this.csvDetails = null;
  this.users = null;
  if (args) {
    if (args.csvDetails !== undefined && args.csvDetails !== null) {
      this.csvDetails = new ttypes.CsvDetails(args.csvDetails);
    }
    if (args.users !== undefined && args.users !== null) {
      this.users = Thrift.copyList(args.users, [ttypes.User]);
    }
  }
};
ExportUsers.prototype = {};
ExportUsers.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.csvDetails = new ttypes.CsvDetails();
        this.csvDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size60 = 0;
        var _rtmp364;
        this.users = [];
        var _etype63 = 0;
        _rtmp364 = input.readListBegin();
        _etype63 = _rtmp364.etype;
        _size60 = _rtmp364.size;
        for (var _i65 = 0; _i65 < _size60; ++_i65)
        {
          var elem66 = null;
          elem66 = new ttypes.User();
          elem66.read(input);
          this.users.push(elem66);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExportUsers.prototype.write = function(output) {
  output.writeStructBegin('ExportUsers');
  if (this.csvDetails !== null && this.csvDetails !== undefined) {
    output.writeFieldBegin('csvDetails', Thrift.Type.STRUCT, 1);
    this.csvDetails.write(output);
    output.writeFieldEnd();
  }
  if (this.users !== null && this.users !== undefined) {
    output.writeFieldBegin('users', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.users.length);
    for (var iter67 in this.users)
    {
      if (this.users.hasOwnProperty(iter67))
      {
        iter67 = this.users[iter67];
        iter67.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ExportGroups = module.exports.ExportGroups = function(args) {
  this.csvDetails = null;
  this.groups = null;
  if (args) {
    if (args.csvDetails !== undefined && args.csvDetails !== null) {
      this.csvDetails = new ttypes.CsvDetails(args.csvDetails);
    }
    if (args.groups !== undefined && args.groups !== null) {
      this.groups = Thrift.copyList(args.groups, [ttypes.Group]);
    }
  }
};
ExportGroups.prototype = {};
ExportGroups.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.csvDetails = new ttypes.CsvDetails();
        this.csvDetails.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size68 = 0;
        var _rtmp372;
        this.groups = [];
        var _etype71 = 0;
        _rtmp372 = input.readListBegin();
        _etype71 = _rtmp372.etype;
        _size68 = _rtmp372.size;
        for (var _i73 = 0; _i73 < _size68; ++_i73)
        {
          var elem74 = null;
          elem74 = new ttypes.Group();
          elem74.read(input);
          this.groups.push(elem74);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ExportGroups.prototype.write = function(output) {
  output.writeStructBegin('ExportGroups');
  if (this.csvDetails !== null && this.csvDetails !== undefined) {
    output.writeFieldBegin('csvDetails', Thrift.Type.STRUCT, 1);
    this.csvDetails.write(output);
    output.writeFieldEnd();
  }
  if (this.groups !== null && this.groups !== undefined) {
    output.writeFieldBegin('groups', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.groups.length);
    for (var iter75 in this.groups)
    {
      if (this.groups.hasOwnProperty(iter75))
      {
        iter75 = this.groups[iter75];
        iter75.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '1.1.0';
ttypes.ERR_CODE = 169;
ttypes.SERVICE_NAME = '4cas-admin-um';
ttypes.CSV_COLUMN_CONNECTOR = 'connector_id';
ttypes.CSV_COLUMN_EMAIL = 'email';
ttypes.CSV_COLUMN_USERNAME = 'username';
ttypes.CSV_COLUMN_GIVEN_NAME = 'given_name';
ttypes.CSV_COLUMN_FAMILY_NAME = 'family_name';
ttypes.CSV_COLUMN_PASSWORD = 'password';
ttypes.CSV_COLUMN_LOCKED = 'locked';
ttypes.CSV_COLUMN_FORCE_PWD_CHANGE = 'force_pwd_change';
ttypes.CSV_COLUMN_GEN_PWD = 'generate_pwd';
ttypes.CSV_COLUMN_GROUPS = 'groups';
ttypes.CSV_COLUMN_NAME = 'name';
ttypes.CSV_COLUMN_DESCRIPTION = 'description';
ttypes.EXPORT_FORMAT_CSV = 'csv';
ttypes.ATTRIBUTES_PER_COLUMN = {
  'connector_id' : 'connectorID',
  'email' : 'email',
  'username' : 'username',
  'given_name' : 'givenName',
  'family_name' : 'familyName',
  'password' : 'password',
  'locked' : 'locked',
  'force_pwd_change' : 'forcePwdChange',
  'generate_pwd' : 'generatePwd',
  'groups' : 'groups',
  'name' : 'name',
  'description' : 'description'
};
