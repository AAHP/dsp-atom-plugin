//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');
var vfs_ttypes = require('./vfs_types');


var ttypes = module.exports = {};
var MoveFilesTaskPayload = module.exports.MoveFilesTaskPayload = function(args) {
  this.objectIDs = null;
  this.destinationFolderID = null;
  if (args) {
    if (args.objectIDs !== undefined && args.objectIDs !== null) {
      this.objectIDs = Thrift.copyList(args.objectIDs, [null]);
    }
    if (args.destinationFolderID !== undefined && args.destinationFolderID !== null) {
      this.destinationFolderID = args.destinationFolderID;
    }
  }
};
MoveFilesTaskPayload.prototype = {};
MoveFilesTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.objectIDs = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.objectIDs.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destinationFolderID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MoveFilesTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('MoveFilesTaskPayload');
  if (this.objectIDs !== null && this.objectIDs !== undefined) {
    output.writeFieldBegin('objectIDs', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.objectIDs.length);
    for (var iter7 in this.objectIDs)
    {
      if (this.objectIDs.hasOwnProperty(iter7))
      {
        iter7 = this.objectIDs[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.destinationFolderID !== null && this.destinationFolderID !== undefined) {
    output.writeFieldBegin('destinationFolderID', Thrift.Type.STRING, 2);
    output.writeString(this.destinationFolderID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.SERVICE_NAME = 'dmp-service-uploads';
ttypes.VFS_FOLDER_NAME = 'Incoming';
ttypes.VERSION = '0.3.0';
ttypes.ERR_CODE = 36;
ttypes.AMQP_ROUTING_KEY = 'dmp.events.upload';
ttypes.TASK_MOVE_FILES = 'task-move-files';
