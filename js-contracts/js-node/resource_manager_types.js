//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var common_ttypes = require('./common_types');


var ttypes = module.exports = {};
var WebHookConfig = module.exports.WebHookConfig = function(args) {
  this.method = null;
  this.url = null;
  this.body = null;
  if (args) {
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.body !== undefined && args.body !== null) {
      this.body = args.body;
    }
  }
};
WebHookConfig.prototype = {};
WebHookConfig.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.body = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WebHookConfig.prototype.write = function(output) {
  output.writeStructBegin('WebHookConfig');
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 1);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 2);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.body !== null && this.body !== undefined) {
    output.writeFieldBegin('body', Thrift.Type.STRING, 3);
    output.writeString(this.body);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ToolEntry = module.exports.ToolEntry = function(args) {
  this.description = null;
  this.id = null;
  this.image = null;
  this.name = null;
  this.status = null;
  this.updated = null;
  this.updatedBy = null;
  this.disabled = null;
  this.external = null;
  this.rm_task_id = null;
  this.url = null;
  this.dashboard = null;
  this.frame = null;
  this.docs = null;
  this.tags = null;
  this.capacity = null;
  this.permission_name = null;
  this.extraParams = null;
  this.ownerID = null;
  this.price = null;
  this.canStart = null;
  this.canStop = null;
  if (args) {
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.image !== undefined && args.image !== null) {
      this.image = args.image;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.updated !== undefined && args.updated !== null) {
      this.updated = args.updated;
    }
    if (args.updatedBy !== undefined && args.updatedBy !== null) {
      this.updatedBy = args.updatedBy;
    }
    if (args.disabled !== undefined && args.disabled !== null) {
      this.disabled = args.disabled;
    }
    if (args.external !== undefined && args.external !== null) {
      this.external = args.external;
    }
    if (args.rm_task_id !== undefined && args.rm_task_id !== null) {
      this.rm_task_id = args.rm_task_id;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
    if (args.dashboard !== undefined && args.dashboard !== null) {
      this.dashboard = args.dashboard;
    }
    if (args.frame !== undefined && args.frame !== null) {
      this.frame = args.frame;
    }
    if (args.docs !== undefined && args.docs !== null) {
      this.docs = args.docs;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
    if (args.capacity !== undefined && args.capacity !== null) {
      this.capacity = args.capacity;
    }
    if (args.permission_name !== undefined && args.permission_name !== null) {
      this.permission_name = args.permission_name;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = Thrift.copyMap(args.extraParams, [null]);
    }
    if (args.ownerID !== undefined && args.ownerID !== null) {
      this.ownerID = args.ownerID;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.canStart !== undefined && args.canStart !== null) {
      this.canStart = args.canStart;
    }
    if (args.canStop !== undefined && args.canStop !== null) {
      this.canStop = args.canStop;
    }
  }
};
ToolEntry.prototype = {};
ToolEntry.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.image = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.updated = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.updatedBy = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.BOOL) {
        this.disabled = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.external = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.rm_task_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.dashboard = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.frame = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.docs = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.tags = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.tags.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I16) {
        this.capacity = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.permission_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.MAP) {
        var _size7 = 0;
        var _rtmp311;
        this.extraParams = {};
        var _ktype8 = 0;
        var _vtype9 = 0;
        _rtmp311 = input.readMapBegin();
        _ktype8 = _rtmp311.ktype;
        _vtype9 = _rtmp311.vtype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var key13 = null;
          var val14 = null;
          key13 = input.readString();
          val14 = input.readString();
          this.extraParams[key13] = val14;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.ownerID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.BOOL) {
        this.canStart = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.BOOL) {
        this.canStop = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ToolEntry.prototype.write = function(output) {
  output.writeStructBegin('ToolEntry');
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 1);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.image !== null && this.image !== undefined) {
    output.writeFieldBegin('image', Thrift.Type.STRING, 3);
    output.writeString(this.image);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 5);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  if (this.updated !== null && this.updated !== undefined) {
    output.writeFieldBegin('updated', Thrift.Type.STRING, 6);
    output.writeString(this.updated);
    output.writeFieldEnd();
  }
  if (this.updatedBy !== null && this.updatedBy !== undefined) {
    output.writeFieldBegin('updatedBy', Thrift.Type.STRING, 7);
    output.writeString(this.updatedBy);
    output.writeFieldEnd();
  }
  if (this.disabled !== null && this.disabled !== undefined) {
    output.writeFieldBegin('disabled', Thrift.Type.BOOL, 8);
    output.writeBool(this.disabled);
    output.writeFieldEnd();
  }
  if (this.external !== null && this.external !== undefined) {
    output.writeFieldBegin('external', Thrift.Type.BOOL, 9);
    output.writeBool(this.external);
    output.writeFieldEnd();
  }
  if (this.rm_task_id !== null && this.rm_task_id !== undefined) {
    output.writeFieldBegin('rm_task_id', Thrift.Type.STRING, 10);
    output.writeString(this.rm_task_id);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 11);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  if (this.dashboard !== null && this.dashboard !== undefined) {
    output.writeFieldBegin('dashboard', Thrift.Type.STRING, 12);
    output.writeString(this.dashboard);
    output.writeFieldEnd();
  }
  if (this.frame !== null && this.frame !== undefined) {
    output.writeFieldBegin('frame', Thrift.Type.BOOL, 13);
    output.writeBool(this.frame);
    output.writeFieldEnd();
  }
  if (this.docs !== null && this.docs !== undefined) {
    output.writeFieldBegin('docs', Thrift.Type.STRING, 14);
    output.writeString(this.docs);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 15);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter15 in this.tags)
    {
      if (this.tags.hasOwnProperty(iter15))
      {
        iter15 = this.tags[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.capacity !== null && this.capacity !== undefined) {
    output.writeFieldBegin('capacity', Thrift.Type.I16, 16);
    output.writeI16(this.capacity);
    output.writeFieldEnd();
  }
  if (this.permission_name !== null && this.permission_name !== undefined) {
    output.writeFieldBegin('permission_name', Thrift.Type.STRING, 17);
    output.writeString(this.permission_name);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.MAP, 18);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraParams));
    for (var kiter16 in this.extraParams)
    {
      if (this.extraParams.hasOwnProperty(kiter16))
      {
        var viter17 = this.extraParams[kiter16];
        output.writeString(kiter16);
        output.writeString(viter17);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.ownerID !== null && this.ownerID !== undefined) {
    output.writeFieldBegin('ownerID', Thrift.Type.STRING, 19);
    output.writeString(this.ownerID);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 20);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  if (this.canStart !== null && this.canStart !== undefined) {
    output.writeFieldBegin('canStart', Thrift.Type.BOOL, 21);
    output.writeBool(this.canStart);
    output.writeFieldEnd();
  }
  if (this.canStop !== null && this.canStop !== undefined) {
    output.writeFieldBegin('canStop', Thrift.Type.BOOL, 22);
    output.writeBool(this.canStop);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HookStartStopResponse = module.exports.HookStartStopResponse = function(args) {
  this.instance_id = null;
  this.tool_id = null;
  this.cost = null;
  this.instance_type = null;
  if (args) {
    if (args.instance_id !== undefined && args.instance_id !== null) {
      this.instance_id = args.instance_id;
    }
    if (args.tool_id !== undefined && args.tool_id !== null) {
      this.tool_id = args.tool_id;
    }
    if (args.cost !== undefined && args.cost !== null) {
      this.cost = args.cost;
    }
    if (args.instance_type !== undefined && args.instance_type !== null) {
      this.instance_type = args.instance_type;
    }
  }
};
HookStartStopResponse.prototype = {};
HookStartStopResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.instance_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.tool_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cost = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.instance_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HookStartStopResponse.prototype.write = function(output) {
  output.writeStructBegin('HookStartStopResponse');
  if (this.instance_id !== null && this.instance_id !== undefined) {
    output.writeFieldBegin('instance_id', Thrift.Type.STRING, 1);
    output.writeString(this.instance_id);
    output.writeFieldEnd();
  }
  if (this.tool_id !== null && this.tool_id !== undefined) {
    output.writeFieldBegin('tool_id', Thrift.Type.STRING, 2);
    output.writeString(this.tool_id);
    output.writeFieldEnd();
  }
  if (this.cost !== null && this.cost !== undefined) {
    output.writeFieldBegin('cost', Thrift.Type.STRING, 3);
    output.writeString(this.cost);
    output.writeFieldEnd();
  }
  if (this.instance_type !== null && this.instance_type !== undefined) {
    output.writeFieldBegin('instance_type', Thrift.Type.STRING, 4);
    output.writeString(this.instance_type);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StartStopToolTaskPayload = module.exports.StartStopToolTaskPayload = function(args) {
  this.toolID = null;
  this.toolName = null;
  this.webHook = null;
  this.actionType = null;
  this.extraParams = null;
  if (args) {
    if (args.toolID !== undefined && args.toolID !== null) {
      this.toolID = args.toolID;
    }
    if (args.toolName !== undefined && args.toolName !== null) {
      this.toolName = args.toolName;
    }
    if (args.webHook !== undefined && args.webHook !== null) {
      this.webHook = new ttypes.WebHookConfig(args.webHook);
    }
    if (args.actionType !== undefined && args.actionType !== null) {
      this.actionType = args.actionType;
    }
    if (args.extraParams !== undefined && args.extraParams !== null) {
      this.extraParams = Thrift.copyMap(args.extraParams, [null]);
    }
  }
};
StartStopToolTaskPayload.prototype = {};
StartStopToolTaskPayload.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toolID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.toolName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.webHook = new ttypes.WebHookConfig();
        this.webHook.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.actionType = input.readByte();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.MAP) {
        var _size18 = 0;
        var _rtmp322;
        this.extraParams = {};
        var _ktype19 = 0;
        var _vtype20 = 0;
        _rtmp322 = input.readMapBegin();
        _ktype19 = _rtmp322.ktype;
        _vtype20 = _rtmp322.vtype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var key24 = null;
          var val25 = null;
          key24 = input.readString();
          val25 = input.readString();
          this.extraParams[key24] = val25;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartStopToolTaskPayload.prototype.write = function(output) {
  output.writeStructBegin('StartStopToolTaskPayload');
  if (this.toolID !== null && this.toolID !== undefined) {
    output.writeFieldBegin('toolID', Thrift.Type.STRING, 1);
    output.writeString(this.toolID);
    output.writeFieldEnd();
  }
  if (this.toolName !== null && this.toolName !== undefined) {
    output.writeFieldBegin('toolName', Thrift.Type.STRING, 2);
    output.writeString(this.toolName);
    output.writeFieldEnd();
  }
  if (this.webHook !== null && this.webHook !== undefined) {
    output.writeFieldBegin('webHook', Thrift.Type.STRUCT, 3);
    this.webHook.write(output);
    output.writeFieldEnd();
  }
  if (this.actionType !== null && this.actionType !== undefined) {
    output.writeFieldBegin('actionType', Thrift.Type.BYTE, 4);
    output.writeByte(this.actionType);
    output.writeFieldEnd();
  }
  if (this.extraParams !== null && this.extraParams !== undefined) {
    output.writeFieldBegin('extraParams', Thrift.Type.MAP, 5);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.extraParams));
    for (var kiter26 in this.extraParams)
    {
      if (this.extraParams.hasOwnProperty(kiter26))
      {
        var viter27 = this.extraParams[kiter26];
        output.writeString(kiter26);
        output.writeString(viter27);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskInfo = module.exports.TaskInfo = function(args) {
  this.taskID = null;
  this.principalID = null;
  this.taskName = null;
  this.startTime = null;
  this.endTime = null;
  this.taskStatus = null;
  this.taskOutput = null;
  this.taskComment = null;
  this.price = null;
  if (args) {
    if (args.taskID !== undefined && args.taskID !== null) {
      this.taskID = args.taskID;
    }
    if (args.principalID !== undefined && args.principalID !== null) {
      this.principalID = args.principalID;
    }
    if (args.taskName !== undefined && args.taskName !== null) {
      this.taskName = args.taskName;
    }
    if (args.startTime !== undefined && args.startTime !== null) {
      this.startTime = args.startTime;
    }
    if (args.endTime !== undefined && args.endTime !== null) {
      this.endTime = args.endTime;
    }
    if (args.taskStatus !== undefined && args.taskStatus !== null) {
      this.taskStatus = args.taskStatus;
    }
    if (args.taskOutput !== undefined && args.taskOutput !== null) {
      this.taskOutput = args.taskOutput;
    }
    if (args.taskComment !== undefined && args.taskComment !== null) {
      this.taskComment = args.taskComment;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
  }
};
TaskInfo.prototype = {};
TaskInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.taskID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.principalID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.taskName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.startTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.endTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.taskStatus = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.taskOutput = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.taskComment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.price = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskInfo.prototype.write = function(output) {
  output.writeStructBegin('TaskInfo');
  if (this.taskID !== null && this.taskID !== undefined) {
    output.writeFieldBegin('taskID', Thrift.Type.STRING, 1);
    output.writeString(this.taskID);
    output.writeFieldEnd();
  }
  if (this.principalID !== null && this.principalID !== undefined) {
    output.writeFieldBegin('principalID', Thrift.Type.STRING, 2);
    output.writeString(this.principalID);
    output.writeFieldEnd();
  }
  if (this.taskName !== null && this.taskName !== undefined) {
    output.writeFieldBegin('taskName', Thrift.Type.STRING, 3);
    output.writeString(this.taskName);
    output.writeFieldEnd();
  }
  if (this.startTime !== null && this.startTime !== undefined) {
    output.writeFieldBegin('startTime', Thrift.Type.STRING, 4);
    output.writeString(this.startTime);
    output.writeFieldEnd();
  }
  if (this.endTime !== null && this.endTime !== undefined) {
    output.writeFieldBegin('endTime', Thrift.Type.STRING, 5);
    output.writeString(this.endTime);
    output.writeFieldEnd();
  }
  if (this.taskStatus !== null && this.taskStatus !== undefined) {
    output.writeFieldBegin('taskStatus', Thrift.Type.STRING, 6);
    output.writeString(this.taskStatus);
    output.writeFieldEnd();
  }
  if (this.taskOutput !== null && this.taskOutput !== undefined) {
    output.writeFieldBegin('taskOutput', Thrift.Type.STRING, 7);
    output.writeString(this.taskOutput);
    output.writeFieldEnd();
  }
  if (this.taskComment !== null && this.taskComment !== undefined) {
    output.writeFieldBegin('taskComment', Thrift.Type.STRING, 8);
    output.writeString(this.taskComment);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.STRING, 9);
    output.writeString(this.price);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ToolCostInfo = module.exports.ToolCostInfo = function(args) {
  this.toolName = null;
  this.saveWeek = null;
  this.saveMonth = null;
  this.saveTotal = null;
  this.costWeek = null;
  this.costMonth = null;
  this.costTotal = null;
  if (args) {
    if (args.toolName !== undefined && args.toolName !== null) {
      this.toolName = args.toolName;
    }
    if (args.saveWeek !== undefined && args.saveWeek !== null) {
      this.saveWeek = args.saveWeek;
    }
    if (args.saveMonth !== undefined && args.saveMonth !== null) {
      this.saveMonth = args.saveMonth;
    }
    if (args.saveTotal !== undefined && args.saveTotal !== null) {
      this.saveTotal = args.saveTotal;
    }
    if (args.costWeek !== undefined && args.costWeek !== null) {
      this.costWeek = args.costWeek;
    }
    if (args.costMonth !== undefined && args.costMonth !== null) {
      this.costMonth = args.costMonth;
    }
    if (args.costTotal !== undefined && args.costTotal !== null) {
      this.costTotal = args.costTotal;
    }
  }
};
ToolCostInfo.prototype = {};
ToolCostInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.toolName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.saveWeek = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.saveMonth = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.saveTotal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.costWeek = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.costMonth = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.costTotal = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ToolCostInfo.prototype.write = function(output) {
  output.writeStructBegin('ToolCostInfo');
  if (this.toolName !== null && this.toolName !== undefined) {
    output.writeFieldBegin('toolName', Thrift.Type.STRING, 1);
    output.writeString(this.toolName);
    output.writeFieldEnd();
  }
  if (this.saveWeek !== null && this.saveWeek !== undefined) {
    output.writeFieldBegin('saveWeek', Thrift.Type.STRING, 2);
    output.writeString(this.saveWeek);
    output.writeFieldEnd();
  }
  if (this.saveMonth !== null && this.saveMonth !== undefined) {
    output.writeFieldBegin('saveMonth', Thrift.Type.STRING, 3);
    output.writeString(this.saveMonth);
    output.writeFieldEnd();
  }
  if (this.saveTotal !== null && this.saveTotal !== undefined) {
    output.writeFieldBegin('saveTotal', Thrift.Type.STRING, 4);
    output.writeString(this.saveTotal);
    output.writeFieldEnd();
  }
  if (this.costWeek !== null && this.costWeek !== undefined) {
    output.writeFieldBegin('costWeek', Thrift.Type.STRING, 5);
    output.writeString(this.costWeek);
    output.writeFieldEnd();
  }
  if (this.costMonth !== null && this.costMonth !== undefined) {
    output.writeFieldBegin('costMonth', Thrift.Type.STRING, 6);
    output.writeString(this.costMonth);
    output.writeFieldEnd();
  }
  if (this.costTotal !== null && this.costTotal !== undefined) {
    output.writeFieldBegin('costTotal', Thrift.Type.STRING, 7);
    output.writeString(this.costTotal);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ttypes.VERSION = '0.2.2';
ttypes.TASK_RESOURCE_MANAGER_START_STOP = 'task-resource-manager-start-stop';
ttypes.TOOL_STATUS_STARTING = 'starting';
ttypes.TOOL_STATUS_STOPPING = 'stopping';
ttypes.TOOL_STATUS_STARTED = 'started';
ttypes.TOOL_STATUS_STOPPED = 'stopped';
ttypes.TOOL_STATUS_ERROR = 'error';
ttypes.TAG_TOOL = 'tool';
ttypes.TAG_PUBLISHER = 'publisher';
ttypes.TAG_SFTP = 'sftp';
ttypes.TAG_USER_SERVICE = 'dsp-user-service';
ttypes.SERVICE_NAME = 'dmp-resource-manager';
ttypes.ERR_CODE = 61;
ttypes.USER_SERVICE_WORKING_DIR_ID = 'USER_SERVICE_WORKING_DIR_ID';
ttypes.USER_SERVICE_APP_DIR = 'USER_SERVICE_APP_DIR';
ttypes.USER_SERVICE_APP_NAME = 'USER_SERVICE_APP_NAME';
ttypes.API_TOKEN = 'API_TOKEN';
ttypes.USER_SERVICE_ENV_VARS = 'USER_SERVICE_ENV_VARS';
ttypes.ACTION_TYPE_START = 1;
ttypes.ACTION_TYPE_STOP = 2;
